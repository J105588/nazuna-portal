
[css/admin.css]
/* 管理画面専用スタイル */

/* レスポンシブ対応 */
@media (max-width: 768px) {
    .admin-main {
        grid-template-columns: 1fr;
        grid-template-areas: 
            "header"
            "content";
    }
    
    .admin-sidebar {
        position: fixed;
        top: 0;
        left: -280px;
        width: 280px;
        height: 100vh;
        background: var(--surface-color);
        box-shadow: var(--shadow-xl);
        z-index: 1000;
        transition: left 0.3s ease;
        overflow-y: auto;
    }
    
    .admin-sidebar.active {
        left: 0;
    }
    
    .admin-sidebar .sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid var(--border-color);
        background: var(--primary-color);
        color: white;
    }
    
    .admin-sidebar .sidebar-header h3 {
        margin: 0;
        font-size: 1.1rem;
    }
    
    .admin-sidebar .sidebar-close {
        background: none;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.5rem;
    }
    
    .admin-content {
        margin-left: 0;
        padding: 1rem;
    }
    
    .admin-header {
        padding: 1rem;
    }
    
    .admin-nav {
        flex-direction: column;
        gap: 1rem;
    }
    
    .admin-user {
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }
    
    .section-header {
        flex-direction: column;
        gap: 1rem;
        align-items: flex-start;
    }
    
    .section-controls {
        width: 100%;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .filter-controls {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .form-actions {
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .admin-table-container {
        overflow-x: auto;
    }
    
    .admin-table {
        min-width: 600px;
    }
    
    .members-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }
    
    .notification-panel {
        flex-direction: column;
    }
    
    .notification-form,
    .notification-history {
        width: 100%;
    }
}

@media (max-width: 480px) {
    .login-container {
        padding: 2rem 1.5rem;
        margin: 1rem;
    }
    
    .admin-content {
        padding: 0.5rem;
    }
    
    .admin-header {
        padding: 0.5rem;
    }
    
    .hamburger-menu {
        display: block;
    }
    
    .admin-sidebar {
        width: 100vw;
        left: -100vw;
    }
    
    .admin-sidebar.active {
        left: 0;
    }
}

/* ログイン画面 */
.login-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: 
        radial-gradient(circle at 20% 20%, rgba(168, 213, 186, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(212, 165, 116, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 40% 60%, rgba(214, 123, 123, 0.3) 0%, transparent 50%),
        linear-gradient(135deg, #4a7c59 0%, #d4a574 50%, #e74c3c 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
}

.login-container {
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    padding: 3rem;
    width: 100%;
    max-width: 400px;
    text-align: center;
}

.login-header {
    margin-bottom: 2rem;
}

.login-logo {
    width: 80px;
    height: 80px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.login-logo i {
    font-size: 2rem;
    color: white;
}

.login-header h1 {
    font-size: 1.75rem;
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.login-header p {
    color: var(--text-light);
}

.login-form {
    text-align: left;
}

.btn-login {
    width: 100%;
    padding: 1rem;
    font-size: 1.1rem;
    margin-top: 1rem;
}

.login-error {
    background: rgba(231, 76, 60, 0.1);
    color: var(--accent-color);
    padding: 1rem;
    border-radius: 0.5rem;
    margin-top: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
}

/* 管理画面レイアウト */
.admin-main {
    display: grid;
    grid-template-areas: 
        "header header"
        "sidebar content";
    grid-template-columns: 280px 1fr;
    grid-template-rows: 70px 1fr;
    min-height: 100vh;
    background: var(--background-color);
}

/* ヘッダー */
.admin-header {
    grid-area: header;
    background: var(--surface-color);
    border-bottom: 1px solid var(--border-color);
    box-shadow: var(--shadow-sm);
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    display: flex;
    align-items: center;
}

/* ハンバーガーメニューボタン */
.hamburger-menu {
    display: flex;
    flex-direction: column;
    justify-content: space-around;
    width: 24px;
    height: 24px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
    margin: 0 1rem;
    z-index: 1001;
}

.hamburger-menu span {
    width: 100%;
    height: 2px;
    background-color: var(--text-color);
    transition: all 0.3s ease;
    border-radius: 2px;
}

.hamburger-menu:hover span {
    background-color: var(--primary-color);
}

/* ハンバーガーメニューのアクティブ状態 */
.hamburger-menu.active span:nth-child(1) {
    transform: rotate(45deg) translate(5px, 5px);
}

.hamburger-menu.active span:nth-child(2) {
    opacity: 0;
}

.hamburger-menu.active span:nth-child(3) {
    transform: rotate(-45deg) translate(7px, -6px);
}

.admin-nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 70px;
    padding: 0 2rem;
    width: 100%;
    flex: 1;
}

.admin-logo {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--primary-color);
}

.admin-logo i {
    font-size: 1.5rem;
}

.admin-user {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-left: auto;
}

.admin-user span {
    color: var(--text-color);
    font-weight: 500;
    font-size: 0.9rem;
    white-space: nowrap;
}

/* サイドバー */
.admin-sidebar {
    grid-area: sidebar;
    background: var(--surface-color);
    border-right: 1px solid var(--border-color);
    padding-top: 70px;
    position: fixed;
    top: 0;
    left: 0;
    width: 280px;
    height: 100vh;
    overflow-y: auto;
}

.admin-menu ul {
    list-style: none;
    padding: 1rem 0;
}

.admin-menu li {
    margin: 0.25rem 0;
}

.menu-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 1.5rem;
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.3s ease;
    border-left: 3px solid transparent;
}

.menu-item:hover {
    background: var(--background-color);
    color: var(--secondary-color);
}

.menu-item.active {
    background: rgba(52, 152, 219, 0.1);
    color: var(--secondary-color);
    border-left-color: var(--secondary-color);
    font-weight: 500;
}

.menu-item i {
    width: 20px;
    text-align: center;
}

/* メインコンテンツ */
.admin-content {
    grid-area: content;
    padding: 2rem;
    margin-top: 70px;
    margin-left: 280px;
    min-height: calc(100vh - 70px);
}

.admin-section {
    display: none;
}

.admin-section.active {
    display: block;
}

.section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.section-header h2 {
    color: var(--primary-color);
    font-size: 1.75rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

/* ダッシュボード */
.dashboard-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.stat-card {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    display: flex;
    align-items: center;
    gap: 1.5rem;
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
}

.stat-icon i {
    font-size: 1.5rem;
    color: white;
}

.news-stat {
    background: var(--gradient-primary);
}

.survey-stat {
    background: var(--gradient-secondary);
}

.club-stat {
    background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
}

.forum-stat {
    background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
}

.stat-content h3 {
    font-size: 2rem;
    font-weight: 700;
    color: var(--primary-color);
    margin-bottom: 0.25rem;
}

.stat-content p {
    color: var(--text-light);
    font-size: 0.9rem;
}

.dashboard-recent {
    margin-top: 2rem;
}

.recent-card {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
}

.recent-card h3 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.recent-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.recent-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--background-color);
    border-radius: 0.5rem;
}

.recent-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--gradient-primary);
    color: white;
    flex-shrink: 0;
}

.recent-content {
    flex: 1;
}

.recent-content h4 {
    font-size: 0.9rem;
    color: var(--text-color);
    margin-bottom: 0.25rem;
}

.recent-content p {
    font-size: 0.8rem;
    color: var(--text-light);
}

/* テーブル */
.admin-table-container {
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    overflow: hidden;
}

.admin-table {
    width: 100%;
    border-collapse: collapse;
}

.admin-table th {
    background: var(--background-color);
    padding: 1rem;
    text-align: left;
    font-weight: 600;
    color: var(--primary-color);
    border-bottom: 1px solid var(--border-color);
}

.admin-table td {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-color);
}

.admin-table tbody tr:hover {
    background: var(--background-color);
}

.admin-table tbody tr:last-child td {
    border-bottom: none;
}

/* ステータスバッジ */
.status-badge {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    font-weight: 500;
    text-transform: uppercase;
}

.status-active {
    background: rgba(39, 174, 96, 0.1);
    color: var(--success-color);
}

.status-draft {
    background: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.status-closed {
    background: rgba(149, 165, 166, 0.1);
    color: #95a5a6;
}

.status-pending {
    background: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.status-resolved {
    background: rgba(39, 174, 96, 0.1);
    color: var(--success-color);
}

/* アクションボタン */
.action-buttons {
    display: flex;
    gap: 0.5rem;
}

.btn-sm {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
}

.btn-icon {
    width: 32px;
    height: 32px;
    padding: 0;
    display: flex;
    align-items: center;
    justify-content: center;
}

/* 生徒会メンバーグリッド */
.members-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
}

.member-admin-card {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    text-align: center;
    position: relative;
}

.member-admin-card .member-actions {
    position: absolute;
    top: 1rem;
    right: 1rem;
    display: flex;
    gap: 0.5rem;
}

.member-avatar {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    background: var(--gradient-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1rem;
}

.member-avatar i {
    font-size: 2.5rem;
    color: white;
}

.member-admin-card h3 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.member-admin-card .member-role {
    color: var(--secondary-color);
    font-weight: 500;
    margin-bottom: 1rem;
}

.member-admin-card .member-message {
    color: var(--text-light);
    font-style: italic;
    font-size: 0.9rem;
}

/* 通知パネル */
.notification-panel {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
}

.notification-form,
.notification-history {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
}

.notification-form h3,
.notification-history h3 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.history-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    max-height: 400px;
    overflow-y: auto;
}

.history-item {
    background: var(--background-color);
    padding: 1rem;
    border-radius: 0.5rem;
    border-left: 3px solid var(--secondary-color);
}

.history-item h4 {
    font-size: 0.9rem;
    color: var(--text-color);
    margin-bottom: 0.5rem;
}

.history-item p {
    font-size: 0.8rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.history-meta {
    font-size: 0.75rem;
    color: var(--text-light);
    display: flex;
    justify-content: space-between;
}

/* モーダル */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.modal-overlay.active {
    opacity: 1;
    visibility: visible;
}

.modal {
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    width: 90%;
    max-width: 600px;
    max-height: 80vh;
    overflow: hidden;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.modal-overlay.active .modal {
    transform: scale(1);
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-color);
    background: var(--background-color);
}

.modal-header h3 {
    color: var(--primary-color);
    font-size: 1.25rem;
}

.modal-close {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-light);
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
}

.modal-close:hover {
    background: var(--border-color);
    color: var(--text-color);
}

.modal-body {
    padding: 2rem;
    max-height: 60vh;
    overflow-y: auto;
}

.modal-footer {
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
    padding: 1.5rem 2rem;
    border-top: 1px solid var(--border-color);
    background: var(--background-color);
}

/* フッター */
.admin-footer {
    background: var(--primary-color);
    color: white;
    padding: 2rem 0;
    margin-top: 3rem;
    margin-left: 280px;
}

.admin-footer .footer-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
}

.admin-footer .footer-section h4 {
    margin-bottom: 1rem;
    font-size: 1.1rem;
    color: rgba(255, 255, 255, 0.9);
}

.admin-footer .footer-section p {
    margin-bottom: 0.5rem;
    color: rgba(255, 255, 255, 0.8);
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.admin-footer .footer-section i {
    width: 16px;
    text-align: center;
}

/* レスポンシブ対応 */
@media (max-width: 1024px) {
    .admin-main {
        grid-template-areas: 
            "header"
            "content";
        grid-template-columns: 1fr;
        grid-template-rows: 70px 1fr;
    }
    
    .admin-sidebar {
        transform: translateX(-100%);
        transition: transform 0.3s ease;
        z-index: 1001;
    }
    
    .admin-sidebar.active {
        transform: translateX(0);
    }
    
    .admin-content {
        margin-left: 0;
    }
    
    .admin-footer {
        margin-left: 0;
    }
    
    .notification-panel {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 768px) {
    .admin-nav {
        padding: 0 1rem;
    }
    
    .admin-content {
        padding: 1rem;
    }
    
    .section-header {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .dashboard-stats {
        grid-template-columns: 1fr;
    }
    
    .stat-card {
        padding: 1.5rem;
    }
    
    .admin-table-container {
        overflow-x: auto;
    }
    
    .admin-table {
        min-width: 600px;
    }
    
    .members-grid {
        grid-template-columns: 1fr;
    }
    
    .modal {
        width: 100%;
        max-width: 560px;
        margin: 0;
        border-bottom-left-radius: 0;
        border-bottom-right-radius: 0;
        transform: translateY(20px);
        transition: transform 0.25s ease;
    }
    .modal-overlay {
        align-items: flex-end;
    }
    .modal-overlay.active .modal {
        transform: translateY(0);
    }
    
    .modal-body {
        padding: 1rem;
    }
    
    .admin-footer .footer-content {
        grid-template-columns: 1fr;
        text-align: center;
    }
}

@media (max-width: 480px) {
    .login-container {
        padding: 2rem;
        margin: 1rem;
    }
    .modal {
        width: 100%;
        max-width: 100%;
        border-radius: 1rem 1rem 0 0;
    }
    
    .admin-user {
        gap: 0.5rem;
    }
    
    .admin-user span {
        font-size: 0.8rem;
        display: none; /* 小さい画面では非表示 */
    }
    
    .admin-nav {
        padding: 0 1rem;
    }
    
    .action-buttons {
        flex-direction: column;
    }
    
    .recent-item {
        flex-direction: column;
        text-align: center;
    }
}

/* アニメーション */
@keyframes fadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.admin-section.active {
    animation: fadeIn 0.3s ease;
}

/* ローディング状態 */
.loading-state {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 3rem;
    color: var(--text-light);
}

.loading-state i {
    font-size: 2rem;
    margin-right: 1rem;
    animation: spin 1s linear infinite;
}

/* 空の状態 */
.empty-state {
    text-align: center;
    padding: 3rem;
    color: var(--text-light);
}

.empty-state i {
    font-size: 3rem;
    margin-bottom: 1rem;
    color: var(--border-color);
}

.empty-state h3 {
    margin-bottom: 0.5rem;
    color: var(--text-color);
}

/* 成功・エラー状態 */
.success-message,
.error-message {
    padding: 1rem;
    border-radius: 0.5rem;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.success-message {
    background: rgba(39, 174, 96, 0.1);
    color: var(--success-color);
    border: 1px solid rgba(39, 174, 96, 0.2);
}

.error-message {
    background: rgba(231, 76, 60, 0.1);
    color: var(--accent-color);
    border: 1px solid rgba(231, 76, 60, 0.2);
}

/* フォーム要素の調整 */
.form-row {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
}

.form-group-inline {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.form-group-inline label {
    margin-bottom: 0;
    white-space: nowrap;
}

/* カテゴリフィルター */
.category-filter {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
}

.filter-tag {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    border-radius: 1rem;
    background: var(--surface-color);
    color: var(--text-color);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
}

.filter-tag:hover,
.filter-tag.active {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}


[css/style.css]
/* Modal positioning enforcement */
.modal-overlay{position:fixed !important; inset:0;}
#auth-modal-overlay{position:fixed !important; inset:0;}
/* リセットCSS */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

html {
    margin: 0;
    padding: 0;
    height: 100%;
}

/* 基本スタイル */
:root {
    /* 新しいカラーパレット - 淡い緑、オレンジ、赤を主調 */
    --primary-color: #4a7c59;        /* ソフトグリーン */
    --secondary-color: #d4a574;       /* ソフトオレンジ */
    --accent-color: #e74c3c;          /* 鮮やかなレッド */
    --success-color: #6b9b7a;         /* より明るいグリーン */
    --warning-color: #e6a85c;         /* より明るいオレンジ */
    --error-color: #e74c3c;           /* 鮮やかなレッド（エラー用） */
    --danger-color: #c0392b;          /* より濃いレッド（危険・削除用） */
    --background-color: #f8faf9;      /* 非常に淡いグリーンティント */
    --surface-color: #ffffff;
    --text-color: #2d3a2d;            /* ダークグリーン */
    --text-light: #6b7c6b;            /* ミディアムグリーン */
    --border-color: #e8f0e8;          /* 淡いグリーンボーダー */
    --shadow-sm: 0 1px 3px 0 rgba(74, 124, 89, 0.1), 0 1px 2px 0 rgba(74, 124, 89, 0.06);
    --shadow-md: 0 4px 6px -1px rgba(74, 124, 89, 0.1), 0 2px 4px -1px rgba(74, 124, 89, 0.06);
    --shadow-lg: 0 10px 15px -3px rgba(74, 124, 89, 0.1), 0 4px 6px -2px rgba(74, 124, 89, 0.05);
    --shadow-xl: 0 20px 25px -5px rgba(74, 124, 89, 0.1), 0 10px 10px -5px rgba(74, 124, 89, 0.04);
    --gradient-primary: linear-gradient(135deg, #a8d5ba 0%, #d4a574 100%);     /* グリーンからオレンジ */
    --gradient-secondary: linear-gradient(135deg, #ff6b6b 0%, #e74c3c 100%);   /* 鮮やかなピンクからレッド */
    --gradient-hero: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    --gradient-warm: linear-gradient(135deg, #d4a574 0%, #e74c3c 100%);        /* オレンジから鮮やかなレッド */
    --gradient-cool: linear-gradient(135deg, #a8d5ba 0%, #4a7c59 100%);        /* ライトグリーンからダークグリーン */
}

/* 汎用アニメーション/トランジション */
@keyframes fadeInUp {
    from { opacity: 0; transform: translateY(12px); }
    to { opacity: 1; transform: translateY(0); }
}

@keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
}

@keyframes pageEnter {
    0% { 
        opacity: 0; 
        transform: translateY(0) scale(1); 
    }
    100% { 
        opacity: 1; 
        transform: translateY(0) scale(1); 
    }
}

@keyframes pageExit {
    0% { 
        opacity: 1; 
        transform: translateY(0) scale(1); 
    }
    100% { 
        opacity: 0; 
        transform: translateY(-20px) scale(0.95); 
    }
}

@keyframes float {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
}

@keyframes glow {
    0% { box-shadow: 0 0 30px rgba(255, 255, 255, 0.2), inset 0 0 30px rgba(255, 255, 255, 0.1); }
    100% { box-shadow: 0 0 40px rgba(255, 255, 255, 0.4), inset 0 0 40px rgba(255, 255, 255, 0.2); }
}

@keyframes rotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@keyframes iconPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.1); }
}

@keyframes textShimmer {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

@keyframes slideUp {
    from { 
        opacity: 0; 
        transform: translateY(30px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

@keyframes heroShimmer {
    0%, 100% { 
        opacity: 0.6; 
        transform: scale(1); 
    }
    50% { 
        opacity: 0.8; 
        transform: scale(1.05); 
    }
}

@keyframes heroFloat {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    50% { transform: translateY(-15px) rotate(2deg); }
}

@keyframes heroGlow {
    0% { 
        box-shadow: 
            0 0 40px rgba(255, 255, 255, 0.2),
            inset 0 0 40px rgba(255, 255, 255, 0.1); 
    }
    100% { 
        box-shadow: 
            0 0 60px rgba(255, 255, 255, 0.4),
            inset 0 0 60px rgba(255, 255, 255, 0.2); 
    }
}

@keyframes heroRotate {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@keyframes heroIconPulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.15); }
}

/* 豪華なオープニングアニメーション */
@keyframes openingBackgroundShift {
    0%, 100% { 
        background-position: 0% 0%, 100% 100%, 50% 50%, 20% 80%, 80% 20%;
    }
    25% { 
        background-position: 25% 25%, 75% 75%, 75% 25%, 40% 60%, 60% 40%;
    }
    50% { 
        background-position: 50% 50%, 50% 50%, 100% 0%, 60% 40%, 40% 60%;
    }
    75% { 
        background-position: 75% 75%, 25% 25%, 25% 75%, 80% 20%, 20% 80%;
    }
}

@keyframes openingShimmer {
    0%, 100% { 
        opacity: 0.6; 
        transform: scale(1) rotate(0deg); 
    }
    50% { 
        opacity: 0.9; 
        transform: scale(1.1) rotate(180deg); 
    }
}

@keyframes openingGrain {
    0% { transform: translateX(0) translateY(0); }
    25% { transform: translateX(-10px) translateY(-5px); }
    50% { transform: translateX(10px) translateY(-10px); }
    75% { transform: translateX(-5px) translateY(5px); }
    100% { transform: translateX(0) translateY(0); }
}

@keyframes openingLogoFloat {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-8px) rotate(1deg); }
    50% { transform: translateY(-15px) rotate(0deg); }
    75% { transform: translateY(-8px) rotate(-1deg); }
}

@keyframes openingLogoGlow {
    0% { 
        box-shadow: 
            0 0 50px rgba(255, 255, 255, 0.3),
            inset 0 0 50px rgba(255, 255, 255, 0.15),
            0 0 100px rgba(168, 213, 186, 0.2); 
    }
    100% { 
        box-shadow: 
            0 0 80px rgba(255, 255, 255, 0.5),
            inset 0 0 80px rgba(255, 255, 255, 0.25),
            0 0 150px rgba(168, 213, 186, 0.4); 
    }
}


@keyframes openingTitleSlide {
    from { 
        opacity: 0; 
        transform: translateY(50px) scale(0.8); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0) scale(1); 
    }
}

@keyframes openingTitleShimmer {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

@keyframes openingTitleGlow {
    0% { 
        background-position: 0% 50%; 
        opacity: 0.8; 
    }
    50% { 
        background-position: 100% 50%; 
        opacity: 1; 
    }
    100% { 
        background-position: 0% 50%; 
        opacity: 0.8; 
    }
}

@keyframes openingSubtitleSlide {
    from { 
        opacity: 0; 
        transform: translateY(30px); 
    }
    to { 
        opacity: 1; 
        transform: translateY(0); 
    }
}

@keyframes openingSubtitleFloat {
    0%, 100% { transform: translateY(0px); }
    50% { transform: translateY(-5px); }
}

@keyframes openingLoaderSpin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

@keyframes openingProgressFill {
    0% { width: 0%; }
    100% { width: 100%; }
}

@keyframes openingLoadingTextFade {
    0%, 100% { opacity: 0.8; }
    50% { opacity: 1; }
}

@keyframes openingParticleFloat {
    0% { 
        transform: translateY(100vh) translateX(0) scale(0); 
        opacity: 0; 
    }
    10% { 
        opacity: 1; 
        transform: translateY(90vh) translateX(10px) scale(1); 
    }
    90% { 
        opacity: 1; 
        transform: translateY(10vh) translateX(-10px) scale(1); 
    }
    100% { 
        transform: translateY(-10vh) translateX(0) scale(0); 
        opacity: 0; 
    }
}

/* モーダル（共通） */
.modal-overlay {
    position: fixed;
    inset: 0;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    transition: opacity 0.25s ease;
    pointer-events: none;
}

.modal-overlay.active {
    display: flex;
    opacity: 1;
    pointer-events: auto;
}

.modal-overlay.opening {
    display: flex;
    opacity: 0;
    pointer-events: none;
}

.modal-overlay.closing {
    opacity: 0;
}

.modal {
    width: 100%;
    max-width: 420px;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 10px 30px rgba(0,0,0,0.2);
    overflow: hidden;
    transform: translateY(8px) scale(0.98);
    opacity: 0;
    transition: transform 0.25s ease, opacity 0.25s ease;
}

.modal-overlay.active .modal {
    transform: translateY(0) scale(1);
    opacity: 1;
}

.modal-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 12px 16px;
    border-bottom: 1px solid var(--border-color);
    background: var(--surface-color);
}

.modal-header h3 {
    margin: 0;
    font-size: 1.1rem;
    color: var(--primary-color);
}

.modal-close {
    background: transparent;
    border: none;
    width: 36px;
    height: 36px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: 8px;
    cursor: pointer;
    color: var(--text-light);
    transition: background-color 0.2s ease, color 0.2s ease;
}

.modal-close:hover {
    background: var(--background-color);
    color: var(--text-color);
}

.modal-body {
    padding: 16px;
}

/* 認証モーダルの中央揃え */
#auth-modal .modal-body {
    text-align: center;
}

#auth-modal .auth-step {
    text-align: center;
}

#auth-modal .form-group {
    display: inline-block;
    text-align: left;
    width: 100%;
    max-width: 360px;
}

#auth-modal .form-control {
    max-width: 320px;
    margin: 0 auto;
}

#auth-modal .btn {
    margin-left: auto;
    margin-right: auto;
}

/* スマホサイズでの閉じるボタン統一 */
@media (max-width: 768px) {
    .modal-close,
    .sidebar-close-btn {
        width: 36px;
        height: 36px;
        border-radius: 8px;
    }

    .modal-close i,
    .sidebar-close-btn i {
        font-size: 1.1rem;
    }
}

.login-error {
    display: none;
    padding: 10px 12px;
    border-radius: 8px;
    background: rgba(231, 76, 60, 0.08);
    border: 1px solid rgba(231, 76, 60, 0.25);
    color: var(--accent-color);
    font-size: 0.9rem;
}

/* ページトランジション */
body.page-enter { 
    opacity: 0; 
    transform: translateY(20px);
}
body.page-enter-active { 
    animation: pageEnter 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards; 
}
body.page-exit { 
    animation: pageExit 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards; 
}

body {
    font-family: 'Noto Sans JP', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    color: var(--text-color);
    line-height: 1.7;
    background-color: var(--background-color);
    font-size: 16px;
    margin: 0;
    padding: 0;
    min-height: 100vh;
}

/* ナビゲーション */
.navbar {
    background: var(--surface-color);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid var(--border-color);
    padding: 1.25rem 0;
    position: fixed;
    width: 100%;
    top: 0;
    left: 0;
    z-index: 100;
    box-shadow: var(--shadow-sm);
}

.nav-container {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0 20px;
    position: relative;
}

.logo {
    color: var(--primary-color);
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0;
    cursor: pointer;
    transition: color 0.3s ease;
    position: absolute;
    left: 50%;
    transform: translateX(-50%);
}

.nav-spacer {
    width: 50px; /* Same as hamburger width */
}

.logo:hover {
    color: var(--secondary-color);
}

/* Old nav-menu styles removed - now using sidebar only */

/* ハンバーガーメニューのアクセシビリティ */
@media (prefers-reduced-motion: reduce) {
    .hamburger,
    .hamburger span,
    .sidebar,
    .sidebar-overlay {
        transition: none !important;
        animation: none !important;
    }
}

/* フォーカス時のアクセシビリティ */
.hamburger:focus {
    outline: 3px solid var(--secondary-color);
    outline-offset: 3px;
    box-shadow: 
        0 12px 40px rgba(52, 152, 219, 0.35),
        0 4px 12px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.2),
        0 0 0 3px rgba(52, 152, 219, 0.2);
}

.sidebar-nav a:focus {
    outline: 2px solid var(--secondary-color);
    outline-offset: 2px;
    background: rgba(52, 152, 219, 0.1);
}

/* ハンバーガーメニュー */
.hamburger {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    cursor: pointer;
    padding: 14px;
    z-index: 1002 !important;
    position: fixed;
    left: 16px;
    top: 16px;
    pointer-events: auto;
    width: 48px;
    height: 48px;
    border-radius: 12px;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    background: var(--surface-color);
    backdrop-filter: blur(20px);
    border: 2px solid rgba(52, 152, 219, 0.4);
    box-shadow: 
        0 8px 32px rgba(0, 0, 0, 0.25),
        0 2px 8px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.2),
        0 0 0 1px rgba(255, 255, 255, 0.1);
    /* ボタンのリセット */
    font-family: inherit;
    font-size: inherit;
    color: inherit;
    outline: none;
}

.hamburger:hover {
    background: var(--surface-color);
    border-color: var(--secondary-color);
    transform: scale(1.08) translateY(-2px);
    box-shadow: 
        0 12px 40px rgba(52, 152, 219, 0.25),
        0 4px 12px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.2);
}

.hamburger:active {
    transform: scale(1.02);
    transition: transform 0.1s ease;
}

.hamburger span {
    width: 20px;
    height: 2px;
    background: var(--primary-color);
    margin: 2px 0;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    transform-origin: center;
    border-radius: 1px;
    position: relative;
}

.hamburger span::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
    border-radius: 1px;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.hamburger:hover span::after {
    opacity: 1;
}

.hamburger.active {
    background: var(--surface-color);
    border-color: var(--accent-color);
    box-shadow: 
        0 8px 32px rgba(231, 76, 60, 0.3),
        0 2px 8px rgba(231, 76, 60, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.hamburger.active span {
    background: var(--accent-color);
}

.hamburger.active span::after {
    background: var(--accent-color);
    opacity: 1;
}

.hamburger.active span:nth-child(1) {
    transform: rotate(45deg) translate(3px, 3px);
}

.hamburger.active span:nth-child(2) {
    opacity: 0;
    transform: scale(0);
}

.hamburger.active span:nth-child(3) {
    transform: rotate(-45deg) translate(3px, -3px);
}

/* サイドバーが開いている時のハンバーガーボタンの位置 */
.sidebar-open .hamburger {
    left: 336px; /* サイドバー幅(320px) + マージン(16px) */
    z-index: 1002 !important;
    background: var(--surface-color);
    border: 2px solid rgba(52, 152, 219, 0.6);
    box-shadow: 
        0 12px 40px rgba(0, 0, 0, 0.3),
        0 4px 12px rgba(0, 0, 0, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.3),
        0 0 0 2px rgba(255, 255, 255, 0.2);
}

/* スマホ画面でのハンバーガーボタン位置調整 */
@media (max-width: 768px) {
    .sidebar-open .hamburger {
        left: 316px; /* サイドバー幅(300px) + マージン(16px) */
        z-index: 1002 !important;
        background: var(--surface-color);
        border: 2px solid rgba(52, 152, 219, 0.6);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.3),
            0 4px 12px rgba(0, 0, 0, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.3),
            0 0 0 2px rgba(255, 255, 255, 0.2);
    }
}

@media (max-width: 480px) {
    .sidebar-open .hamburger {
        left: 16px; /* スマホでは元の位置に戻す */
        z-index: 1002 !important;
        background: var(--surface-color);
        border: 2px solid rgba(52, 152, 219, 0.6);
        box-shadow: 
            0 12px 40px rgba(0, 0, 0, 0.3),
            0 4px 12px rgba(0, 0, 0, 0.2),
            inset 0 1px 0 rgba(255, 255, 255, 0.3),
            0 0 0 2px rgba(255, 255, 255, 0.2);
    }
}

/* ハンバーガーボタンのパルス効果（初回訪問時） */
.hamburger.pulse {
    animation: hamburgerPulse 2s infinite;
}

@keyframes hamburgerPulse {
    0%, 100% {
        transform: scale(1);
        box-shadow: 
            0 8px 32px rgba(0, 0, 0, 0.12),
            0 2px 8px rgba(0, 0, 0, 0.08),
            inset 0 1px 0 rgba(255, 255, 255, 0.1);
    }
    50% {
        transform: scale(1.05);
        box-shadow: 
            0 12px 40px rgba(52, 152, 219, 0.25),
            0 4px 12px rgba(0, 0, 0, 0.15),
            inset 0 1px 0 rgba(255, 255, 255, 0.2),
            0 0 0 4px rgba(52, 152, 219, 0.1);
    }
}

/* サイドバーナビゲーション */
.sidebar {
    position: fixed;
    top: 0;
    left: -320px;
    width: 320px;
    height: 100vh;
    background: var(--surface-color);
    box-shadow: 
        0 0 0 1px rgba(0, 0, 0, 0.05),
        0 20px 25px -5px rgba(0, 0, 0, 0.1),
        0 10px 10px -5px rgba(0, 0, 0, 0.04);
    z-index: 999;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    overflow-y: auto;
    backdrop-filter: blur(20px);
    border-right: 1px solid rgba(255, 255, 255, 0.1);
}

.sidebar.active {
    left: 0;
    transform: translateX(0);
}

.sidebar-header {
    padding: 2.5rem 2rem 2rem 2rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
    color: white;
    position: relative;
    overflow: visible;
}

.sidebar-header::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, 
        rgba(255, 255, 255, 0.1) 0%, 
        transparent 50%, 
        rgba(255, 255, 255, 0.05) 100%);
    pointer-events: none;
}

.sidebar-header h2 {
    margin: 0;
    font-size: 1.6rem;
    font-weight: 700;
    letter-spacing: -0.5px;
    position: relative;
    z-index: 1;
}

.sidebar-header p {
    margin: 0.75rem 0 0;
    opacity: 0.95;
    font-size: 0.95rem;
    font-weight: 400;
    position: relative;
    z-index: 1;
}

/* スマホ用の閉じるボタン */
.sidebar-close-btn {
    display: none;
    position: absolute;
    top: 0.5rem;
    right: 0.5rem;
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    width: 36px;
    height: 36px;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    transition: all 0.3s ease;
    z-index: 10;
}

.sidebar-close-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: scale(1.1);
}

.sidebar-close-btn i {
    color: white;
    font-size: 1.2rem;
}

/* タブレット・スマホ画面での閉じるボタン表示 */
@media (max-width: 768px) {
    .sidebar-close-btn {
        display: flex;
    }
}

/* デスクトップでは閉じるボタンを非表示 */
@media (min-width: 769px) {
    .sidebar-close-btn {
        display: none !important;
    }
}

.sidebar-nav {
    padding: 1.5rem 0;
}

.sidebar-nav ul {
    list-style: none;
    margin: 0;
    padding: 0;
}

.sidebar-nav li {
    margin: 0.25rem 0;
}

.sidebar-nav a {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem 2rem;
    margin: 0 1rem;
    color: var(--text-color);
    text-decoration: none;
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    border-radius: 12px;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    font-weight: 500;
    border: 1px solid transparent;
}

.sidebar-nav a::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, 
        transparent, 
        rgba(52, 152, 219, 0.08), 
        transparent);
    transition: left 0.4s ease;
    z-index: 0;
}

.sidebar-nav a:hover::before {
    left: 100%;
}

.sidebar-nav a:hover {
    background: rgba(52, 152, 219, 0.05);
    border-color: rgba(52, 152, 219, 0.2);
    color: var(--secondary-color);
    transform: translateX(4px);
    box-shadow: 0 4px 12px rgba(52, 152, 219, 0.15);
}

.sidebar-nav a.active {
    background: linear-gradient(135deg, 
        rgba(52, 152, 219, 0.1) 0%, 
        rgba(52, 152, 219, 0.05) 100%);
    border-color: var(--secondary-color);
    color: var(--secondary-color);
    font-weight: 600;
    box-shadow: 
        0 4px 12px rgba(52, 152, 219, 0.2),
        inset 0 1px 0 rgba(255, 255, 255, 0.1);
}

.sidebar-nav a.active::after {
    content: '';
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    width: 4px;
    height: 4px;
    background: var(--secondary-color);
    border-radius: 50%;
    box-shadow: 0 0 8px rgba(52, 152, 219, 0.6);
}

.sidebar-nav i {
    width: 20px;
    text-align: center;
    font-size: 1.1rem;
    position: relative;
    z-index: 1;
}

.sidebar-nav span {
    position: relative;
    z-index: 1;
}

.sidebar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: 
        radial-gradient(circle at 30% 40%, rgba(44, 62, 80, 0.3) 0%, transparent 50%),
        linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.6) 100%);
    backdrop-filter: blur(3px);
    z-index: 998;
    opacity: 0;
    visibility: hidden;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.sidebar-overlay.active {
    opacity: 1;
    visibility: visible;
}

/* オープニングページ */
.opening-screen {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: 
        radial-gradient(circle at 20% 20%, rgba(168, 213, 186, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(212, 165, 116, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 40% 60%, rgba(214, 123, 123, 0.3) 0%, transparent 50%),
        radial-gradient(circle at 60% 20%, rgba(168, 213, 186, 0.2) 0%, transparent 40%),
        radial-gradient(circle at 10% 70%, rgba(212, 165, 116, 0.2) 0%, transparent 40%),
        linear-gradient(135deg, #a8d5ba 0%, #d4a574 30%, #e74c3c 70%, #a8d5ba 100%);
    z-index: 997;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    opacity: 1;
    transition: opacity 0.5s ease;
    overflow: hidden;
    animation: openingBackgroundShift 20s ease-in-out infinite;
}

.opening-screen::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 70%),
        radial-gradient(circle at 70% 70%, rgba(255, 255, 255, 0.05) 0%, transparent 70%);
    animation: openingShimmer 8s ease-in-out infinite;
}

.opening-screen::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="50" cy="10" r="0.5" fill="rgba(255,255,255,0.05)"/><circle cx="10" cy="50" r="0.5" fill="rgba(255,255,255,0.05)"/><circle cx="90" cy="30" r="0.5" fill="rgba(255,255,255,0.05)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.4;
    animation: openingGrain 15s linear infinite;
}

.opening-screen.fade-out {
    opacity: 0;
    pointer-events: none;
    transform: scale(1.1);
    transition: all 0.8s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

.opening-logo {
    width: 180px;
    height: 180px;
    background: 
        radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.25) 0%, transparent 70%),
        linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 2rem;
    backdrop-filter: blur(20px);
    border: 4px solid rgba(255, 255, 255, 0.4);
    animation: openingLogoFloat 4s ease-in-out infinite, openingLogoGlow 3s ease-in-out infinite alternate;
    box-shadow: 
        0 0 50px rgba(255, 255, 255, 0.3),
        inset 0 0 50px rgba(255, 255, 255, 0.15),
        0 0 100px rgba(168, 213, 186, 0.2);
    position: relative;
    z-index: 10;
}

.opening-logo::before {
    content: '';
    position: absolute;
    top: -8px;
    left: -8px;
    right: -8px;
    bottom: -8px;
    border-radius: 50%;
    background: linear-gradient(45deg, #a8d5ba, #d4a574, #e74c3c, #a8d5ba, #a8d5ba);
    background-size: 400% 400%;
    z-index: -1;
    opacity: 0.8;
    filter: blur(2px);
}

.opening-logo::after {
    content: '';
    position: absolute;
    top: -15px;
    left: -15px;
    right: -15px;
    bottom: -15px;
    border-radius: 50%;
    background: linear-gradient(45deg, #e74c3c, #d4a574, #a8d5ba, #e74c3c);
    background-size: 500% 500%;
    z-index: -2;
    opacity: 0.4;
    filter: blur(4px);
}

.opening-logo-img {
    width: 100px;
    height: 100px;
    object-fit: contain;
    border-radius: 20px;
    filter: drop-shadow(0 0 30px rgba(255, 255, 255, 0.8)) 
            drop-shadow(0 0 60px rgba(168, 213, 186, 0.4)) 
            drop-shadow(0 0 90px rgba(212, 165, 116, 0.3));
    position: relative;
    z-index: 1;
}

.opening-title {
    font-size: 3.5rem;
    font-weight: 800;
    margin-bottom: 1.5rem;
    text-align: center;
    animation: openingTitleSlide 1.5s ease 0.5s both, openingTitleShimmer 4s ease-in-out infinite 2s;
    text-shadow: 
        0 4px 20px rgba(0, 0, 0, 0.8),
        0 0 40px rgba(255, 255, 255, 0.9),
        0 0 80px rgba(255, 255, 255, 0.6),
        0 0 120px rgba(168, 213, 186, 0.4);
    color: #ffffff;
    position: relative;
    z-index: 10;
}

.opening-title::before {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, #a8d5ba, #d4a574, #e74c3c, #a8d5ba);
    background-size: 300% 300%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: openingTitleGlow 3s ease-in-out infinite;
    z-index: -1;
    filter: blur(1px);
}

.opening-subtitle {
    font-size: 1.5rem;
    opacity: 1;
    text-shadow: 
        0 2px 15px rgba(0, 0, 0, 0.6),
        0 0 30px rgba(255, 255, 255, 0.8),
        0 0 60px rgba(255, 255, 255, 0.4);
    animation: openingSubtitleSlide 1.5s ease 0.8s both, openingSubtitleFloat 6s ease-in-out infinite 2.5s;
    text-align: center;
    margin-bottom: 2.5rem;
    position: relative;
    z-index: 10;
    font-weight: 400;
    letter-spacing: 0.5px;
    color: #ffffff;
}

/* 豪華なローディングアニメーション */
.opening-loader {
    width: 80px;
    height: 80px;
    border: 4px solid rgba(255, 255, 255, 0.2);
    border-top: 4px solid rgba(255, 255, 255, 0.8);
    border-radius: 50%;
    animation: openingLoaderSpin 2s linear infinite;
    margin: 2rem auto;
    position: relative;
    z-index: 10;
}

.opening-loader::before {
    content: '';
    position: absolute;
    top: -8px;
    left: -8px;
    right: -8px;
    bottom: -8px;
    border: 2px solid transparent;
    border-top: 2px solid rgba(168, 213, 186, 0.6);
    border-radius: 50%;
    animation: openingLoaderSpin 1.5s linear infinite reverse;
}

.opening-loader::after {
    content: '';
    position: absolute;
    top: -16px;
    left: -16px;
    right: -16px;
    bottom: -16px;
    border: 1px solid transparent;
    border-top: 1px solid rgba(212, 165, 116, 0.4);
    border-radius: 50%;
    animation: openingLoaderSpin 3s linear infinite;
}

.opening-progress {
    width: 200px;
    height: 4px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 2px;
    margin: 1rem auto;
    overflow: hidden;
    position: relative;
    z-index: 10;
}

.opening-progress-bar {
    height: 100%;
    background: linear-gradient(90deg, #a8d5ba, #d4a574, #e74c3c);
    border-radius: 2px;
    width: 0%;
    animation: openingProgressFill 8s ease-out forwards;
    box-shadow: 0 0 10px rgba(255, 255, 255, 0.5);
}

.opening-loading-text {
    font-size: 1rem;
    opacity: 1;
    text-align: center;
    margin-top: 1rem;
    animation: openingLoadingTextFade 2s ease-in-out infinite;
    position: relative;
    z-index: 10;
    color: #ffffff;
    text-shadow: 
        0 2px 10px rgba(0, 0, 0, 0.5),
        0 0 20px rgba(255, 255, 255, 0.6);
    font-weight: 500;
}

/* パーティクルエフェクト */
.opening-particles {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    pointer-events: none;
    z-index: 1;
}

.opening-particle {
    position: absolute;
    width: 4px;
    height: 4px;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
    animation: openingParticleFloat 8s linear infinite;
}

.opening-particle:nth-child(1) { left: 10%; animation-delay: 0s; animation-duration: 6s; }
.opening-particle:nth-child(2) { left: 20%; animation-delay: 1s; animation-duration: 8s; }
.opening-particle:nth-child(3) { left: 30%; animation-delay: 2s; animation-duration: 7s; }
.opening-particle:nth-child(4) { left: 40%; animation-delay: 0.5s; animation-duration: 9s; }
.opening-particle:nth-child(5) { left: 50%; animation-delay: 1.5s; animation-duration: 6.5s; }
.opening-particle:nth-child(6) { left: 60%; animation-delay: 2.5s; animation-duration: 8.5s; }
.opening-particle:nth-child(7) { left: 70%; animation-delay: 3s; animation-duration: 7.5s; }
.opening-particle:nth-child(8) { left: 80%; animation-delay: 0.8s; animation-duration: 9.5s; }
.opening-particle:nth-child(9) { left: 90%; animation-delay: 1.8s; animation-duration: 6.8s; }
.opening-particle:nth-child(10) { left: 15%; animation-delay: 3.5s; animation-duration: 8.2s; }
.opening-particle:nth-child(11) { left: 25%; animation-delay: 4s; animation-duration: 7.2s; }
.opening-particle:nth-child(12) { left: 35%; animation-delay: 1.2s; animation-duration: 9.2s; }
.opening-particle:nth-child(13) { left: 45%; animation-delay: 2.8s; animation-duration: 6.2s; }
.opening-particle:nth-child(14) { left: 55%; animation-delay: 3.8s; animation-duration: 8.8s; }
.opening-particle:nth-child(15) { left: 65%; animation-delay: 0.3s; animation-duration: 7.8s; }
.opening-particle:nth-child(16) { left: 75%; animation-delay: 4.5s; animation-duration: 9.8s; }
.opening-particle:nth-child(17) { left: 85%; animation-delay: 1.3s; animation-duration: 6.3s; }
.opening-particle:nth-child(18) { left: 95%; animation-delay: 2.3s; animation-duration: 8.3s; }
.opening-particle:nth-child(19) { left: 5%; animation-delay: 3.3s; animation-duration: 7.3s; }
.opening-particle:nth-child(20) { left: 12%; animation-delay: 4.3s; animation-duration: 9.3s; }


@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.05); }
}

@keyframes slideUp {
    from {
        opacity: 0;
        transform: translateY(30px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* PWA通知スタイル */
.pwa-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--surface-color);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    z-index: 500;
    transform: translateX(100%);
    transition: transform 0.3s ease;
    max-width: 350px;
}

.pwa-notification.pwa-notification-show {
    transform: translateX(0);
}

.pwa-notification-content {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
}

.pwa-notification-content i {
    font-size: 1.5rem;
}

.pwa-notification-success i {
    color: var(--success-color);
}

.pwa-notification-error i {
    color: var(--accent-color);
}

.pwa-notification-info i {
    color: var(--secondary-color);
}

.pwa-notification-close {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-light);
    padding: 0.25rem;
    margin-left: auto;
    border-radius: 0.25rem;
    transition: background-color 0.3s ease;
}

.pwa-notification-close:hover {
    background: var(--background-color);
}

/* PWAアップデート通知 */
.pwa-update-notification {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%) translateY(100%);
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    z-index: 500;
    transition: transform 0.3s ease;
    max-width: 400px;
    width: 90%;
}

.pwa-update-notification.pwa-update-notification-show {
    transform: translateX(-50%) translateY(0);
}

.pwa-update-content {
    padding: 1.5rem;
}

.pwa-update-icon {
    text-align: center;
    margin-bottom: 1rem;
}

.pwa-update-icon i {
    font-size: 2rem;
    color: var(--secondary-color);
}

.pwa-update-text h3 {
    margin: 0 0 0.5rem;
    color: var(--primary-color);
    text-align: center;
}

.pwa-update-text p {
    margin: 0 0 1.5rem;
    color: var(--text-light);
    text-align: center;
    line-height: 1.5;
}

.pwa-update-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.pwa-update-btn {
    padding: 0.75rem 1.5rem;
    border: 2px solid var(--border-color);
    background: var(--surface-color);
    color: var(--text-color);
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
}

.pwa-update-btn:hover {
    background: var(--background-color);
}

.pwa-update-btn-primary {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}

.pwa-update-btn-primary:hover {
    background: #2980b9;
    border-color: #2980b9;
}

/* PWAアップデートモジュール */
.pwa-update-module {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    z-index: 1000;
    max-width: 400px;
    width: 90%;
    transform: translateX(100%);
    transition: transform 0.3s ease;
}

.pwa-update-module.pwa-update-module-show {
    transform: translateX(0);
}

.pwa-update-module-content {
    padding: 1.5rem;
}

.pwa-update-module-header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
    gap: 1rem;
}

.pwa-update-module-icon {
    color: var(--secondary-color);
    font-size: 1.5rem;
}

.pwa-update-module-title {
    flex: 1;
}

.pwa-update-module-title h3 {
    margin: 0 0 0.25rem;
    color: var(--primary-color);
    font-size: 1.1rem;
}

.pwa-update-module-title p {
    margin: 0;
    color: var(--text-light);
    font-size: 0.9rem;
}

.pwa-update-module-close {
    background: none;
    border: none;
    color: var(--text-light);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
}

.pwa-update-module-close:hover {
    background: var(--background-color);
}

.pwa-update-module-body {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.pwa-update-module-info {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.pwa-update-module-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--text-color);
    font-size: 0.9rem;
}

.pwa-update-module-item i {
    color: var(--secondary-color);
    width: 1rem;
}

.pwa-update-module-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.pwa-update-module-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 2px solid var(--border-color);
    background: var(--surface-color);
    color: var(--text-color);
    border-radius: 0.5rem;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.3s ease;
    text-decoration: none;
}

.pwa-update-module-btn:hover {
    background: var(--background-color);
    border-color: var(--secondary-color);
}

.pwa-update-module-btn-primary {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
}

.pwa-update-module-btn-primary:hover {
    background: #2980b9;
    border-color: #2980b9;
}

/* PWAアップデート詳細モーダル */
.pwa-update-details {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    z-index: 2000;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
}

.pwa-update-details.pwa-update-details-show {
    opacity: 1;
}

.pwa-update-details-content {
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
}

.pwa-update-details-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid var(--border-color);
}

.pwa-update-details-header h3 {
    margin: 0;
    color: var(--primary-color);
}

.pwa-update-details-close {
    background: none;
    border: none;
    color: var(--text-light);
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
}

.pwa-update-details-close:hover {
    background: var(--background-color);
}

.pwa-update-details-body {
    padding: 1.5rem;
}

.pwa-update-details-section {
    margin-bottom: 2rem;
}

.pwa-update-details-section h4 {
    margin: 0 0 1rem;
    color: var(--primary-color);
    font-size: 1rem;
}

.pwa-update-details-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 0;
    border-bottom: 1px solid var(--border-color);
}

.pwa-update-details-item:last-child {
    border-bottom: none;
}

.status-active {
    color: #27ae60;
    font-weight: 500;
}

.status-inactive {
    color: #e74c3c;
    font-weight: 500;
}

.pwa-update-details-cache {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.pwa-update-details-cache-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--background-color);
    border-radius: 0.5rem;
    font-size: 0.9rem;
}

.pwa-update-details-actions {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-top: 2rem;
}

/* PWAアップデートローディング */
.pwa-update-loading {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.pwa-update-loading.pwa-update-loading-show {
    opacity: 1;
    visibility: visible;
}

.pwa-update-loading-content {
    background: var(--surface-color);
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    box-shadow: var(--shadow-xl);
    max-width: 400px;
    width: 90%;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.pwa-update-loading.pwa-update-loading-show .pwa-update-loading-content {
    transform: scale(1);
}

.pwa-update-loading-spinner {
    margin-bottom: 1.5rem;
}

.spinner {
    width: 40px;
    height: 40px;
    border: 4px solid var(--border-color);
    border-top: 4px solid var(--primary-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

.pwa-update-loading-text h3 {
    color: var(--text-color);
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.pwa-update-loading-text p {
    color: var(--text-light);
    font-size: 0.9rem;
    margin: 0;
}

/* PWAアップデートエラー */
.pwa-update-error {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.pwa-update-error.pwa-update-error-show {
    opacity: 1;
    visibility: visible;
}

.pwa-update-error-content {
    background: var(--surface-color);
    border-radius: 12px;
    padding: 2rem;
    text-align: center;
    box-shadow: var(--shadow-xl);
    max-width: 400px;
    width: 90%;
    transform: scale(0.9);
    transition: transform 0.3s ease;
}

.pwa-update-error.pwa-update-error-show .pwa-update-error-content {
    transform: scale(1);
}

.pwa-update-error-icon {
    margin-bottom: 1.5rem;
}

.pwa-update-error-icon i {
    font-size: 3rem;
    color: var(--accent-color);
}

.pwa-update-error-text h3 {
    color: var(--text-color);
    font-size: 1.25rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
}

.pwa-update-error-text p {
    color: var(--text-light);
    font-size: 0.9rem;
    margin: 0 0 1.5rem 0;
}

.pwa-update-error-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
}

/* データなしメッセージ */
.no-data-message {
    text-align: center;
    padding: 4rem 2rem;
    color: var(--text-light);
}

.no-data-icon {
    width: 80px;
    height: 80px;
    background: var(--background-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 2rem;
    border: 2px solid var(--border-color);
}

.no-data-icon i {
    font-size: 2rem;
    color: var(--text-light);
}

.no-data-message h3 {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--text-color);
}

.no-data-message p {
    font-size: 1.1rem;
    line-height: 1.6;
    max-width: 500px;
    margin: 0 auto;
}

/* メインコンテンツ */
main {
    margin-top: 0;
    padding-top: 0;
}

/* オープニング画面表示時のみメインコンテンツを隠す */
body.opening-active main {
    opacity: 0;
    transform: translateY(0);
    transition: all 1.2s cubic-bezier(0.25, 0.46, 0.45, 0.94);
}

main.page-ready {
    opacity: 1;
    transform: translateY(0);
}

.section {
    padding: 60px 0;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
}

.section-title {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 3rem;
    color: var(--primary-color);
}

/* ヒーローセクション */
.hero {
    background: 
        radial-gradient(circle at 20% 20%, rgba(168, 213, 186, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 80% 80%, rgba(212, 165, 116, 0.4) 0%, transparent 50%),
        radial-gradient(circle at 40% 60%, rgba(214, 123, 123, 0.3) 0%, transparent 50%),
        linear-gradient(135deg, #4a7c59 0%, #d4a574 50%, #e74c3c 100%);
    color: white;
    padding: 120px 0 80px;
    margin-top: 0;
    position: relative;
    overflow: hidden;
}

.hero::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: 
        radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.1) 0%, transparent 70%),
        radial-gradient(circle at 70% 70%, rgba(255, 255, 255, 0.05) 0%, transparent 70%);
    opacity: 0.6;
    animation: heroShimmer 8s ease-in-out infinite;
}

.hero::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" width="100" height="100" patternUnits="userSpaceOnUse"><circle cx="25" cy="25" r="1" fill="rgba(255,255,255,0.1)"/><circle cx="75" cy="75" r="1" fill="rgba(255,255,255,0.1)"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    opacity: 0.3;
}

.hero-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
    position: relative;
    z-index: 1;
}

.hero-text h1 {
    font-size: 3rem;
    font-weight: 700;
    margin-bottom: 1rem;
    line-height: 1.2;
}

.hero-subtitle {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    opacity: 0.9;
}

.hero-description {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.8;
    line-height: 1.6;
}

.hero-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

.hero-image {
    display: flex;
    justify-content: center;
    align-items: center;
}

.hero-graphic {
    width: 220px;
    height: 220px;
    background: 
        radial-gradient(circle at 30% 30%, rgba(255, 255, 255, 0.2) 0%, transparent 70%),
        linear-gradient(135deg, rgba(255, 255, 255, 0.15) 0%, rgba(255, 255, 255, 0.05) 100%);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(15px);
    border: 3px solid rgba(255, 255, 255, 0.3);
    box-shadow: 
        0 0 40px rgba(255, 255, 255, 0.2),
        inset 0 0 40px rgba(255, 255, 255, 0.1);
    animation: heroFloat 4s ease-in-out infinite, heroGlow 3s ease-in-out infinite alternate;
    position: relative;
}

.hero-graphic::before {
    content: '';
    position: absolute;
    top: -8px;
    left: -8px;
    right: -8px;
    bottom: -8px;
    border-radius: 50%;
    background: linear-gradient(45deg, #a8d5ba, #d4a574, #e74c3c, #a8d5ba);
    background-size: 300% 300%;
    animation: heroRotate 6s linear infinite;
    z-index: -1;
    opacity: 0.7;
}

.hero-graphic i {
    font-size: 4.5rem;
    color: rgba(255, 255, 255, 0.95);
    text-shadow: 0 0 30px rgba(255, 255, 255, 0.6);
    animation: heroIconPulse 2.5s ease-in-out infinite;
}

/* 部活動グリッド */
.clubs-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
}

.club-card {
    background: white;
    border-radius: 12px;
    padding: 1.5rem;
    box-shadow: 0 4px 15px rgba(74, 124, 89, 0.1);
    transition: all 0.3s ease;
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.club-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-warm);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.club-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 25px rgba(74, 124, 89, 0.2);
}

.club-card:hover::before {
    opacity: 1;
}

.club-card h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.club-image {
    width: 100%;
    height: 200px;
    object-fit: cover;
    border-radius: 4px;
    margin-bottom: 1rem;
}

/* フォーラム */
.forum-container {
    max-width: 800px;
    margin: 0 auto;
}

.post-form {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    margin-bottom: 2rem;
}

#forum-content {
    width: 100%;
    min-height: 120px;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-radius: 4px;
    font-size: 1rem;
    resize: vertical;
    margin-bottom: 1rem;
}

/* ボタン */
.btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: none;
    border-radius: 0.5rem;
    cursor: pointer;
    font-size: 1rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.3s ease;
    box-shadow: var(--shadow-sm);
}

.btn-primary {
    background: var(--gradient-warm);
    color: white;
    border: none;
    box-shadow: 0 4px 15px rgba(212, 165, 116, 0.3);
}

.btn-primary:hover {
    background: var(--gradient-secondary);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(214, 123, 123, 0.4);
}

.btn-secondary {
    background: var(--surface-color);
    color: var(--primary-color);
    border: 2px solid var(--primary-color);
    box-shadow: 0 2px 8px rgba(74, 124, 89, 0.1);
}

.btn-secondary:hover {
    background: var(--gradient-cool);
    color: white;
    border-color: transparent;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(74, 124, 89, 0.3);
}

.btn-outline {
    background: transparent;
    color: var(--secondary-color);
    border: 2px solid var(--secondary-color);
    box-shadow: 0 2px 8px rgba(212, 165, 116, 0.1);
}

.btn-outline:hover {
    background: var(--gradient-warm);
    color: white;
    border-color: transparent;
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(212, 165, 116, 0.3);
}

/* 投稿リスト */
.post-item {
    background: white;
    padding: 1.5rem;
    margin-bottom: 1rem;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.post-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 1rem;
    color: #666;
    font-size: 0.9rem;
}

.post-content {
    margin-bottom: 1rem;
}

.post-status {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.85rem;
}

.status-pending {
    background: #f39c12;
    color: white;
}

.status-resolved {
    background: #27ae60;
    color: white;
}

/* ローディング */
.loading {
    text-align: center;
    padding: 2rem;
    color: #666;
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
    .sidebar {
        width: 300px;
        left: -300px;
    }
    
    .logo {
        font-size: 1.4rem;
    }
    
    .hamburger {
        left: 12px;
        top: 12px;
        width: 44px;
        height: 44px;
        padding: 12px;
    }
    
    .hamburger span {
        width: 18px;
        height: 2px;
    }
}

@media (max-width: 480px) {
    .sidebar {
        width: 100vw;
        left: -100vw;
        border-radius: 0;
    }
    
    .sidebar.active {
        left: 0;
    }
    
    .sidebar-nav {
        padding: 2rem 0;
    }
    
    .sidebar-nav a {
        padding: 1.25rem 2rem;
        margin: 0.5rem 1rem;
        font-size: 1.1rem;
    }
    
    .sidebar-header {
        padding: 3rem 2rem 2.5rem 2rem;
    }
    
    .sidebar-header h2 {
        font-size: 1.8rem;
    }
    
    .hamburger {
        left: 8px;
        top: 8px;
        width: 52px;
        height: 52px;
        padding: 16px;
        background: var(--surface-color);
        border: 2px solid rgba(52, 152, 219, 0.3);
    }
    
    .hamburger span {
        width: 20px;
        height: 2px;
    }
}
    
    .hero-content {
        grid-template-columns: 1fr;
        gap: 2rem;
        text-align: center;
    }
    
    .hero-text h1 {
        font-size: 2.5rem;
    }
    
    .page-header-content h1 {
        font-size: 2rem;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    .clubs-grid,
    .features-grid,
    .activities-grid,
    .info-grid,
    .about-cards {
        grid-template-columns: 1fr;
    }
    
    .about-content {
        grid-template-columns: 1fr;
        gap: 2rem;
        text-align: center;
    }
    
    .updates-grid {
        grid-template-columns: 1fr;
    }
    
    .news-item {
        flex-direction: column;
        gap: 1rem;
    }
    
    .news-date {
        align-self: flex-start;
    }
    
    .filter-buttons {
        flex-direction: column;
        align-items: center;
    }
    
    .filter-btn {
        width: 200px;
        justify-content: center;
    }
    
    .hero-buttons,
    .join-buttons,
    .new-club-buttons,
    .notification-buttons,
    .request-buttons {
        flex-direction: column;
        align-items: center;
    }
    
    .btn {
        width: 100%;
        max-width: 300px;
        justify-content: center;
    }
    
    .request-steps {
        flex-direction: column;
        align-items: center;
    }
    
    .footer-content {
        grid-template-columns: 1fr;
        text-align: center;
    }


@media (max-width: 480px) {
    .hero-text h1 {
        font-size: 2rem;
    }
    
    .page-header-content h1 {
        font-size: 1.75rem;
    }
    
    .section-title {
        font-size: 1.75rem;
    }
    
    .feature-card,
    .activity-card,
    .info-card,
    .about-card,
    .member-card {
        padding: 1.5rem;
    }
    
    .post-form,
    .survey-card {
        margin: 0 10px;
    }
    
    .container {
        padding: 0 15px;
    }
}

/* フッター */
footer {
    background: var(--primary-color);
    color: white;
    padding: 3rem 0 1rem;
}

.footer-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 2rem;
}

.footer-section h3 {
    margin-bottom: 1rem;
    font-size: 1.25rem;
}

.footer-section h4 {
    margin-bottom: 0.75rem;
    font-size: 1.1rem;
}

.footer-section ul {
    list-style: none;
}

.footer-section ul li {
    margin-bottom: 0.5rem;
}

.footer-section ul li a {
    color: rgba(255, 255, 255, 0.8);
    text-decoration: none;
    transition: color 0.3s ease;
}

.footer-section ul li a:hover {
    color: white;
}

.footer-bottom {
    text-align: center;
    padding: 2rem 0 1rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    margin-top: 2rem;
}

.footer-bottom p {
    margin: 0.5rem 0;
    opacity: 0.8;
}

/* 管理者ログインリンク */
.admin-link {
    font-size: 0.8rem !important;
    margin-top: 1rem !important;
}

.admin-link a {
    color: rgba(255, 255, 255, 0.6) !important;
    text-decoration: none;
    padding: 0.3rem 0.6rem;
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    font-size: 0.75rem;
}

.admin-link a:hover {
    color: white !important;
    background-color: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.5);
}

/* ページヘッダー */
.page-header {
    background: var(--gradient-primary);
    color: white;
    padding: 120px 0 60px;
    margin-top: 0;
    text-align: center;
}

.page-header-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
}

.page-header-content p {
    font-size: 1.1rem;
    opacity: 0.9;
}

/* 機能カード */
.features {
    padding: 80px 0;
}

.features-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.feature-card {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: 0 4px 15px rgba(74, 124, 89, 0.1);
    text-align: center;
    transition: all 0.3s ease;
    border: 1px solid var(--border-color);
    position: relative;
    overflow: hidden;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.feature-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    background: var(--gradient-cool);
    opacity: 0;
    transition: opacity 0.3s ease;
}

.feature-card:hover {
    transform: translateY(-8px);
    box-shadow: 0 8px 25px rgba(74, 124, 89, 0.2);
}

.feature-card:hover::before {
    opacity: 1;
}

.feature-icon {
    width: 80px;
    height: 80px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.feature-icon i {
    font-size: 2rem;
    color: white;
}

.feature-card h3 {
    font-size: 1.25rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.feature-card p {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.feature-link {
    color: var(--secondary-color);
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.3s ease;
}

.feature-link:hover {
    color: var(--primary-color);
}

/* 最新情報セクション */
.latest-updates {
    padding: 80px 0;
    background: var(--surface-color);
}

.updates-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
}

.update-card {
    background: var(--background-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.update-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
    color: var(--primary-color);
    font-weight: 600;
}

.update-header i {
    font-size: 1.25rem;
}

.update-content {
    margin-bottom: 1.5rem;
    min-height: 120px;
}

.update-link {
    color: var(--secondary-color);
    text-decoration: none;
    font-weight: 500;
    transition: color 0.3s ease;
}

.update-link:hover {
    color: var(--primary-color);
}

/* 生徒会について */
.council-about {
    padding: 80px 0;
}

.about-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 4rem;
    align-items: center;
}

.about-text h2 {
    font-size: 2rem;
    margin-bottom: 1.5rem;
    color: var(--primary-color);
}

.about-text p {
    margin-bottom: 2rem;
    color: var(--text-light);
    line-height: 1.7;
}

.mission-points {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.mission-point {
    display: flex;
    gap: 1rem;
    align-items: flex-start;
}

.mission-point i {
    color: var(--secondary-color);
    font-size: 1.5rem;
    margin-top: 0.25rem;
}

.mission-point h4 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.mission-point p {
    color: var(--text-light);
    margin: 0;
}

.about-image {
    display: flex;
    justify-content: center;
    align-items: center;
}

.council-graphic {
    width: 250px;
    height: 250px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--shadow-lg);
}

.council-graphic i {
    font-size: 5rem;
    color: white;
}

/* メンバーカード */
.council-members-section {
    padding: 80px 0;
    background: var(--surface-color);
}

.council-members {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
}

.member-card {
    background: var(--background-color);
    padding: 2rem;
    border-radius: 1rem;
    text-align: center;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.member-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
}

.member-card h3 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.member-role {
    color: var(--secondary-color);
    font-weight: 500;
    margin-bottom: 1rem;
}

.member-message {
    color: var(--text-light);
    font-style: italic;
}

/* 活動内容 */
.council-activities {
    padding: 80px 0;
}

.activities-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.activity-card {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.activity-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
}

.activity-icon {
    width: 60px;
    height: 60px;
    background: var(--gradient-secondary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 1.5rem;
}

.activity-icon i {
    font-size: 1.5rem;
    color: white;
}

.activity-card h3 {
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.activity-card p {
    color: var(--text-light);
    line-height: 1.6;
}

/* 参加呼びかけ */
.join-council {
    padding: 80px 0;
    background: var(--gradient-primary);
    color: white;
    text-align: center;
}

.join-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.join-content p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.join-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* フィルター */
.clubs-filter, .news-filter {
    padding: 60px 0 40px;
    background: var(--surface-color);
}

.filter-controls h3 {
    text-align: center;
    margin-bottom: 2rem;
    color: var(--primary-color);
}

.filter-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    flex-wrap: wrap;
}

.filter-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: 2px solid var(--border-color);
    background: var(--surface-color);
    color: var(--text-color);
    border-radius: 2rem;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
}

.filter-btn:hover,
.filter-btn.active {
    background: var(--secondary-color);
    color: white;
    border-color: var(--secondary-color);
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

/* 部活動一覧 */
.clubs-list {
    padding: 40px 0 80px;
}

/* 部活動情報 */
.club-info {
    padding: 80px 0;
    background: var(--surface-color);
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
}

.info-card {
    background: var(--background-color);
    padding: 2rem;
    border-radius: 1rem;
    text-align: center;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.info-icon {
    width: 60px;
    height: 60px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.info-icon i {
    font-size: 1.5rem;
    color: white;
}

.info-card h3 {
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.info-card p {
    color: var(--text-light);
    line-height: 1.6;
}

/* 新部活動 */
.new-club {
    padding: 80px 0;
    background: var(--gradient-secondary);
    color: white;
    text-align: center;
}

.new-club-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.new-club-content p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.9;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
}

.requirements {
    background: rgba(255, 255, 255, 0.1);
    padding: 2rem;
    border-radius: 1rem;
    margin: 2rem auto;
    max-width: 500px;
    backdrop-filter: blur(10px);
}

.requirements h4 {
    margin-bottom: 1rem;
}

.requirements ul {
    text-align: left;
    list-style: none;
}

.requirements li {
    margin-bottom: 0.5rem;
    padding-left: 1.5rem;
    position: relative;
}

.requirements li::before {
    content: '✓';
    position: absolute;
    left: 0;
    color: rgba(255, 255, 255, 0.8);
}

.new-club-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* フォーラムについて */
.forum-about {
    padding: 60px 0;
    background: var(--surface-color);
}

.about-cards {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 2rem;
}

.about-card {
    background: var(--background-color);
    padding: 2rem;
    border-radius: 1rem;
    text-align: center;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.about-icon {
    width: 60px;
    height: 60px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.about-icon i {
    font-size: 1.5rem;
    color: white;
}

.about-card h3 {
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.about-card p {
    color: var(--text-light);
    line-height: 1.6;
}

/* 投稿フォーム */
.forum-post {
    padding: 40px 0 80px;
}

.post-form {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border-color);
}

.post-form h2 {
    margin-bottom: 2rem;
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.form-group {
    margin-bottom: 1.5rem;
}

.form-group label {
    display: block;
    margin-bottom: 0.5rem;
    font-weight: 500;
    color: var(--text-color);
}

.form-control {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--border-color);
    border-radius: 0.5rem;
    font-size: 1rem;
    transition: border-color 0.3s ease;
    background: var(--background-color);
}

.form-control:focus {
    outline: none;
    border-color: var(--secondary-color);
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
}

.form-control[type="textarea"],
textarea.form-control {
    min-height: 120px;
    resize: vertical;
    font-family: inherit;
}

.form-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
}

.post-guidelines small {
    color: var(--text-light);
}

.post-guidelines a {
    color: var(--secondary-color);
    text-decoration: none;
}

.post-guidelines a:hover {
    text-decoration: underline;
}

/* 投稿一覧 */
.forum-posts {
    padding: 40px 0 80px;
    background: var(--surface-color);
}

.posts-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
}

/* 投稿一覧の絞り込みを中央揃え */
.posts-filter {
    width: 100%;
    display: flex;
    justify-content: center;
    text-align: center;
}

.posts-header h2 {
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.posts-filter select {
    padding: 0.5rem 1rem;
    border: 2px solid var(--border-color);
    border-radius: 0.5rem;
    background: var(--background-color);
}

/* ガイドライン */
.guidelines {
    padding: 80px 0;
}

.guidelines-content {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.guideline-section {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
}

.guideline-section h3 {
    margin-bottom: 1.5rem;
    color: var(--primary-color);
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.guideline-section ul {
    list-style: none;
}

.guideline-section li {
    margin-bottom: 0.75rem;
    padding-left: 1.5rem;
    position: relative;
    color: var(--text-light);
}

.guideline-section li::before {
    content: '•';
    position: absolute;
    left: 0;
    color: var(--secondary-color);
    font-weight: bold;
}

/* お知らせ */
.news-list {
    padding: 40px 0 80px;
}

.news-container {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.news-item {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    display: flex;
    gap: 2rem;
    align-items: flex-start;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.news-date {
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    font-weight: 500;
    white-space: nowrap;
}

.news-content {
    flex: 1;
}

.news-content h3 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.news-content p {
    color: var(--text-light);
    line-height: 1.6;
}

.news-type {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.85rem;
    font-weight: 500;
    white-space: nowrap;
}

.news-type.event {
    background: rgba(52, 152, 219, 0.1);
    color: var(--secondary-color);
}

.news-type.newsletter {
    background: rgba(39, 174, 96, 0.1);
    color: var(--success-color);
}

.news-type.recruitment {
    background: rgba(243, 156, 18, 0.1);
    color: var(--warning-color);
}

.news-type.important {
    background: rgba(231, 76, 60, 0.1);
    color: var(--accent-color);
}

/* 生徒会だより */
.newsletter-section {
    padding: 80px 0;
    background: var(--surface-color);
}

.newsletter-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.newsletter-item {
    background: var(--background-color);
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    transition: all 0.3s ease;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.newsletter-item:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
}

.newsletter-cover {
    background: var(--gradient-primary);
    height: 120px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.newsletter-cover i {
    font-size: 3rem;
    color: white;
}

.newsletter-info {
    padding: 2rem;
}

.newsletter-info h3 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.newsletter-date {
    color: var(--text-light);
    font-size: 0.9rem;
    margin-bottom: 1rem;
}

.newsletter-description {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

/* 重要なお知らせ */
.important-notices {
    padding: 80px 0;
}

.important-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.important-item {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border-left: 4px solid var(--accent-color);
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
}

.important-icon {
    width: 50px;
    height: 50px;
    background: rgba(231, 76, 60, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.important-icon i {
    color: var(--accent-color);
    font-size: 1.25rem;
}

.important-content h3 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.important-date {
    color: var(--text-light);
    font-size: 0.9rem;
    margin-bottom: 1rem;
}

.important-content p {
    color: var(--text-light);
    line-height: 1.6;
}

/* 通知設定 */
.notification-settings {
    padding: 80px 0;
    background: var(--gradient-primary);
    color: white;
    text-align: center;
}

.notification-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.notification-content p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

.notification-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
    margin-bottom: 2rem;
}

.notification-status {
    background: rgba(255, 255, 255, 0.1);
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    backdrop-filter: blur(10px);
    display: inline-block;
}

/* アンケート */
.active-surveys {
    padding: 60px 0 40px;
}

.sample-survey {
    padding: 40px 0 80px;
}

.survey-card {
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-md);
    border: 1px solid var(--border-color);
    overflow: hidden;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.survey-card.active-survey {
    border-color: var(--secondary-color);
    box-shadow: var(--shadow-lg);
}

.survey-header {
    background: var(--gradient-primary);
    color: white;
    padding: 2rem;
}

.survey-status {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.85rem;
    font-weight: 500;
}

.status-badge.active {
    background: rgba(255, 255, 255, 0.2);
    color: white;
}

.survey-deadline {
    font-size: 0.9rem;
    opacity: 0.9;
}

.survey-header h3 {
    font-size: 1.5rem;
    margin-bottom: 0.5rem;
}

.survey-header p {
    opacity: 0.9;
    line-height: 1.6;
}

.survey-content {
    padding: 2rem;
}

.question {
    margin-bottom: 2rem;
}

.question h4 {
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.options {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.option {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    padding: 0.75rem;
    border-radius: 0.5rem;
    transition: background-color 0.3s ease;
}

.option:hover {
    background: var(--background-color);
}

.option input[type="radio"],
.option input[type="checkbox"] {
    margin: 0;
}

.checkmark {
    flex-shrink: 0;
}

.survey-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    padding-top: 2rem;
    border-top: 1px solid var(--border-color);
}

.survey-info small {
    color: var(--text-light);
}

/* 過去のアンケート結果 */
.past-surveys {
    padding: 80px 0;
    background: var(--surface-color);
}

.results-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
}

.result-card {
    background: var(--background-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.result-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
}

.result-header h3 {
    color: var(--primary-color);
    flex: 1;
}

.result-date {
    color: var(--text-light);
    font-size: 0.9rem;
    white-space: nowrap;
}

.result-summary p {
    margin-bottom: 1.5rem;
    color: var(--text-light);
}

.result-chart {
    margin-bottom: 2rem;
}

.chart-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 0.75rem;
}

.chart-label {
    min-width: 80px;
    font-size: 0.9rem;
    color: var(--text-color);
}

.chart-bar {
    flex: 1;
    height: 8px;
    background: var(--border-color);
    border-radius: 4px;
    overflow: hidden;
}

.chart-fill {
    height: 100%;
    background: var(--gradient-primary);
    border-radius: 4px;
    transition: width 0.3s ease;
}

.chart-value {
    min-width: 40px;
    text-align: right;
    font-size: 0.9rem;
    font-weight: 500;
    color: var(--text-color);
}

.satisfaction-chart {
    margin-bottom: 2rem;
}

.satisfaction-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
}

.satisfaction-bar {
    background: var(--gradient-primary);
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.85rem;
    font-weight: 500;
    min-width: 50px;
    text-align: center;
}

.pie-chart-text p {
    color: var(--text-light);
    line-height: 1.6;
}

/* アンケート作成依頼 */
.survey-request {
    padding: 80px 0;
}

.request-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
}

.request-content h2 {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--primary-color);
}

.request-content p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    color: var(--text-light);
    line-height: 1.6;
}

.request-steps {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin: 3rem 0;
    flex-wrap: wrap;
}

.step {
    display: flex;
    flex-direction: column;
    align-items: center;
    max-width: 200px;
}

.step-number {
    width: 50px;
    height: 50px;
    background: var(--gradient-primary);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    font-weight: 700;
    margin-bottom: 1rem;
}

.step-content h4 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.step-content p {
    color: var(--text-light);
    font-size: 0.9rem;
    line-height: 1.5;
}

.request-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* PWAインストール通知 */
.pwa-install-notification {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--surface-color);
    border-radius: 12px;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    z-index: 500;
    max-width: 400px;
    width: 90%;
    animation: slideInRight 0.3s ease;
    overflow: hidden;
}

.pwa-install-notification-content {
    padding: 1.5rem;
    display: flex;
    gap: 1rem;
    align-items: flex-start;
    position: relative;
}

.pwa-install-notification-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.pwa-install-info .pwa-install-notification-icon {
    background: rgba(52, 152, 219, 0.1);
}

.pwa-install-success .pwa-install-notification-icon {
    background: rgba(39, 174, 96, 0.1);
}

.pwa-install-error .pwa-install-notification-icon {
    background: rgba(231, 76, 60, 0.1);
}

.pwa-install-notification-icon i {
    font-size: 1.2rem;
}

.pwa-install-info .pwa-install-notification-icon i {
    color: var(--secondary-color);
}

.pwa-install-success .pwa-install-notification-icon i {
    color: var(--success-color);
}

.pwa-install-error .pwa-install-notification-icon i {
    color: var(--accent-color);
}

.pwa-install-notification-text {
    flex: 1;
}

.pwa-install-notification-text h4 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
    font-size: 1rem;
    font-weight: 600;
}

.pwa-install-notification-text p {
    margin: 0;
    color: var(--text-light);
    font-size: 0.9rem;
    line-height: 1.4;
}

.pwa-install-notification-close {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-light);
    padding: 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.pwa-install-notification-close:hover {
    background: var(--background-color);
    color: var(--text-color);
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(100%);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* iOS PWAインストール促進メッセージ */
.ios-install-prompt {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: var(--surface-color);
    border-radius: 1rem;
    box-shadow: var(--shadow-xl);
    border: 1px solid var(--border-color);
    z-index: 500;
    max-width: 400px;
    width: 90%;
    animation: slideInUp 0.3s ease;
}

.ios-install-content {
    padding: 2rem;
    display: flex;
    gap: 1rem;
    align-items: flex-start;
    position: relative;
}

.ios-install-icon {
    width: 60px;
    height: 60px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.ios-install-icon i {
    font-size: 1.5rem;
    color: white;
}

.ios-install-text {
    flex: 1;
}

.ios-install-text h4 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
    font-size: 1.1rem;
}

.ios-install-text p {
    margin-bottom: 1rem;
    color: var(--text-light);
    font-size: 0.9rem;
    line-height: 1.5;
}

.ios-install-steps {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.85rem;
    color: var(--text-color);
    flex-wrap: wrap;
}

.ios-install-steps span {
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

.ios-install-steps i {
    color: var(--secondary-color);
}

.ios-install-close {
    position: absolute;
    top: 0.75rem;
    right: 0.75rem;
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-light);
    padding: 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.ios-install-close:hover {
    background: var(--background-color);
    color: var(--text-color);
}

@keyframes slideInUp {
    from {
        opacity: 0;
        transform: translateX(-50%) translateY(100%);
    }
    to {
        opacity: 1;
        transform: translateX(-50%) translateY(0);
    }
}

/* プレビューコンポーネント */
.news-preview,
.post-preview,
.survey-preview {
    padding: 1rem;
    border-radius: 0.5rem;
    border: 1px solid var(--border-color);
    margin-bottom: 1rem;
}

.news-preview h4 {
    margin: 0.5rem 0;
    color: var(--primary-color);
}

.news-preview .news-date {
    font-size: 0.85rem;
    color: var(--text-light);
}

.post-preview p {
    margin-bottom: 0.5rem;
    color: var(--text-color);
}

.survey-preview h3 {
    margin-bottom: 0.5rem;
    color: var(--primary-color);
}

.survey-preview p {
    margin-bottom: 1rem;
    color: var(--text-light);
}

/* メンバー詳細ページ */
.breadcrumb-section {
    padding: 100px 0 20px;
    background: var(--background-color);
}

.breadcrumb {
    margin-bottom: 0;
}

.breadcrumb-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-light);
    text-decoration: none;
    font-size: 0.9rem;
    transition: color 0.3s ease;
}

.breadcrumb-link:hover {
    color: var(--secondary-color);
}

.member-detail-header {
    background: var(--gradient-primary);
    color: white;
    padding: 60px 0;
}

.member-hero-content {
    display: grid;
    grid-template-columns: auto 1fr;
    gap: 3rem;
    align-items: center;
}

.member-hero-avatar {
    position: relative;
}

.member-hero-avatar .member-image {
    width: 200px;
    height: 200px;
    border-radius: 50%;
    object-fit: cover;
    border: 4px solid rgba(255, 255, 255, 0.2);
    box-shadow: var(--shadow-lg);
}

.member-hero-avatar .member-placeholder {
    width: 200px;
    height: 200px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    border: 4px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
}

.member-hero-avatar .member-placeholder i {
    font-size: 4rem;
    color: rgba(255, 255, 255, 0.8);
}

.member-hero-info {
    min-width: 0;
}

.member-name {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    line-height: 1.2;
}

.member-role {
    font-size: 1.25rem;
    opacity: 0.9;
    margin-bottom: 0.5rem;
    font-weight: 500;
}

.member-grade {
    font-size: 1rem;
    opacity: 0.8;
    margin-bottom: 1.5rem;
}

.member-meta {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.member-join-date,
.member-motto {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    opacity: 0.9;
}

.member-detail-content {
    padding: 80px 0;
}

.detail-grid {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
}

.detail-main {
    display: flex;
    flex-direction: column;
    gap: 3rem;
}

.detail-section {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
}

.detail-section h3 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 1.25rem;
}

.profile-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1.5rem;
}

.profile-item {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.profile-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 500;
    color: var(--text-light);
    font-size: 0.9rem;
}

.profile-label i {
    width: 16px;
    text-align: center;
}

.profile-value {
    color: var(--text-color);
    font-weight: 500;
}

.hobby-tag {
    display: inline-block;
    background: var(--background-color);
    color: var(--text-color);
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.8rem;
    margin-right: 0.5rem;
    margin-bottom: 0.5rem;
    border: 1px solid var(--border-color);
}

.message-card {
    display: flex;
    gap: 1.5rem;
    align-items: flex-start;
}

.message-icon {
    width: 50px;
    height: 50px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.message-icon i {
    font-size: 1.25rem;
    color: white;
}

.message-text {
    flex: 1;
}

.message-text p {
    line-height: 1.7;
    color: var(--text-color);
    font-size: 1.1rem;
}

.responsibilities-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.responsibility-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 0.75rem;
    background: var(--background-color);
    border-radius: 0.5rem;
    border-left: 3px solid var(--secondary-color);
}

.responsibility-item i {
    color: var(--success-color);
    font-size: 1.1rem;
}

.achievements-timeline {
    position: relative;
    padding: 0;
}

.achievements-year-group {
    margin-bottom: 2rem;
}

.year-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--primary-color);
    border-bottom: 2px solid var(--accent-color);
    padding-bottom: 0.5rem;
}

.year-header i {
    color: var(--accent-color);
}

.achievements-year-content {
    position: relative;
    padding-left: 2rem;
}

.achievements-year-content::before {
    content: '';
    position: absolute;
    left: 0;
    top: -10px;
    bottom: -10px;
    width: 2px;
    background: var(--accent-color);
    opacity: 0.3;
}

.achievement-item {
    position: relative;
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: 0.75rem;
    padding: 1rem;
    margin-bottom: 0.75rem;
    box-shadow: var(--shadow-sm);
    transition: all 0.2s ease;
    opacity: 0;
    animation: fadeInUp 0.4s ease forwards;
}

.achievement-item:nth-child(odd) {
    animation-delay: 0.1s;
}

.achievement-item:nth-child(even) {
    animation-delay: 0.2s;
}

.achievement-item::before {
    content: '';
    position: absolute;
    left: -2rem;
    top: 1.5rem;
    width: 10px;
    height: 10px;
    background: var(--accent-color);
    border-radius: 50%;
    border: 2px solid var(--surface-color);
    box-shadow: 0 0 0 2px var(--accent-color);
}

.achievement-item:hover {
    transform: translateX(5px);
    box-shadow: var(--shadow-md);
}

.achievement-item.academic::before {
    background: #3498db;
    box-shadow: 0 0 0 2px #3498db;
}

.achievement-item.cultural::before {
    background: #9b59b6;
    box-shadow: 0 0 0 2px #9b59b6;
}

.achievement-item.sports::before {
    background: #e74c3c;
    box-shadow: 0 0 0 2px #e74c3c;
}

.achievement-item.leadership::before {
    background: #f39c12;
    box-shadow: 0 0 0 2px #f39c12;
}

.achievement-item.volunteer::before {
    background: #27ae60;
    box-shadow: 0 0 0 2px #27ae60;
}

.achievement-item.event::before {
    background: #e67e22;
    box-shadow: 0 0 0 2px #e67e22;
}

.achievement-category {
    display: inline-block;
    padding: 0.2rem 0.5rem;
    border-radius: 0.25rem;
    font-size: 0.75rem;
    font-weight: 500;
    color: white;
    background: var(--accent-color);
}

.achievement-category.category-general {
    background: var(--accent-color);
}

.achievement-category.category-academic {
    background: #3498db;
}

.achievement-category.category-cultural {
    background: #9b59b6;
}

.achievement-category.category-sports {
    background: #e74c3c;
}

.achievement-category.category-leadership {
    background: #f39c12;
}

.achievement-category.category-volunteer {
    background: #27ae60;
}

.achievement-category.category-event {
    background: #e67e22;
}

.achievement-date {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: var(--text-light);
    margin-bottom: 0.5rem;
}

.achievement-content h4 {
    color: var(--primary-color);
    margin-bottom: 0.5rem;
}

.achievement-content p {
    color: var(--text-light);
    line-height: 1.6;
}

.no-achievements {
    text-align: center;
    padding: 2rem;
    color: var(--text-light);
}

.no-achievements i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--border-color);
}

.detail-sidebar {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.sidebar-card {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.sidebar-card h4 {
    color: var(--primary-color);
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.sidebar-card p {
    color: var(--text-light);
    line-height: 1.6;
    margin-bottom: 1.5rem;
}

.other-members {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.other-member-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1rem;
    background: var(--background-color);
    border-radius: 0.5rem;
    transition: all 0.3s ease;
}

.other-member-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-sm);
}

.other-member-avatar {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    background: var(--gradient-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    overflow: hidden;
}

.other-member-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
}

.other-member-avatar i {
    color: white;
    font-size: 1.25rem;
}

.other-member-info {
    flex: 1;
}

.other-member-info h5 {
    color: var(--text-color);
    margin-bottom: 0.25rem;
    font-size: 0.9rem;
}

.other-member-info p {
    color: var(--text-light);
    font-size: 0.8rem;
    margin-bottom: 0.5rem;
}

.other-member-link {
    color: var(--secondary-color);
    text-decoration: none;
    font-size: 0.8rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    transition: color 0.3s ease;
}

.other-member-link:hover {
    color: var(--primary-color);
}

.upcoming-activities {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.activity-item {
    display: flex;
    gap: 1rem;
    align-items: flex-start;
}

.activity-date {
    background: var(--secondary-color);
    color: white;
    padding: 0.5rem;
    border-radius: 0.5rem;
    font-weight: 600;
    font-size: 0.8rem;
    text-align: center;
    min-width: 40px;
    flex-shrink: 0;
}

.activity-info h5 {
    color: var(--text-color);
    margin-bottom: 0.25rem;
    font-size: 0.9rem;
}

.activity-info p {
    color: var(--text-light);
    font-size: 0.8rem;
    margin: 0;
}

.related-info {
    padding: 80px 0;
    background: var(--background-color);
}

.related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.related-card {
    background: var(--surface-color);
    padding: 2rem;
    border-radius: 1rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    text-align: center;
    transition: all 0.3s ease;
    opacity: 0;
    animation: fadeInUp 0.45s ease forwards;
}

.related-card:hover {
    transform: translateY(-5px);
    box-shadow: var(--shadow-md);
}

.related-icon {
    width: 60px;
    height: 60px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.related-icon i {
    font-size: 1.5rem;
    color: white;
}

.related-card h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.related-card p {
    color: var(--text-light);
    margin-bottom: 1.5rem;
    line-height: 1.6;
}

.related-link {
    color: var(--secondary-color);
    text-decoration: none;
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: color 0.3s ease;
}

.related-link:hover {
    color: var(--primary-color);
}

.member-not-found {
    text-align: center;
    padding: 4rem 2rem;
    color: white;
}

.not-found-icon {
    width: 100px;
    height: 100px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 2rem;
    backdrop-filter: blur(10px);
}

.not-found-icon i {
    font-size: 3rem;
    color: rgba(255, 255, 255, 0.8);
}

.member-not-found h1 {
    font-size: 2rem;
    margin-bottom: 1rem;
}

.member-not-found p {
    font-size: 1.1rem;
    margin-bottom: 2rem;
    opacity: 0.9;
}

/* メンバーカードのクリック可能スタイル */
.member-card.clickable {
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    overflow: hidden;
}

.member-card.clickable:hover {
    transform: translateY(-8px) scale(1.02);
    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
}

.member-card.clickable:focus {
    outline: 3px solid var(--secondary-color);
    outline-offset: 3px;
}

.member-card-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(52, 152, 219, 0.9);
    color: white;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    backdrop-filter: blur(3px);
}

.member-card.clickable:hover .member-card-overlay {
    opacity: 1;
}

.member-card-overlay i {
    font-size: 2rem;
}

.member-card-overlay span {
    font-weight: 500;
    font-size: 0.9rem;
}

/* レスポンシブ対応 */
@media (max-width: 1024px) {
    .detail-grid {
        grid-template-columns: 1fr;
        gap: 2rem;
    }
    
    .detail-sidebar {
        order: -1;
    }
    
    .member-hero-content {
        grid-template-columns: 1fr;
        text-align: center;
        gap: 2rem;
    }
    
    .member-meta {
        align-items: center;
    }
}

@media (max-width: 768px) {
    .member-detail-header {
        padding: 40px 0;
    }
    
    .member-hero-avatar .member-image,
    .member-hero-avatar .member-placeholder {
        width: 150px;
        height: 150px;
    }
    
    .member-hero-avatar .member-placeholder i {
        font-size: 3rem;
    }
    
    .member-name {
        font-size: 2rem;
    }
    
    .detail-section {
        padding: 1.5rem;
    }
    
    .profile-grid {
        grid-template-columns: 1fr;
    }
    
    .message-card {
        flex-direction: column;
        text-align: center;
    }
    
    .achievements-timeline::before {
        display: none;
    }
    
    .achievement-item {
        padding-left: 0;
    }
    
    .achievement-item::before {
        display: none;
    }
    
    .sidebar-card {
        padding: 1.5rem;
    }
    
    .related-grid {
        grid-template-columns: 1fr;
    }
}

@media (max-width: 480px) {
    .member-detail-content {
        padding: 40px 0;
    }
    
    .member-hero-avatar .member-image,
    .member-hero-avatar .member-placeholder {
        width: 120px;
        height: 120px;
    }
    
    .member-hero-avatar .member-placeholder i {
        font-size: 2.5rem;
    }
    
    .member-name {
        font-size: 1.75rem;
    }
    
    .member-role {
        font-size: 1.1rem;
    }
    
    .detail-section {
        padding: 1rem;
    }
    
    .detail-section h3 {
        font-size: 1.1rem;
    }
    
    .message-text p {
        font-size: 1rem;
    }
    
    .responsibility-item {
        padding: 0.5rem;
    }
    
    .sidebar-card {
        padding: 1rem;
    }
    
    .related-card {
        padding: 1.5rem;
    }
}

/* 通知システム */
.notification-status-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    background: var(--background-color);
    border-radius: 0.5rem;
    border-left: 3px solid var(--secondary-color);
    margin-bottom: 1rem;
}

.text-success {
    color: var(--success-color);
}

.text-error {
    color: var(--accent-color);
}

.text-info {
    color: var(--secondary-color);
}

.notification-message {
    position: fixed;
    top: 20px;
    right: 20px;
    background: var(--surface-color);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-lg);
    border: 1px solid var(--border-color);
    padding: 1rem 1.5rem;
    display: flex;
    align-items: center;
    gap: 1rem;
    z-index: 500;
    max-width: 400px;
    animation: slideInRight 0.3s ease;
}

.notification-message-success {
    border-left: 4px solid var(--success-color);
}

.notification-message-error {
    border-left: 4px solid var(--accent-color);
}

.notification-message-info {
    border-left: 4px solid var(--secondary-color);
}

.notification-message i {
    font-size: 1.2rem;
}

.notification-message-success i {
    color: var(--success-color);
}

.notification-message-error i {
    color: var(--accent-color);
}

.notification-message-info i {
    color: var(--secondary-color);
}

.notification-message span {
    flex: 1;
    color: var(--text-color);
}

.notification-message-close {
    background: none;
    border: none;
    cursor: pointer;
    color: var(--text-light);
    padding: 0.25rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
}

.notification-message-close:hover {
    background: var(--background-color);
    color: var(--text-color);
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(100%);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* プッシュ通知設定ページ */
.notification-settings-section {
    padding: 80px 0;
}

.notification-settings-card {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-color);
    margin-bottom: 2rem;
}

.notification-settings-card h3 {
    color: var(--primary-color);
    margin-bottom: 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.notification-controls {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.notification-control-group {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.notification-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
}

.notification-info {
    background: rgba(52, 152, 219, 0.1);
    border: 1px solid rgba(52, 152, 219, 0.2);
    border-radius: 0.5rem;
    padding: 1rem;
    margin-top: 1rem;
}

.notification-info h4 {
    color: var(--secondary-color);
    margin-bottom: 0.5rem;
    font-size: 1rem;
}

.notification-info p {
    color: var(--text-light);
    font-size: 0.9rem;
    line-height: 1.5;
    margin: 0;
}

.notification-info ul {
    margin: 0.5rem 0 0 1rem;
    color: var(--text-light);
    font-size: 0.9rem;
}

.notification-info li {
    margin-bottom: 0.25rem;
}

/* 通知許可プロンプト（カスタム） */
.custom-notification-prompt {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 501;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
}

.custom-notification-prompt.active {
    opacity: 1;
    visibility: visible;
}

.notification-prompt-content {
    background: var(--surface-color);
    border-radius: 1rem;
    padding: 2rem;
    box-shadow: var(--shadow-xl);
    max-width: 500px;
    width: 90%;
    text-align: center;
}

.notification-prompt-icon {
    width: 80px;
    height: 80px;
    background: var(--gradient-primary);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 1.5rem;
}

.notification-prompt-icon i {
    font-size: 2rem;
    color: white;
}

.notification-prompt-content h3 {
    color: var(--primary-color);
    margin-bottom: 1rem;
}

.notification-prompt-content p {
    color: var(--text-light);
    line-height: 1.6;
    margin-bottom: 2rem;
}

.notification-prompt-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
}

/* 通知バッジ */
.notification-badge {
    position: relative;
}

.notification-badge::after {
    content: '';
    position: absolute;
    top: -2px;
    right: -2px;
    width: 8px;
    height: 8px;
    background: var(--accent-color);
    border-radius: 50%;
    border: 2px solid var(--surface-color);
}

.notification-badge.has-notifications::after {
    background: var(--success-color);
    animation: pulse 2s infinite;
}

/* 通知ドロップダウン */
.notification-dropdown {
    position: absolute;
    top: 100%;
    right: 0;
    background: var(--surface-color);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    box-shadow: var(--shadow-lg);
    width: 350px;
    max-height: 400px;
    overflow-y: auto;
    z-index: 200;
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s ease;
}

.notification-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.notification-dropdown-header {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.notification-dropdown-header h4 {
    color: var(--primary-color);
    margin: 0;
}

.notification-dropdown-list {
    padding: 0.5rem 0;
}

.notification-dropdown-item {
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.notification-dropdown-item:hover {
    background: var(--background-color);
}

.notification-dropdown-item:last-child {
    border-bottom: none;
}

.notification-dropdown-item.unread {
    background: rgba(52, 152, 219, 0.05);
    border-left: 3px solid var(--secondary-color);
}

.notification-dropdown-item-content {
    display: flex;
    gap: 1rem;
    align-items: flex-start;
}

.notification-dropdown-item-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: var(--gradient-primary);
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
}

.notification-dropdown-item-icon i {
    color: white;
    font-size: 1rem;
}

.notification-dropdown-item-text {
    flex: 1;
    min-width: 0;
}

.notification-dropdown-item-title {
    font-weight: 500;
    color: var(--text-color);
    margin-bottom: 0.25rem;
    font-size: 0.9rem;
}

.notification-dropdown-item-message {
    color: var(--text-light);
    font-size: 0.8rem;
    line-height: 1.4;
    margin-bottom: 0.25rem;
}

.notification-dropdown-item-time {
    color: var(--text-light);
    font-size: 0.75rem;
}

.notification-dropdown-empty {
    padding: 2rem;
    text-align: center;
    color: var(--text-light);
}

.notification-dropdown-empty i {
    font-size: 2rem;
    margin-bottom: 1rem;
    color: var(--border-color);
}

/* レスポンシブ対応 */
@media (max-width: 768px) {
    .notification-message {
        right: 10px;
        left: 10px;
        max-width: none;
    }
    
    .notification-dropdown {
        width: 300px;
        right: -50px;
    }
    
    .notification-prompt-content {
        margin: 1rem;
        width: auto;
    }
    
    .notification-buttons {
        flex-direction: column;
    }
    
    .notification-prompt-buttons {
        flex-direction: column;
    }
}

@media (max-width: 480px) {
    .notification-dropdown {
        width: calc(100vw - 20px);
        right: -100px;
    }
    
    .notification-settings-card {
        padding: 1.5rem;
        margin: 0 10px 2rem;
    }
}

/* エラーメッセージ用のユーティリティクラス */
.text-error {
    color: var(--error-color) !important;
}

.text-danger {
    color: var(--danger-color) !important;
}

.bg-error {
    background-color: var(--error-color) !important;
    color: white !important;
}

.bg-danger {
    background-color: var(--danger-color) !important;
    color: white !important;
}

.border-error {
    border-color: var(--error-color) !important;
}

.border-danger {
    border-color: var(--danger-color) !important;
}

.alert-error {
    background-color: rgba(231, 76, 60, 0.1);
    border: 1px solid var(--error-color);
    color: var(--error-color);
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 1rem 0;
}

.alert-danger {
    background-color: rgba(192, 57, 43, 0.1);
    border: 1px solid var(--danger-color);
    color: var(--danger-color);
    padding: 1rem;
    border-radius: 0.5rem;
    margin: 1rem 0;
}

[js/admin.js]
// 管理画面用JavaScript

// 管理者認証状態
let isAuthenticated = false;
let currentUser = null;

// DOM要素
const loginScreen = document.getElementById('login-screen');
const adminMain = document.getElementById('admin-main');
const loginBtn = document.getElementById('login-btn');
const logoutBtn = document.getElementById('logout-btn');
const loginError = document.getElementById('login-error');
const adminEmailInput = document.getElementById('admin-email');
const adminPasswordInput = document.getElementById('admin-password');

// モーダル要素
const modalOverlay = document.getElementById('modal-overlay');
const adminModal = document.getElementById('admin-modal');
const modalTitle = document.getElementById('modal-title');
const modalBody = document.getElementById('modal-body');
const modalClose = document.getElementById('modal-close');
const modalCancel = document.getElementById('modal-cancel');
const modalSave = document.getElementById('modal-save');

// セクション管理
const menuItems = document.querySelectorAll('.menu-item');
const adminSections = document.querySelectorAll('.admin-section');

// Supabaseクライアントとクエリインスタンス
let supabaseClient = null;
let supabaseQueries = null;

// GAS用 API クライアントのフォールバック（adminページ単体読み込み対策）
if (typeof APIClient === 'undefined') {
    class APIClient {
        constructor() {
            this.baseURL = CONFIG.GAS_URL;
            this.cache = new Map();
            this.requestQueue = [];
            this.isOnline = navigator.onLine;
            window.addEventListener('online', () => { this.isOnline = true; this.processQueue(); });
            window.addEventListener('offline', () => { this.isOnline = false; });
        }
        sendRequest(action, params = {}, options = {}) {
            return new Promise((resolve, reject) => {
                if (!this.isOnline && !options.allowOffline) {
                    this.requestQueue.push({ action, params, resolve, reject });
                    return reject(new Error(CONFIG.MESSAGES.INFO.OFFLINE));
                }
                const cacheKey = `${action}_${JSON.stringify(params)}`;
                if (options.useCache && this.cache.has(cacheKey)) {
                    const cached = this.cache.get(cacheKey);
                    if (Date.now() - cached.timestamp < CONFIG.APP.CACHE_DURATION) {
                        return resolve(cached.data);
                    }
                }
                const callbackName = 'callback_' + Date.now() + '_' + Math.random().toString(36).substr(2);
                const timeout = setTimeout(() => { this.cleanup(callbackName); reject(new Error(CONFIG.MESSAGES.ERROR.NETWORK)); }, options.timeout || 10000);
                window.gasCallbacks = window.gasCallbacks || {};
                window.gasCallbacks[callbackName] = (data) => {
                    clearTimeout(timeout);
                    if (data && data.success && options.useCache) {
                        this.cache.set(cacheKey, { data, timestamp: Date.now() });
                    }
                    if (data && data.success) resolve(data); else reject(new Error((data && data.error) || CONFIG.MESSAGES.ERROR.SERVER));
                    this.cleanup(callbackName);
                };
                // オブジェクト型のパラメータはJSON文字列にシリアライズ（JSONPのため）
                const serializedParams = { action, callback: 'gasCallbacks.' + callbackName, timestamp: Date.now() };
                Object.keys(params || {}).forEach(key => {
                    const val = params[key];
                    if (val !== null && typeof val === 'object') {
                        try {
                            serializedParams[key] = JSON.stringify(val);
                        } catch (e) {
                            serializedParams[key] = String(val);
                        }
                    } else if (typeof val === 'undefined') {
                        serializedParams[key] = '';
                    } else {
                        serializedParams[key] = val;
                    }
                });
                const queryParams = new URLSearchParams(serializedParams);
                const script = document.createElement('script');
                script.id = 'jsonp_' + callbackName;
                script.src = `${this.baseURL}?${queryParams}`;
                console.log('GAS request:', action, script.src);
                script.onerror = () => { clearTimeout(timeout); this.cleanup(callbackName); reject(new Error(CONFIG.MESSAGES.ERROR.NETWORK)); };
                document.head.appendChild(script);
            });
        }
        cleanup(callbackName) {
            if (window.gasCallbacks) delete window.gasCallbacks[callbackName];
            const el = document.getElementById('jsonp_' + callbackName);
            if (el) el.remove();
        }
        processQueue() {
            while (this.requestQueue.length > 0) {
                const req = this.requestQueue.shift();
                this.sendRequest(req.action, req.params).then(req.resolve).catch(req.reject);
            }
        }
    }
    window.APIClient = APIClient;
}
if (!window.apiClient && typeof APIClient !== 'undefined') {
    window.apiClient = new APIClient();
}

// 初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('Admin panel initializing...');
    
    // Supabaseクライアントとクエリの初期化
    initializeSupabase();
    
    // 認証状態をチェック
    checkAuthStatus();
    
    // イベントリスナーを設定
    setupEventListeners();
    
    // ハンバーガーメニューの初期化
    initializeHamburgerMenu();
    
    // デバッグモード（自動ログイン無効化）
    if (CONFIG.APP.DEBUG) {
        console.log('Debug mode: Enabled but auto-login disabled for security');
        // セキュリティのため自動ログインは無効化
    }
});

// Supabase初期化
function initializeSupabase() {
    try {
        // Supabaseクライアントの初期化
        if (typeof supabase !== 'undefined') {
            supabaseClient = supabase.createClient(CONFIG.SUPABASE.URL, CONFIG.SUPABASE.ANON_KEY);
            window.supabaseClient = supabaseClient;
            console.log('Supabase client initialized');
            
            // SupabaseQueriesインスタンスの作成
            if (typeof SupabaseQueries !== 'undefined') {
                supabaseQueries = new SupabaseQueries(supabaseClient);
                window.supabaseQueries = supabaseQueries;
                console.log('SupabaseQueries initialized');
            } else {
                console.warn('SupabaseQueries class not found');
            }
        } else {
            console.warn('Supabase SDK not loaded');
        }
    } catch (error) {
        console.error('Error initializing Supabase:', error);
    }
}

// 認証状態チェック（セキュリティ強化版）
function checkAuthStatus() {
    // セッションから認証情報を復元
    const sessionData = sessionStorage.getItem('admin-session');
    
    if (sessionData) {
        try {
            const userData = JSON.parse(sessionData);
            
            // セッションの有効性をチェック（24時間以内）
            const loginTime = new Date(userData.loginTime);
            const now = new Date();
            const hoursDiff = (now - loginTime) / (1000 * 60 * 60);
            
            if (hoursDiff < 24) {
                // 有効なセッション
                currentUser = userData;
                isAuthenticated = true;
                
                // セキュリティ監視を開始
                startSecurityMonitoring();
                
                // 管理画面を表示
                showAdminPanel();
                console.log('Session restored:', userData);
                return;
            } else {
                // セッション期限切れ
                console.log('Session expired, clearing data');
                clearAuthData();
            }
        } catch (error) {
            console.error('Error parsing session data:', error);
            clearAuthData();
        }
    }
    
    // 認証されていない場合はログイン画面を表示
    showLoginScreen();
    
    // セキュリティ強化：開発者ツールでの認証バイパスを防ぐ
    Object.defineProperty(window, 'isAuthenticated', {
        value: false,
        writable: false,
        configurable: false
    });
    
    Object.defineProperty(window, 'currentUser', {
        value: null,
        writable: false,
        configurable: false
    });
}

// ログイン画面表示
function showLoginScreen() {
    if (loginScreen) {
        loginScreen.style.display = 'flex';
    }
    if (adminMain) {
        adminMain.style.display = 'none';
    }
    
    // フォームをクリア
    if (adminEmailInput) adminEmailInput.value = '';
    if (adminPasswordInput) adminPasswordInput.value = '';
    if (loginError) loginError.style.display = 'none';
}

// イベントリスナー設定
function setupEventListeners() {
    // ログインフォーム送信
    const loginForm = document.getElementById('login-form');
    if (loginForm) {
        loginForm.addEventListener('submit', function(e) {
            e.preventDefault();
            handleLogin();
        });
    }
    
    // ログインボタン
    loginBtn.addEventListener('click', function(e) {
        e.preventDefault();
        handleLogin();
    });
    
    // Enterキー対応
    adminEmailInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleLogin();
        }
    });
    adminPasswordInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            e.preventDefault();
            handleLogin();
        }
    });
    
    // ログアウト
    logoutBtn.addEventListener('click', handleLogout);
    
    // PWA更新ボタン
    const pwaUpdateBtn = document.getElementById('pwa-update-btn');
    if (pwaUpdateBtn) {
        pwaUpdateBtn.addEventListener('click', () => {
            if (window.showPWAUpdateModule) {
                window.showPWAUpdateModule();
            } else {
                console.warn('PWA update module not available');
                alert('PWA更新モジュールが利用できません。ページを再読み込みしてください。');
            }
        });
    }
    
    // メニューナビゲーション
    menuItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const section = item.dataset.section;
            switchSection(section);
        });
    });
    
    // モーダル
    modalClose.addEventListener('click', closeModal);
    modalCancel.addEventListener('click', closeModal);
    modalOverlay.addEventListener('click', (e) => {
        if (e.target === modalOverlay) closeModal();
    });
    
    // ESCキーでモーダルを閉じる
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && modalOverlay.classList.contains('active')) {
            closeModal();
        }
    });
    
    // 各セクションのボタン
    setupSectionButtons();
}

// セクションボタンの設定
function setupSectionButtons() {
    // お知らせ
    const addNewsBtn = document.getElementById('add-news-btn');
    if (addNewsBtn) {
        addNewsBtn.addEventListener('click', () => showNewsModal());
    }
    
    // アンケート
    const addSurveyBtn = document.getElementById('add-survey-btn');
    if (addSurveyBtn) {
        addSurveyBtn.addEventListener('click', () => showSurveyModal());
    }
    
    // 部活動
    const addClubBtn = document.getElementById('add-club-btn');
    if (addClubBtn) {
        addClubBtn.addEventListener('click', () => showClubModal());
    }
    
    // 生徒会メンバー
    const addMemberBtn = document.getElementById('add-member-btn');
    if (addMemberBtn) {
        addMemberBtn.addEventListener('click', () => showMemberModal());
    }
    
    // 活動実績管理
    const addAchievementBtn = document.getElementById('add-achievement-btn');
    if (addAchievementBtn) {
        addAchievementBtn.addEventListener('click', () => showAchievementModal());
    }
    
    const clearFiltersBtn = document.getElementById('clear-filters-btn');
    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener('click', () => clearAchievementFilters());
    }
    
    // 年度フィルター
    const yearFilter = document.getElementById('achievement-year-filter');
    if (yearFilter) {
        yearFilter.addEventListener('change', () => loadAchievementsData());
    }
    
    const monthFilter = document.getElementById('achievement-month-filter');
    if (monthFilter) {
        monthFilter.addEventListener('change', () => loadAchievementsData());
    }
    
    const categoryFilter = document.getElementById('achievement-category-filter');
    if (categoryFilter) {
        categoryFilter.addEventListener('change', () => loadAchievementsData());
    }
    
    const memberFilter = document.getElementById('member-filter');
    if (memberFilter) {
        memberFilter.addEventListener('change', () => loadAchievementsData());
    }
    
    // 通知送信
    const sendNotificationBtn = document.getElementById('send-notification-btn');
    if (sendNotificationBtn) {
        sendNotificationBtn.addEventListener('click', sendNotification);
    }

    // 通知テンプレート選択
    const templateSelect = document.getElementById('notification-template');
    if (templateSelect) {
        templateSelect.addEventListener('change', onTemplateChange);
    }
}

// ログイン処理
async function handleLogin() {
    const email = adminEmailInput.value.trim();
    const password = adminPasswordInput.value.trim();
    
    if (!email || !password) {
        showLoginError('メールアドレスとパスワードを入力してください。');
        return;
    }
    
    // 入力値の検証
    if (email.length < 5 || !email.includes('@')) {
        showLoginError('有効なメールアドレスを入力してください。');
        return;
    }
    
    if (password.length < 6) {
        showLoginError('パスワードは6文字以上で入力してください。');
        return;
    }
    
    loginBtn.disabled = true;
    loginBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> ログイン中...';
    
    try {
        const success = await performLogin(email, password);
        if (success) {
            showAdminPanel();
            showSuccessMessage('ログインに成功しました。');
        } else {
            showLoginError('ログインに失敗しました。認証情報を確認してください。');
        }
    } catch (error) {
        console.error('Login error:', error);
        showLoginError('ログイン中にエラーが発生しました。しばらく待ってから再試行してください。');
    } finally {
        loginBtn.disabled = false;
        loginBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i> ログイン';
    }
}

// 実際のログイン処理（セキュリティ強化版）
async function performLogin(email, password) {
    try {
        // 入力値検証を強化
        if (!email || !password || email.trim().length === 0 || password.trim().length === 0) {
            return false;
        }
        
        // メールアドレス形式チェック
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return false;
        }
        
        // パスワード最小長チェック
        if (password.length < 6) {
            return false;
        }
        
        // デバッグモードでの簡易認証
        if (CONFIG.APP.DEBUG) {
            console.log('Debug mode: Performing simplified authentication');
            
            // デバッグ用の認証情報（実際の運用では削除）
            const debugAdmins = [
                { email: 'admin@school.ac.jp', password: 'admin123', name: '管理者', role: 'admin' },
                { email: 'council@school.ac.jp', password: 'council123', name: '生徒会', role: 'council' }
            ];
            
            const admin = debugAdmins.find(a => a.email === email && a.password === password);
            if (admin) {
                const userData = {
                    email: admin.email,
                    name: admin.name,
                    role: admin.role,
                    permissions: ['read', 'write', 'admin'],
                    loginTime: new Date().toISOString()
                };
                
                // セッションのみに保存（ページ更新で消える）
                sessionStorage.setItem('admin-session', JSON.stringify(userData));
                
                currentUser = userData;
                isAuthenticated = true;
                
                // 追加のセキュリティチェック
                startSecurityMonitoring();
                
                console.log('Debug authentication successful:', userData);
                return true;
            }
            
            console.log('Debug authentication failed: Invalid credentials');
            return false;
        }
        
        // 本番環境でのGAS認証（JSONP使用）
        const result = await apiClient.sendRequest('adminLogin', {
            email: email,
            password: password
        });
        
        if (result.success && result.admin) {
            const userData = {
                email: result.admin.email,
                name: result.admin.name,
                role: result.admin.role,
                permissions: result.admin.permissions,
                loginTime: new Date().toISOString()
            };
            
            // セッションのみに保存（ページ更新で消える）
            sessionStorage.setItem('admin-session', JSON.stringify(userData));
            
            currentUser = userData;
            isAuthenticated = true;
            
            // 追加のセキュリティチェック
            startSecurityMonitoring();
            
            return true;
        }
        
        return false;
    } catch (error) {
        console.error('Authentication error:', error);
        return false;
    }
}

// ログインエラー表示
function showLoginError(message) {
    loginError.innerHTML = `<i class="fas fa-exclamation-triangle"></i> <span>${message}</span>`;
    loginError.style.display = 'flex';
    
    setTimeout(() => {
        loginError.style.display = 'none';
    }, 5000);
}

// 管理画面表示
function showAdminPanel() {
    loginScreen.style.display = 'none';
    adminMain.style.display = 'grid';
    
    // ユーザー名を表示
    const userNameEl = document.getElementById('admin-user-name');
    if (userNameEl && currentUser) {
        userNameEl.textContent = currentUser.name || '管理者';
    }
    
    // ダッシュボードを初期化
    initializeDashboard();
    
    // デフォルトでダッシュボードを表示
    switchSection('dashboard');
}

// ログアウト処理（セキュリティ強化版）
function handleLogout() {
    if (confirm('ログアウトしますか？')) {
        // すべての認証データを完全にクリア
        clearAuthData();
        sessionStorage.clear();
        localStorage.clear();
        
        // 変数をリセット
        currentUser = null;
        isAuthenticated = false;
        
        // セキュリティ監視を停止
        stopSecurityMonitoring();
        
        // ページを強制リロード（メモリ上のデータもクリア）
        window.location.reload();
    }
}

// 認証データクリア
function clearAuthData() {
    localStorage.removeItem('admin-auth-token');
    localStorage.removeItem('admin-user-data');
    isAuthenticated = false;
    currentUser = null;
}

// セクション切り替え
function switchSection(sectionName) {
    // メニューのアクティブ状態を更新
    menuItems.forEach(item => {
        item.classList.remove('active');
        if (item.dataset.section === sectionName) {
            item.classList.add('active');
        }
    });
    
    // セクションの表示を切り替え
    adminSections.forEach(section => {
        section.classList.remove('active');
        if (section.id === sectionName + '-section') {
            section.classList.add('active');
        }
    });
    
    // セクション固有の初期化
    initializeSection(sectionName);
}

// セクション固有の初期化
async function initializeSection(sectionName) {
    switch (sectionName) {
        case 'dashboard':
            await loadDashboardData();
            break;
        case 'news':
            await loadNewsData();
            break;
        case 'surveys':
            await loadSurveysData();
            break;
        case 'clubs':
            await loadClubsData();
            break;
        case 'council':
            await loadCouncilData();
            break;
        case 'notifications':
            await loadNotificationTemplates();
            await loadNotificationHistory();
            break;
        case 'forum':
            await loadForumData();
            break;
        case 'achievements':
            await loadAchievementsData();
            break;
    }
}

// ダッシュボード初期化
function initializeDashboard() {
    console.log('Initializing dashboard...');
}

// ダッシュボードデータ読み込み
async function loadDashboardData() {
    try {
        // 統計データを読み込み
        const stats = await loadStatistics();
        updateDashboardStats(stats);
        
        // 最近の活動を読み込み
        const recentActivities = await loadRecentActivities();
        updateRecentActivities(recentActivities);
    } catch (error) {
        console.error('Error loading dashboard data:', error);
    }
}

// 統計データ読み込み
async function loadStatistics() {
    try {
        // 実際のデータベースから統計を取得
        const stats = {
            news: 0,
            surveys: 0,
            clubs: 0,
            forum: 0
        };
        
        if (supabaseQueries) {
            // お知らせ数
            const { count: newsCount } = await supabaseClient
                .from('news')
                .select('*', { count: 'exact', head: true });
            stats.news = newsCount || 0;
            
            // アンケート数
            const { count: surveyCount } = await supabaseClient
                .from('surveys')
                .select('*', { count: 'exact', head: true });
            stats.surveys = surveyCount || 0;
            
            // 部活動数
            const { count: clubCount } = await supabaseClient
                .from('clubs')
                .select('*', { count: 'exact', head: true });
            stats.clubs = clubCount || 0;
            
            // フォーラム投稿数
            const { count: forumCount } = await supabaseClient
                .from('posts')
                .select('*', { count: 'exact', head: true });
            stats.forum = forumCount || 0;
        }
        
        return stats;
    } catch (error) {
        console.error('Error loading statistics:', error);
        return { news: 0, surveys: 0, clubs: 0, forum: 0 };
    }
}

// ダッシュボード統計更新
function updateDashboardStats(stats) {
    document.getElementById('news-count').textContent = stats.news;
    document.getElementById('survey-count').textContent = stats.surveys;
    document.getElementById('club-count').textContent = stats.clubs;
    document.getElementById('forum-count').textContent = stats.forum;
}

// 最近の活動データ読み込み
async function loadRecentActivities() {
    try {
        const activities = [];
        
        if (supabaseQueries) {
            // 最新のお知らせ
            const { data: recentNews } = await supabaseClient
                .from('news')
                .select('title, created_at')
                .order('created_at', { ascending: false })
                .limit(3);
            
            if (recentNews && recentNews.length > 0) {
                recentNews.forEach(news => {
                    activities.push({
                        type: 'news',
                        title: '新しいお知らせが投稿されました',
                        description: news.title,
                        time: formatRelativeTime(news.created_at),
                        icon: 'fas fa-newspaper'
                    });
                });
            }
            
            // 最新のフォーラム投稿
            const { data: recentPosts } = await supabaseClient
                .from('posts')
                .select('content, created_at')
                .order('created_at', { ascending: false })
                .limit(3);
            
            if (recentPosts && recentPosts.length > 0) {
                recentPosts.forEach(post => {
                    activities.push({
                        type: 'forum',
                        title: 'フォーラムに新しい投稿',
                        description: post.content.substring(0, 50) + '...',
                        time: formatRelativeTime(post.created_at),
                        icon: 'fas fa-comments'
                    });
                });
            }
        }
        
        return activities;
    } catch (error) {
        console.error('Error loading recent activities:', error);
        return [];
    }
}

// 最近の活動更新
function updateRecentActivities(activities) {
    const container = document.getElementById('recent-activities');
    if (!container) return;
    
    container.innerHTML = activities.map(activity => `
        <div class="recent-item">
            <div class="recent-icon">
                <i class="${activity.icon}"></i>
            </div>
            <div class="recent-content">
                <h4>${activity.title}</h4>
                <p>${activity.description} • ${activity.time}</p>
            </div>
        </div>
    `).join('');
}

// お知らせデータ読み込み
async function loadNewsData() {
    const tableBody = document.getElementById('news-table-body');
    if (!tableBody) return;
    
    try {
        if (supabaseQueries) {
            const { data: newsData, error } = await supabaseClient
                .from('news')
                .select('*')
                .order('created_at', { ascending: false });
            
            if (error) {
                console.error('Error loading news:', error);
                tableBody.innerHTML = '<tr><td colspan="4">データの読み込みに失敗しました</td></tr>';
                return;
            }
            
            if (newsData && newsData.length > 0) {
                tableBody.innerHTML = newsData.map(item => `
                    <tr>
                        <td>${item.title}</td>
                        <td><span class="status-badge status-${item.category}">${getCategoryLabel(item.category)}</span></td>
                        <td>${formatDate(item.created_at)}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-outline" onclick="editNews(${item.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline" onclick="deleteNews(${item.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            } else {
                tableBody.innerHTML = '<tr><td colspan="4">お知らせがありません</td></tr>';
            }
        } else {
            tableBody.innerHTML = '<tr><td colspan="4">データベースに接続できません</td></tr>';
        }
    } catch (error) {
        console.error('Error loading news data:', error);
        tableBody.innerHTML = '<tr><td colspan="4">データの読み込み中にエラーが発生しました</td></tr>';
    }
}

// アンケートデータ読み込み
async function loadSurveysData() {
    const tableBody = document.getElementById('surveys-table-body');
    if (!tableBody) return;
    
    try {
        if (supabaseQueries) {
            const { data: surveysData, error } = await supabaseClient
                .from('surveys')
                .select('*')
                .order('created_at', { ascending: false });
            
            if (error) {
                console.error('Error loading surveys:', error);
                tableBody.innerHTML = '<tr><td colspan="5">データの読み込みに失敗しました</td></tr>';
                return;
            }
            
            if (surveysData && surveysData.length > 0) {
                tableBody.innerHTML = surveysData.map(item => `
                    <tr>
                        <td>${item.title}</td>
                        <td><span class="status-badge status-${item.status}">${getStatusLabel(item.status)}</span></td>
                        <td>${item.responses || 0}件</td>
                        <td>${formatDate(item.deadline)}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-outline" onclick="viewSurveyResults(${item.id})">
                                    <i class="fas fa-chart-bar"></i>
                                </button>
                                <button class="btn btn-sm btn-outline" onclick="editSurvey(${item.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline" onclick="deleteSurvey(${item.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            } else {
                tableBody.innerHTML = '<tr><td colspan="5">アンケートがありません</td></tr>';
            }
        } else {
            tableBody.innerHTML = '<tr><td colspan="5">データベースに接続できません</td></tr>';
        }
    } catch (error) {
        console.error('Error loading surveys data:', error);
        tableBody.innerHTML = '<tr><td colspan="5">データの読み込み中にエラーが発生しました</td></tr>';
    }
}

// 部活動データ読み込み
async function loadClubsData() {
    const tableBody = document.getElementById('clubs-table-body');
    if (!tableBody) return;
    
    try {
        if (supabaseQueries) {
            const { data: clubsData, error } = await supabaseClient
                .from('clubs')
                .select('*')
                .order('name', { ascending: true });
            
            if (error) {
                console.error('Error loading clubs:', error);
                tableBody.innerHTML = '<tr><td colspan="5">データの読み込みに失敗しました</td></tr>';
                return;
            }
            
            if (clubsData && clubsData.length > 0) {
                tableBody.innerHTML = clubsData.map(item => `
                    <tr>
                        <td>${item.name}</td>
                        <td><span class="status-badge status-${item.category}">${getCategoryLabel(item.category)}</span></td>
                        <td>${item.members || 0}名</td>
                        <td>${item.schedule || '未設定'}</td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-sm btn-outline" onclick="editClub(${item.id})">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-sm btn-outline" onclick="deleteClub(${item.id})">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                `).join('');
            } else {
                tableBody.innerHTML = '<tr><td colspan="5">部活動がありません</td></tr>';
            }
        } else {
            tableBody.innerHTML = '<tr><td colspan="5">データベースに接続できません</td></tr>';
        }
    } catch (error) {
        console.error('Error loading clubs data:', error);
        tableBody.innerHTML = '<tr><td colspan="5">データの読み込み中にエラーが発生しました</td></tr>';
    }
}

// 生徒会データ読み込み
async function loadCouncilData() {
    const membersGrid = document.getElementById('members-grid');
    if (!membersGrid) return;
    
    try {
        if (window.supabaseClient) {
            const { data: membersData, error } = await window.supabaseClient
                .from('council_members')
                .select('*')
                .order('display_order', { ascending: true });
            
            if (error) {
                console.error('Error loading council members:', error);
                membersGrid.innerHTML = '<div class="no-data-message">データの読み込みに失敗しました</div>';
                return;
            }
            
            if (membersData && membersData.length > 0) {
                membersGrid.innerHTML = membersData.map(member => `
                    <div class="member-admin-card">
                        <div class="member-actions">
                            <button class="btn btn-sm btn-icon btn-outline" onclick="editMember(${member.id})">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-sm btn-icon btn-outline" onclick="deleteMember(${member.id})">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                        <div class="member-avatar">
                            <i class="fas fa-user"></i>
                        </div>
                        <h3>${member.name}</h3>
                        <p class="member-role">${member.role}</p>
                        <p class="member-message">"${member.message || 'よろしくお願いします'}"</p>
                    </div>
                `).join('');
            } else {
                membersGrid.innerHTML = '<div class="no-data-message">生徒会メンバーが登録されていません</div>';
            }
        } else {
            membersGrid.innerHTML = '<div class="no-data-message">データベースに接続できません</div>';
        }
    } catch (error) {
        console.error('Error loading council data:', error);
        membersGrid.innerHTML = '<div class="no-data-message">データの読み込み中にエラーが発生しました</div>';
    }
}

// 通知履歴読み込み
async function loadNotificationHistory() {
    const historyContainer = document.getElementById('notification-history');
    if (!historyContainer) return;
    
    try {
        let historyData = [];
        // GAS経由（必須ルート）
        if (window.apiClient) {
            try {
                const resp = await window.apiClient.sendRequest('getNotificationHistory', { limit: 10 }, { timeout: 10000, useCache: true });
                if (resp && resp.success && Array.isArray(resp.data)) historyData = resp.data;
            } catch (e) {
                console.warn('GAS history fetch failed, falling back to Supabase (read-only).', e);
            }
        }
        // フォールバック: 直接Supabase（閲覧のみ）
        if (!historyData.length && window.supabaseClient) {
            const { data, error } = await window.supabaseClient
                .from('notification_history')
                .select('*')
                .order('sent_at', { ascending: false })
                .limit(10);
            if (!error && data) historyData = data;
        }
        
        if (historyData && historyData.length > 0) {
            historyContainer.innerHTML = historyData.map(item => `
                    <div class="history-item">
                        <h4>${item.title}</h4>
                        <p>${item.message}</p>
                        <div class="history-meta">
                            <span>${item.target} (${item.recipients || 0}名)</span>
                            <span>${formatDateTime(item.sent_at)}</span>
                        </div>
                    </div>
                `).join('');
        } else {
            historyContainer.innerHTML = '<div class="no-data-message">通知履歴がありません</div>';
        }
    } catch (error) {
        console.error('Error loading notification history:', error);
        historyContainer.innerHTML = '<div class="no-data-message">データの読み込み中にエラーが発生しました</div>';
    }
}

// 通知テンプレートをロードしてセレクトに反映
async function loadNotificationTemplates() {
    try {
        const select = document.getElementById('notification-template');
        if (!select) return;
        let templates = [];
        // GAS 経由（必須ルート）
        if (window.apiClient) {
            try {
                const resp = await window.apiClient.sendRequest('getNotificationTemplates', { active_only: true }, { timeout: 10000, useCache: true });
                if (resp && resp.success && Array.isArray(resp.data)) templates = resp.data;
            } catch (e) {
                console.warn('GAS templates fetch failed, falling back to Supabase (read-only).', e);
            }
        }
        // フォールバック: 直接Supabase（閲覧のみ）
        if (!templates.length && window.supabaseClient) {
            const { data, error } = await window.supabaseClient
                .from('notification_templates')
                .select('template_key,title_template,body_template,category,priority')
                .eq('is_active', true)
                .order('priority', { ascending: false });
            if (!error && data) templates = data;
        }
        // セレクトに反映
        select.innerHTML = '<option value="">（選択してください）</option>' +
            templates.map(t => `<option value="${t.template_key}">${t.template_key}</option>`).join('');
        // 既存の値があれば保持
        const current = select.dataset.currentValue;
        if (current) select.value = current;
    } catch (e) {
        console.warn('Failed to load notification templates', e);
    }
}

// テンプレート選択変更時にタイトル/本文を下書き反映
function onTemplateChange() {
    const key = document.getElementById('notification-template')?.value || '';
    if (!key) {
        // テンプレート未選択時は何もしない（カスタム入力保持）
        return;
    }
    // 簡易ルール: 既知キーで定型文を挿入（空のフィールドのみ）
    const titleEl = document.getElementById('notification-title');
    const bodyEl = document.getElementById('notification-message');
    if (!titleEl || !bodyEl) return;
    if (key === 'survey_created') {
        if (!titleEl.value) titleEl.value = '新しいアンケートのお知らせ';
        if (!bodyEl.value) bodyEl.value = 'アンケートにご協力ください。';
    } else if (key === 'event_reminder') {
        if (!titleEl.value) titleEl.value = 'イベントのお知らせ';
        if (!bodyEl.value) bodyEl.value = 'イベントの詳細をご確認ください。';
    } else if (key === 'news_published') {
        if (!titleEl.value) titleEl.value = 'お知らせ公開';
        if (!bodyEl.value) bodyEl.value = '最新のお知らせを公開しました。';
    }
}

// 通知フォームをクリア
function clearNotificationForm() {
    document.getElementById('notification-template').value = '';
    document.getElementById('notification-title').value = '';
    document.getElementById('notification-message').value = '';
    document.getElementById('notification-target').value = 'all';
}

// フォーラムデータ読み込み
async function loadForumData() {
    const tableBody = document.getElementById('forum-table-body');
    if (!tableBody) return;
    
    let forumData = [];
    let nameMap = {};
    try {
        if (window.supabaseQueries) {
            const { data: posts, error } = await window.supabaseQueries.getPostsForAdmin({ limit: 200 });
            if (!error && posts) {
                forumData = posts;
                const numbers = Array.from(new Set(posts.map(p => p.student_number).filter(Boolean)));
                if (numbers.length > 0) {
                    const { data: students, error: sErr } = await window.supabaseQueries.getStudentsByNumbers(numbers);
                    if (!sErr && students) {
                        students.forEach(s => { nameMap[s.student_number] = s.name; });
                    }
                }
            }
        }
    } catch (e) {
        console.warn('Admin posts load fallback:', e);
    }

    tableBody.innerHTML = forumData.map(item => `
        <tr>
            <td>${item.id}</td>
            <td>${truncateText(item.content, 50)}<div class="small" style="opacity:.7;">投稿者: ${nameMap[item.student_number] || '匿名'}</div></td>
            <td><span class="status-badge status-${item.status}">${getStatusLabel(item.status)}</span></td>
            <td>${formatDateTime(item.created_at)}</td>
            <td>
                <div class="action-buttons">
                    <button class="btn btn-sm btn-outline" onclick="viewForumPost('${item.id}')">
                        <i class="fas fa-eye"></i>
                    </button>
                    <button class="btn btn-sm btn-outline" onclick="replyToPost('${item.id}')">
                        <i class="fas fa-reply"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// モーダル表示
function showModal(title, content, saveCallback = null) {
    modalTitle.textContent = title;
    modalBody.innerHTML = content;
    modalOverlay.classList.add('active');
    
    // 保存ボタンのコールバック設定
    modalSave.onclick = saveCallback || closeModal;
}

// モーダル閉じる
function closeModal() {
    modalOverlay.classList.remove('active');
    modalSave.onclick = null;
}

// お知らせモーダル表示
function showNewsModal(newsId = null, newsData = null) {
    const isEdit = newsId !== null;
    const title = isEdit ? 'お知らせを編集' : '新しいお知らせを作成';
    
    const content = `
        <div class="form-group">
            <label for="news-title">タイトル *</label>
            <input type="text" id="news-title" class="form-control" placeholder="お知らせのタイトルを入力" value="${newsData?.title || ''}">
        </div>
        <div class="form-group">
            <label for="news-category">カテゴリ *</label>
            <select id="news-category" class="form-control">
                <option value="general" ${newsData?.category === 'general' ? 'selected' : ''}>一般</option>
                <option value="event" ${newsData?.category === 'event' ? 'selected' : ''}>イベント</option>
                <option value="important" ${newsData?.category === 'important' ? 'selected' : ''}>重要</option>
                <option value="newsletter" ${newsData?.category === 'newsletter' ? 'selected' : ''}>生徒会だより</option>
                <option value="recruitment" ${newsData?.category === 'recruitment' ? 'selected' : ''}>募集</option>
            </select>
        </div>
        <div class="form-group">
            <label for="news-content">内容 *</label>
            <textarea id="news-content" class="form-control" rows="6" placeholder="お知らせの内容を入力">${newsData?.content || ''}</textarea>
        </div>
        <div class="form-group">
            <label>
                <input type="checkbox" id="news-notification"> プッシュ通知を送信
            </label>
        </div>
    `;
    
    showModal(title, content, () => saveNews(newsId));
}

// お知らせ保存
async function saveNews(newsId = null) {
    const title = document.getElementById('news-title').value.trim();
    const category = document.getElementById('news-category').value;
    const content = document.getElementById('news-content').value.trim();
    const sendNotification = document.getElementById('news-notification').checked;
    
    if (!title || !content) {
        alert('タイトルと内容は必須です。');
        return;
    }
    
    try {
        let saved = false;
        // まずは直接Supabaseへ保存（高速・双方向整合性）
        if (window.supabaseClient) {
            const payload = { title, category, content, is_published: true, date: new Date().toISOString() };
            let result;
            if (newsId) {
                result = await window.supabaseClient
                    .from('news')
                    .update(payload)
                    .eq('id', newsId)
                    .select();
            } else {
                result = await window.supabaseClient
                    .from('news')
                    .insert([payload])
                    .select();
            }
            if (!result.error) {
                saved = true;
            } else {
                console.warn('Supabase save failed, will try GAS fallback:', result.error);
            }
        }

        // フォールバック: GAS経由
        if (!saved && window.apiClient) {
            const action = newsId ? 'updateNews' : 'createNews';
            const payload = { id: newsId, title, category, content, is_published: true };
            const result = await window.apiClient.sendRequest(action, payload, { timeout: 15000 });
            if (result && result.success) {
                saved = true;
            }
        }

        if (!saved) {
            throw new Error('保存に失敗しました。');
        }

        showSuccessMessage('お知らせを保存しました。');
        closeModal();
        loadNewsData();
        if (sendNotification) {
            await sendNewsNotification(title, content);
        }
    } catch (error) {
        console.error('Error saving news:', error);
        showErrorMessage('保存中にエラーが発生しました。');
    }
}

// 通知送信
async function sendNotification() {
    const title = document.getElementById('notification-title').value.trim();
    const message = document.getElementById('notification-message').value.trim();
    const target = document.getElementById('notification-target').value;
    const templateKey = (document.getElementById('notification-template')?.value || '').trim();
    
    if (!title || !message) {
        alert('タイトルとメッセージを入力してください。');
        return;
    }
    
    const sendBtn = document.getElementById('send-notification-btn');
    sendBtn.disabled = true;
    sendBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 送信中...';
    
    try {
        const result = await sendPushNotification({
            title,
            message,
            target,
            templateKey
        });
        
        if (result.success) {
            showSuccessMessage('通知を送信しました。');
            
            // フォームをクリア
            document.getElementById('notification-title').value = '';
            document.getElementById('notification-message').value = '';
            document.getElementById('notification-target').value = 'all';
            
            // 履歴を再読み込み
            loadNotificationHistory();
        } else {
            throw new Error(result.error || '送信に失敗しました。');
        }
    } catch (error) {
        console.error('Error sending notification:', error);
        showErrorMessage('通知送信中にエラーが発生しました。');
    } finally {
        sendBtn.disabled = false;
        sendBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 通知を送信';
    }
}

// 実際の通知送信処理（GAS + FCM）- カスタムメッセージ対応版
async function sendPushNotification(data) {
    try {
        // カスタムメッセージを直接送信するためのデータ準備
        const notificationData = {
            templateKey: '', // テンプレートを使用しない
            templateData: {
                title: data.title,
                message: data.message,
                url: getNotificationUrl(data),
                category: getCategoryFromTitle(data.title),
                priority: getPriorityFromTitle(data.title),
                icon: 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                badge: '/images/badge-72x72.png',
                requireInteraction: data.title.includes('緊急') || data.title.includes('重要'),
                actions: [
                    { action: 'view', title: '詳細を見る' },
                    { action: 'dismiss', title: '閉じる' }
                ]
            },
            // GAS 側でカスタムデータを優先するためのヒントフラグ
            preferCustom: true,
            // 後方互換: 一部のGAS実装はトップレベルの title/body を参照するため複製
            title: data.title,
            body: data.message,
            targetType: data.target || 'all',
            targetCriteria: getTargetCriteria(data.target),
            adminEmail: currentUser?.email || 'admin@school.ac.jp',
            adminPassword: 'admin' // TODO: 実運用の認証に置換
        };
        
        // 通知送信の再試行ロジック
        let retries = 3;
        let result = null;
        
        while (retries > 0) {
            try {
                // GASに通知送信要求（JSONP使用）
                result = await apiClient.sendRequest('sendNotification', notificationData, {
                    timeout: 15000 // タイムアウトを15秒に設定
                });
                
                if (result.success) {
                    break; // 成功したらループを抜ける
                } else {
                    console.warn(`Notification sending failed (${retries} retries left):`, result.error);
                    // テンプレート未登録エラー時はテンプレートなしで再試行
                    const msg = String(result.error || '').toLowerCase();
                    if (msg.includes('template not found')) {
                        console.warn('Template not found. Retrying without templateKey...');
                        const fallbackData = { ...notificationData, templateKey: '' };
                        try {
                            const fallback = await apiClient.sendRequest('sendNotification', fallbackData, { timeout: 15000 });
                            if (fallback && fallback.success) {
                                result = fallback;
                                break;
                            }
                        } catch (e) {
                            // 続行して通常のリトライへ
                        }
                    }
                    retries--;
                    if (retries > 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
                    }
                }
            } catch (err) {
                console.warn(`Notification request error (${retries} retries left):`, err);
                // テンプレート未登録が明確な場合もフォールバックを試す
                const emsg = String(err && (err.message || err)).toLowerCase();
                if (emsg.includes('template not found')) {
                    console.warn('Template not found (exception). Retrying without templateKey...');
                    const fallbackData = { ...notificationData, templateKey: '' };
                    try {
                        const fallback = await apiClient.sendRequest('sendNotification', fallbackData, { timeout: 15000 });
                        if (fallback && fallback.success) {
                            result = fallback;
                            break;
                        }
                    } catch (e2) {
                        // fall through to retry countdown
                    }
                }
                retries--;
                if (retries > 0) {
                    await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
                }
            }
        }
        
        if (!result || !result.success) {
            throw new Error((result?.error) || 'Notification sending failed after retries');
        }
        
        console.log('Notification sent successfully:', result.data);
        return result;
        
    } catch (error) {
        console.error('Error sending push notification:', error);
        throw error;
    }
}

// 通知タイプからテンプレートキーを取得（後方互換性のため残す）
function getTemplateKeyFromData(data) {
    // 明示指定があればそれを優先
    if (data && data.templateKey) return data.templateKey;
    const title = (data.title || '').toLowerCase();
    if (title.includes('アンケート')) return 'survey_created';
    if (title.includes('イベント') || title.includes('行事')) return 'event_reminder';
    if (title.includes('緊急') || title.includes('重要')) return 'news_published';
    return 'news_published';
}

// タイトルからカテゴリを判定
function getCategoryFromTitle(title) {
    const lowerTitle = (title || '').toLowerCase();
    if (lowerTitle.includes('緊急') || lowerTitle.includes('重要')) return 'urgent';
    if (lowerTitle.includes('アンケート')) return 'survey';
    if (lowerTitle.includes('イベント') || lowerTitle.includes('行事')) return 'event';
    if (lowerTitle.includes('お知らせ') || lowerTitle.includes('ニュース')) return 'news';
    return 'general';
}

// タイトルから優先度を判定
function getPriorityFromTitle(title) {
    const lowerTitle = (title || '').toLowerCase();
    if (lowerTitle.includes('緊急')) return 3; // 最高優先度
    if (lowerTitle.includes('重要')) return 2; // 高優先度
    return 1; // 通常優先度
}

// 通知URLを生成
function getNotificationUrl(data) {
    const type = getTemplateKeyFromData(data);
    switch (type) {
        case 'survey_created':
            return './survey.html';
        case 'event_reminder':
            return './news.html#events';
        case 'emergency_alert':
            // 重要なお知らせセクションが削除されたため、通常のニュースページに遷移
            return './news.html';
        default:
            return './news.html';
    }
}

// ターゲット条件を生成
function getTargetCriteria(target) {
    switch (target) {
        case 'students':
            return { platform: 'web' }; // 実際の運用では学生識別子を使用
        case 'teachers':
            return { platform: 'web' }; // 実際の運用では教職員識別子を使用
        case 'all':
        default:
            return {};
    }
}

// ニュース通知送信
async function sendNewsNotification(title, content) {
    const shortContent = content.length > 100 ? content.substring(0, 100) + '...' : content;
    
    return await sendPushNotification({
        title: `📢 ${title}`,
        message: shortContent,
        target: 'all'
    });
}

// データ保存処理（デモ）
async function saveNewsData(data) {
    try {
        if (!window.supabaseClient) {
            throw new Error('Supabase client not initialized');
        }
        const isEdit = !!data.id;
        const payload = {
            title: data.title,
            category: data.category,
            content: data.content,
            is_published: true,
            date: new Date().toISOString()
        };
        let result;
        if (isEdit) {
            result = await window.supabaseClient
                .from('news')
                .update(payload)
                .eq('id', data.id)
                .select();
        } else {
            result = await window.supabaseClient
                .from('news')
                .insert([payload])
                .select();
        }
        if (result.error) {
            console.error('Supabase news save error:', result.error);
            return { success: false, error: result.error.message };
        }
        return { success: true, data: result.data?.[0] || null };
    } catch (e) {
        console.error('saveNewsData error:', e);
        return { success: false, error: e.message };
    }
}

// ユーティリティ関数
function formatDate(dateString) {
    const date = new Date(dateString);
    return `${date.getFullYear()}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')}`;
}

function formatDateTime(dateString) {
    const date = new Date(dateString);
    return `${formatDate(dateString)} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
}

function formatRelativeTime(dateString) {
    const date = new Date(dateString);
    const now = new Date();
    const diffInSeconds = Math.floor((now - date) / 1000);
    
    if (diffInSeconds < 60) {
        return 'たった今';
    } else if (diffInSeconds < 3600) {
        const minutes = Math.floor(diffInSeconds / 60);
        return `${minutes}分前`;
    } else if (diffInSeconds < 86400) {
        const hours = Math.floor(diffInSeconds / 3600);
        return `${hours}時間前`;
    } else {
        const days = Math.floor(diffInSeconds / 86400);
        return `${days}日前`;
    }
}

function truncateText(text, maxLength) {
    return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

function getCategoryLabel(category) {
    const labels = {
        general: '一般',
        event: 'イベント',
        important: '重要',
        newsletter: '生徒会だより',
        recruitment: '募集',
        sports: '運動部',
        music: '音楽部',
        culture: '文化部',
        academic: '学術部'
    };
    return labels[category] || category;
}

function getStatusLabel(status) {
    const labels = {
        active: '実施中',
        closed: '終了',
        draft: '下書き',
        pending: '確認中',
        resolved: '対応済み',
        published: '公開中'
    };
    return labels[status] || status;
}

// 活動実績カテゴリ表示名
function getAchievementCategoryLabel(category) {
    const labels = {
        general: '一般',
        academic: '学習',
        cultural: '文化',
        sports: 'スポーツ',
        leadership: 'リーダーシップ',
        volunteer: 'ボランティア',
        event: 'イベント'
    };
    return labels[category] || category;
}

// 成功・エラーメッセージ表示
function showSuccessMessage(message) {
    showMessage(message, 'success');
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

function showInfoMessage(message) {
    showMessage(message, 'info');
}

function showMessage(message, type) {
    const messageEl = document.createElement('div');
    messageEl.className = `message-toast message-${type}`;
    messageEl.innerHTML = `
        <div class="message-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(messageEl);
    
    // アニメーション表示
    setTimeout(() => {
        messageEl.classList.add('show');
    }, 100);
    
    // 5秒後に自動で消す
    setTimeout(() => {
        messageEl.classList.remove('show');
        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.remove();
            }
        }, 300);
    }, 5000);
}

// 編集・削除関数（プレースホルダー）
async function editNews(id) {
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { data, error } = await window.supabaseClient
            .from('news')
            .select('*')
            .eq('id', id)
            .maybeSingle();
            
        if (error) {
            throw error;
        }
        
        if (!data) {
            showErrorMessage('お知らせが見つかりません');
            return;
        }
        
        showNewsModal(id, data);
    } catch (error) {
        console.error('Error loading news for edit:', error);
        showErrorMessage('データの読み込み中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function deleteNews(id) {
    if (!confirm('このお知らせを削除しますか？')) return;
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('news')
            .delete()
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('お知らせを削除しました');
        loadNewsData();
    } catch (error) {
        console.error('Error deleting news:', error);
        showErrorMessage('削除中にエラーが発生しました: ' + (error.message || ''));
    }
}

function showSurveyModal(id = null, surveyData = null) {
    const title = id ? 'アンケートを編集' : '新しいアンケートを作成';
    const deadlineValue = surveyData?.deadline ? new Date(surveyData.deadline).toISOString().split('T')[0] : '';
    
    const content = `
        <div class="form-group">
            <label for="survey-title">タイトル *</label>
            <input type="text" id="survey-title" class="form-control" placeholder="アンケートのタイトルを入力" value="${surveyData?.title || ''}">
        </div>
        <div class="form-group">
            <label for="survey-description">説明</label>
            <textarea id="survey-description" class="form-control" rows="3" placeholder="アンケートの説明を入力">${surveyData?.description || ''}</textarea>
        </div>
        <div class="form-group">
            <label for="survey-deadline">締切日</label>
            <input type="date" id="survey-deadline" class="form-control" value="${deadlineValue}">
        </div>
        <div class="form-group">
            <label>質問項目</label>
            <div id="survey-questions">
                <div class="question-item">
                    <input type="text" class="form-control" placeholder="質問を入力">
                    <button type="button" class="btn btn-sm btn-outline" onclick="removeQuestion(this)">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
            <button type="button" class="btn btn-sm btn-secondary" onclick="addQuestion()">
                <i class="fas fa-plus"></i> 質問を追加
            </button>
        </div>
    `;
    
    showModal(title, content, () => saveSurvey(id));
}

async function editSurvey(id) {
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { data, error } = await window.supabaseClient
            .from('surveys')
            .select('*')
            .eq('id', id)
            .maybeSingle();
            
        if (error) {
            throw error;
        }
        
        if (!data) {
            showErrorMessage('アンケートが見つかりません');
            return;
        }
        
        showSurveyModal(id, data);
    } catch (error) {
        console.error('Error loading survey for edit:', error);
        showErrorMessage('データの読み込み中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function deleteSurvey(id) {
    if (!confirm('このアンケートを削除しますか？')) return;
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('surveys')
            .delete()
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('アンケートを削除しました');
        loadSurveysData();
    } catch (error) {
        console.error('Error deleting survey:', error);
        showErrorMessage('削除中にエラーが発生しました: ' + (error.message || ''));
    }
}

function viewSurveyResults(id) {
    console.log('View survey results:', id);
}

async function saveSurvey(id = null) {
    const title = document.getElementById('survey-title').value.trim();
    const description = document.getElementById('survey-description').value.trim();
    const deadline = document.getElementById('survey-deadline').value;
    
    if (!title) {
        alert('タイトルは必須です。');
        return;
    }
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const payload = {
            title,
            description,
            deadline: deadline ? new Date(deadline).toISOString() : null,
            is_active: true,
            is_published: true,
            status: 'active'
        };
        
        let result;
        if (id) {
            result = await window.supabaseClient
                .from('surveys')
                .update(payload)
                .eq('id', id)
                .select();
        } else {
            result = await window.supabaseClient
                .from('surveys')
                .insert([payload])
                .select();
        }
        
        if (result.error) {
            throw result.error;
        }
        
        showSuccessMessage('アンケートを保存しました');
        closeModal();
        loadSurveysData();
    } catch (error) {
        console.error('Error saving survey:', error);
        showErrorMessage('保存中にエラーが発生しました: ' + (error.message || ''));
    }
}

function showClubModal(id = null, clubData = null) {
    const title = id ? '部活動を編集' : '新しい部活動を追加';
    
    const content = `
        <div class="form-group">
            <label for="club-name">部活動名 *</label>
            <input type="text" id="club-name" class="form-control" placeholder="部活動名を入力" value="${clubData?.name || ''}">
        </div>
        <div class="form-group">
            <label for="club-category">カテゴリ *</label>
            <select id="club-category" class="form-control">
                <option value="sports" ${clubData?.category === 'sports' ? 'selected' : ''}>運動部</option>
                <option value="culture" ${clubData?.category === 'culture' ? 'selected' : ''}>文化部</option>
                <option value="music" ${clubData?.category === 'music' ? 'selected' : ''}>音楽部</option>
                <option value="academic" ${clubData?.category === 'academic' ? 'selected' : ''}>学術部</option>
            </select>
        </div>
        <div class="form-group">
            <label for="club-description">説明</label>
            <textarea id="club-description" class="form-control" rows="3" placeholder="部活動の説明を入力">${clubData?.description || ''}</textarea>
        </div>
        <div class="form-row">
            <div class="form-group">
                <label for="club-members">部員数</label>
                <input type="number" id="club-members" class="form-control" placeholder="0" value="${clubData?.members || 0}">
            </div>
            <div class="form-group">
                <label for="club-schedule">活動日</label>
                <input type="text" id="club-schedule" class="form-control" placeholder="例: 月・水・金" value="${clubData?.schedule || ''}">
            </div>
        </div>
    `;
    
    showModal(title, content, () => saveClub(id));
}

async function editClub(id) {
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { data, error } = await window.supabaseClient
            .from('clubs')
            .select('*')
            .eq('id', id)
            .maybeSingle();
            
        if (error) {
            throw error;
        }
        
        if (!data) {
            showErrorMessage('部活動が見つかりません');
            return;
        }
        
        showClubModal(id, data);
    } catch (error) {
        console.error('Error loading club for edit:', error);
        showErrorMessage('データの読み込み中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function deleteClub(id) {
    if (!confirm('この部活動を削除しますか？')) return;
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('clubs')
            .delete()
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('部活動を削除しました');
        loadClubsData();
    } catch (error) {
        console.error('Error deleting club:', error);
        showErrorMessage('削除中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function saveClub(id = null) {
    const name = document.getElementById('club-name').value.trim();
    const category = document.getElementById('club-category').value;
    const description = document.getElementById('club-description').value.trim();
    const members = parseInt(document.getElementById('club-members').value) || 0;
    const schedule = document.getElementById('club-schedule').value.trim();
    
    if (!name) {
        alert('部活動名は必須です。');
        return;
    }
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const payload = {
            name,
            category,
            description,
            members,
            schedule,
            is_active: true
        };
        
        let result;
        if (id) {
            result = await window.supabaseClient
                .from('clubs')
                .update(payload)
                .eq('id', id)
                .select();
        } else {
            result = await window.supabaseClient
                .from('clubs')
                .insert([payload])
                .select();
        }
        
        if (result.error) {
            throw result.error;
        }
        
        showSuccessMessage('部活動を保存しました');
        closeModal();
        loadClubsData();
    } catch (error) {
        console.error('Error saving club:', error);
        showErrorMessage('保存中にエラーが発生しました: ' + (error.message || ''));
    }
}

function showMemberModal(id = null) {
    const title = id ? 'メンバーを編集' : '新しいメンバーを追加';
    const content = `
        <div class="form-group">
            <label for="member-name">名前 *</label>
            <input type="text" id="member-name" class="form-control" placeholder="例: 会長 山田太郎">
        </div>
        <div class="form-group">
            <label for="member-role">役職 *</label>
            <input type="text" id="member-role" class="form-control" placeholder="例: 全体統括">
        </div>
        <div class="form-group">
            <label for="member-message">メッセージ</label>
            <textarea id="member-message" class="form-control" rows="3" placeholder="メンバーからのメッセージを入力"></textarea>
        </div>
        <div class="form-group">
            <label for="member-image">プロフィール画像</label>
            <input type="file" id="member-image" class="form-control" accept="image/*">
        </div>
    `;
    
    showModal(title, content, () => saveMember(id));
}

function editMember(id) {
    showMemberModal(id);
    // 既存データを取得してフォームへ反映
    setTimeout(async () => {
        try {
            if (!window.supabaseClient) return;
            const { data, error } = await window.supabaseClient
                .from('council_members')
                .select('*')
                .eq('id', id)
                .maybeSingle();
            if (error || !data) return;
            const nameEl = document.getElementById('member-name');
            const roleEl = document.getElementById('member-role');
            const msgEl = document.getElementById('member-message');
            if (nameEl) nameEl.value = data.name || '';
            if (roleEl) roleEl.value = data.role || '';
            if (msgEl) msgEl.value = data.message || '';
        } catch (e) {
            console.warn('Failed to prefill member form', e);
        }
    }, 0);
}

function deleteMember(id) {
    if (!confirm('このメンバーを削除しますか？')) return;
    (async () => {
        try {
            if (!window.supabaseClient) throw new Error('Supabase client not initialized');
            const { error } = await window.supabaseClient
                .from('council_members')
                .delete()
                .eq('id', id);
            if (error) {
                showErrorMessage('削除に失敗しました: ' + (error.message || '')); return;
            }
            showInfoMessage('メンバーを削除しました');
            loadCouncilData();
        } catch (e) {
            console.error('Delete member error:', e);
            showErrorMessage('削除中にエラーが発生しました');
        }
    })();
}

function saveMember(id = null) {
    const nameEl = document.getElementById('member-name');
    const roleEl = document.getElementById('member-role');
    const msgEl = document.getElementById('member-message');
    const imgEl = document.getElementById('member-image');
    const name = nameEl ? nameEl.value.trim() : '';
    const role = roleEl ? roleEl.value.trim() : '';
    const message = msgEl ? msgEl.value.trim() : '';
    if (!name || !role) { alert('名前と役職は必須です。'); return; }
    (async () => {
        try {
            if (!window.supabaseClient) throw new Error('Supabase client not initialized');
            const payload = { name, role, message, is_active: true };
            let result;
            if (id) {
                result = await window.supabaseClient
                    .from('council_members')
                    .update(payload)
                    .eq('id', id)
                    .select();
            } else {
                result = await window.supabaseClient
                    .from('council_members')
                    .insert([payload])
                    .select();
            }
            if (result.error) { throw result.error; }
            showSuccessMessage('メンバー情報を保存しました');
            closeModal();
            loadCouncilData();
        } catch (e) {
            console.error('Save member error:', e);
            showErrorMessage('保存に失敗しました');
        }
    })();
}

async function viewForumPost(id) {
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { data, error } = await window.supabaseClient
            .from('posts')
            .select('*')
            .eq('id', id)
            .maybeSingle();
            
        if (error) {
            throw error;
        }
        
        if (!data) {
            showErrorMessage('投稿が見つかりません');
            return;
        }
        
        const content = `
            <div class="forum-post-view">
                <div class="post-header">
                    <h4>投稿詳細</h4>
                    <div class="post-meta">
                        <span class="post-id">ID: ${data.id}</span>
                        <span class="post-status status-${data.status}">${getStatusLabel(data.status)}</span>
                        <span class="post-date">${formatDateTime(data.created_at)}</span>
                    </div>
                </div>
                <div class="post-content">
                    <p>${data.content}</p>
                </div>
                ${data.reply ? `
                    <div class="post-reply">
                        <h5>管理者からの返信</h5>
                        <p>${data.reply}</p>
                        <small>返信日時: ${formatDateTime(data.replied_at)}</small>
                    </div>
                ` : ''}
                <div class="post-actions">
                    <button class="btn btn-primary" onclick="approvePost('${id}')">
                        <i class="fas fa-check"></i> 承認
                    </button>
                    <button class="btn btn-danger" onclick="rejectPost('${id}')">
                        <i class="fas fa-times"></i> 却下
                    </button>
                    <button class="btn btn-secondary" onclick="replyToPost('${id}')">
                        <i class="fas fa-reply"></i> 返信
                    </button>
                </div>
            </div>
        `;
        
        showModal('投稿詳細', content);
    } catch (error) {
        console.error('Error viewing forum post:', error);
        showErrorMessage('データの読み込み中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function replyToPost(id) {
    const reply = prompt('返信内容を入力してください:');
    if (!reply || !reply.trim()) return;
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('posts')
            .update({
                reply: reply.trim(),
                replied_at: new Date().toISOString(),
                status: 'resolved'
            })
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('返信を送信しました');
        loadForumData();
    } catch (error) {
        console.error('Error replying to post:', error);
        showErrorMessage('返信中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function approvePost(id) {
    if (!confirm('この投稿を承認しますか？')) return;
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('posts')
            .update({ status: 'approved' })
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('投稿を承認しました');
        loadForumData();
    } catch (error) {
        console.error('Error approving post:', error);
        showErrorMessage('承認中にエラーが発生しました: ' + (error.message || ''));
    }
}

async function rejectPost(id) {
    const reason = prompt('却下理由を入力してください（任意）:');
    
    try {
        if (!window.supabaseClient) {
            throw new Error('データベースに接続できません');
        }
        
        const { error } = await window.supabaseClient
            .from('posts')
            .update({ 
                status: 'rejected',
                reply: reason ? `却下理由: ${reason}` : '管理者により却下されました'
            })
            .eq('id', id);
            
        if (error) {
            throw error;
        }
        
        showSuccessMessage('投稿を却下しました');
        loadForumData();
    } catch (error) {
        console.error('Error rejecting post:', error);
        showErrorMessage('却下中にエラーが発生しました: ' + (error.message || ''));
    }
}

// 質問項目の追加・削除（アンケート用）
function addQuestion() {
    const questionsContainer = document.getElementById('survey-questions');
    const questionItem = document.createElement('div');
    questionItem.className = 'question-item';
    questionItem.innerHTML = `
        <input type="text" class="form-control" placeholder="質問を入力">
        <button type="button" class="btn btn-sm btn-outline" onclick="removeQuestion(this)">
            <i class="fas fa-trash"></i>
        </button>
    `;
    questionsContainer.appendChild(questionItem);
}

function removeQuestion(button) {
    button.parentElement.remove();
}

// ハンバーガーメニューの初期化
function initializeHamburgerMenu() {
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const adminSidebar = document.getElementById('admin-sidebar');
    const adminSidebarClose = document.getElementById('admin-sidebar-close');
    const mainOverlay = document.getElementById('main-overlay');
    
    if (hamburgerMenu) {
        hamburgerMenu.addEventListener('click', function() {
            toggleAdminSidebar();
        });
    }
    
    if (adminSidebarClose) {
        adminSidebarClose.addEventListener('click', function() {
            closeAdminSidebar();
        });
    }
    
    if (mainOverlay) {
        mainOverlay.addEventListener('click', function() {
            closeAdminSidebar();
        });
    }
    
    // ESCキーでサイドバーを閉じる
    document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
            closeAdminSidebar();
        }
    });
}

// 管理画面サイドバーの開閉
function toggleAdminSidebar() {
    const adminSidebar = document.getElementById('admin-sidebar');
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const mainOverlay = document.getElementById('main-overlay');
    
    if (adminSidebar && hamburgerMenu) {
        const isOpen = adminSidebar.classList.contains('active');
        
        if (isOpen) {
            closeAdminSidebar();
        } else {
            openAdminSidebar();
        }
    }
}

function openAdminSidebar() {
    const adminSidebar = document.getElementById('admin-sidebar');
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const mainOverlay = document.getElementById('main-overlay');
    
    if (adminSidebar) adminSidebar.classList.add('active');
    if (hamburgerMenu) hamburgerMenu.classList.add('active');
    if (mainOverlay) mainOverlay.classList.add('active');
    
    document.body.style.overflow = 'hidden';
}

function closeAdminSidebar() {
    const adminSidebar = document.getElementById('admin-sidebar');
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const mainOverlay = document.getElementById('main-overlay');
    
    if (adminSidebar) adminSidebar.classList.remove('active');
    if (hamburgerMenu) hamburgerMenu.classList.remove('active');
    if (mainOverlay) mainOverlay.classList.remove('active');
    
    document.body.style.overflow = '';
}

// セキュリティ監視システム
let securityInterval = null;
let inactivityTimer = null;
const INACTIVITY_TIMEOUT = 30 * 60 * 1000; // 30分

function startSecurityMonitoring() {
    // 非アクティブタイマー開始
    resetInactivityTimer();
    
    // 開発者ツール検知
    securityInterval = setInterval(() => {
        // 開発者ツールが開かれているかチェック（デバッグモードでは無効化）
        if (!CONFIG.APP.DEBUG) {
            const threshold = 200; // しきい値を上げて誤検知を減らす
            if (window.outerHeight - window.innerHeight > threshold || 
                window.outerWidth - window.innerWidth > threshold) {
                console.warn('Developer tools detected - logging out for security');
                handleLogout();
            }
        }
    }, 2000); // チェック間隔を長くして負荷を軽減
    
    // ユーザーアクティビティ監視
    ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => {
        document.addEventListener(event, resetInactivityTimer, true);
    });
}

function stopSecurityMonitoring() {
    if (securityInterval) {
        clearInterval(securityInterval);
        securityInterval = null;
    }
    
    if (inactivityTimer) {
        clearTimeout(inactivityTimer);
        inactivityTimer = null;
    }
}

function resetInactivityTimer() {
    if (inactivityTimer) {
        clearTimeout(inactivityTimer);
    }
    
    inactivityTimer = setTimeout(() => {
        alert('セキュリティのため、非アクティブによりログアウトします。');
        handleLogout();
    }, INACTIVITY_TIMEOUT);
}

// セキュリティ強化：重要な関数を保護（performLoginは内部関数のため除外）
// Object.defineProperty(window, 'performLogin', {
//     value: undefined,
//     writable: false,
//     configurable: false
// });

// showAdminPanelは内部関数のため、セキュリティ保護から除外
// Object.defineProperty(window, 'showAdminPanel', {
//     value: undefined,
//     writable: false,
//     configurable: false
// });

// デバッグ用関数（セキュリティ強化版）
if (CONFIG.APP.DEBUG) {
    // デバッグモードでも認証バイパス機能は提供しない
    window.adminDebug = {
        logout: handleLogout,
        switchSection: switchSection,
        clearAuth: clearAuthData,
        // 以前のコードとの後方互換のためのエイリアス
        toggleSidebar: toggleAdminSidebar,
        openSidebar: openAdminSidebar,
        closeSidebar: closeAdminSidebar,
        // login機能は削除（セキュリティのため）
        // 活動実績管理機能
        loadAchievementsData,
        showAchievementModal,
        clearAchievementFilters,
        // サイドバー管理機能
        toggleAdminSidebar,
        openAdminSidebar,
        closeAdminSidebar
    };
    console.log('Admin debug functions available (login disabled for security)');
}

// ========================================
// 活動実績管理機能
// ========================================

// 活動実績データ読み込み
async function loadAchievementsData() {
    const tableBody = document.getElementById('achievements-table-body');
    if (!tableBody) return;
    
    try {
        // 活動実績を取得
        const membersResult = await supabaseQueries.getCouncilMembers();
        const members = membersResult.data || [];
        
        // 全てのメンバーの活動実績を取得
        let achievements = [];

        for (const member of members) {
            try {
                const achievementsResult = await supabaseQueries.getMemberAchievements(member.id, {
                    includePublicOnly: false // 管理者は全ての実績を表示
                });
                
                if (achievementsResult.data && achievementsResult.data.length > 0) {
                    achievements = achievements.concat(achievementsResult.data.map(achievement => ({
                        ...achievement,
                        memberName: member.name,
                        memberRole: member.role
                    })));
                }
            } catch (error) {
                console.warn(`Failed to load achievements for member ${member.id}:`, error);
                // テーブルが存在しない場合は空の配列で続行
            }
        }

        // フィルター適用
        const filteredAchievements = applyAchievementFilters(achievements);
        
        // UI更新
        updateAchievementsTable(filteredAchievements);
        updateMemberFilter(members);
        
    } catch (error) {
        console.error('活動実績データの読み込みエラー:', error);
        tableBody.innerHTML = '<tr><td colspan="7">データの読み込みに失敗しました。member_achievementsテーブルが存在しない可能性があります。</td></tr>';
    }
}

// 活動実績テーブル更新
function updateAchievementsTable(achievements) {
    const tableBody = document.getElementById('achievements-table-body');
    if (!tableBody) return;
    
    if (!achievements || achievements.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7">活動実績がありません</td></tr>';
        return;
    }
    
    tableBody.innerHTML = achievements.map(achievement => `
        <tr>
            <td>
                <div class="member-name">${achievement.memberName}</div>
                <div class="member-role">${achievement.memberRole}</div>
            </td>
            <td>
                <span class="date-badge">${achievement.year}年${achievement.month}月</span>
            </td>
            <td>
                <div class="achievement-title">${achievement.title}</div>
            </td>
            <td>
                <span class="achievement-category category-${achievement.category}">
                    ${getAchievementCategoryLabel(achievement.category)}
                </span>
            </td>
            <td>
                <div class="achievement-description">${achievement.description || ''}</div>
            </td>
            <td>
                <span class="public-status ${achievement.isPublic ? 'public' : 'private'}">
                    <i class="fas fa-${achievement.isPublic ? 'eye' : 'eye-slash'}"></i>
                    ${achievement.isPublic ? '公開' : '非公開'}
                </span>
            </td>
            <td>
                <div class="action-buttons">
                    <button class="btn btn-sm btn-outline" onclick="editAchievement(${achievement.id})">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="deleteAchievement(${achievement.id})">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </td>
        </tr>
    `).join('');
}

// メンバーフィルター更新
function updateMemberFilter(members) {
    const memberFilter = document.getElementById('member-filter');
    if (!memberFilter) return;
    
    memberFilter.innerHTML = `
        <option value="">すべてのメンバー</option>
        ${members.map(member => `
            <option value="${member.id}">${member.name} (${member.role})</option>
        `).join('')}
    `;
}

// フィルター適用
function applyAchievementFilters(achievements) {
    const yearFilter = document.getElementById('achievement-year-filter')?.value;
    const monthFilter = document.getElementById('achievement-month-filter')?.value;
    const categoryFilter = document.getElementById('achievement-category-filter')?.value;
    const memberFilter = document.getElementById('member-filter')?.value;
    
    return achievements.filter(achievement => {
        if (yearFilter && achievement.year != yearFilter) return false;
        if (monthFilter && achievement.month != monthFilter) return false;
        if (categoryFilter && achievement.category !== categoryFilter) return false;
        if (memberFilter && achievement.memberId != memberFilter) return false;
        return true;
    });
}

// 活動実績編集モーダル表示
function showAchievementModal(achievementId = null) {
    const title = achievementId ? '活動実績編集' : '活動実績追加';
    const content = `
        <form id="achievement-form">
            <input type="hidden" id="form-mode" value="${achievementId ? 'edit' : 'create'}">
            <input type="hidden" id="form-id" value="${achievementId || ''}">
            <div class="form-group">
                <label for="achievement-member">メンバー <span class="required">*</span></label>
                <select id="achievement-member" class="form-control" required>
                    <option value="">メンバーを選択</option>
                </select>
            </div>
            <div class="form-row">
                <div class="form-group">
                    <label for="achievement-year">年 <span class="required">*</span></label>
                    <select id="achievement-year" class="form-control" required>
                        <option value="">年を選択</option>
                        <option value="2024">2024年</option>
                        <option value="2025">2025年</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="achievement-month">月 <span class="required">*</span></label>
                    <select id="achievement-month" class="form-control" required>
                        <option value="">月を選択</option>
                        <option value="1">1月</option>
                        <option value="2">2月</option>
                        <option value="3">3月</option>
                        <option value="4">4月</option>
                        <option value="5">5月</option>
                        <option value="6">6月</option>
                        <option value="7">7月</option>
                        <option value="8">8月</option>
                        <option value="9">9月</option>
                        <option value="10">10月</option>
                        <option value="11">11月</option>
                        <option value="12">12月</option>
                    </select>
                </div>
            </div>
            <div class="form-group">
                <label for="achievement-title">タイトル <span class="required">*</span></label>
                <input type="text" id="achievement-title" class="form-control" required maxlength="200">
            </div>
            <div class="form-group">
                <label for="achievement-description">詳細</label>
                <textarea id="achievement-description" class="form-control" rows="3" maxlength="1000"></textarea>
            </div>
            <div class="form-group">
                <label for="achievement-category">カテゴリ</label>
                <select id="achievement-category" class="form-control">
                    <option value="general">一般</option>
                    <option value="academic">学習</option>
                    <option value="cultural">文化</option>
                    <option value="sports">スポーツ</option>
                    <option value="leadership">リーダーシップ</option>
                    <option value="volunteer">ボランティア</option>
                    <option value="event">イベント</option>
                </select>
            </div>
            <div class="form-group">
                <label for="achievement-priority">表示優先度</label>
                <input type="number" id="achievement-priority" class="form-control" min="0" max="100" value="0">
            </div>
            <div class="form-group">
                <label class="checkbox-label">
                    <input type="checkbox" id="achievement-public" ${achievementId ? '' : 'checked'}>
                    <span class="checkmark"></span>
                    公開する
                </label>
            </div>
        </form>
    `;
    
    const onSave = async () => {
        try {
            if (!window.supabaseQueries) { showErrorMessage('データベース未接続です'); return; }
            const memberId = parseInt(document.getElementById('achievement-member').value, 10);
            const year = parseInt(document.getElementById('achievement-year').value, 10);
            const month = parseInt(document.getElementById('achievement-month').value, 10);
            const title = document.getElementById('achievement-title').value.trim();
            const description = document.getElementById('achievement-description').value.trim();
            const category = document.getElementById('achievement-category').value;
            const priority = parseInt(document.getElementById('achievement-priority').value || '0', 10);
            const isPublic = !!document.getElementById('achievement-public').checked;
            if (!memberId || !year || !month || !title) { showErrorMessage('必須項目を入力してください'); return; }
            const mode = document.getElementById('form-mode').value;
            if (mode === 'edit') {
                const id = parseInt(document.getElementById('form-id').value, 10);
                const result = await supabaseQueries.updateMemberAchievement(id, { year, month, title, description, category, priority, isPublic });
                if (result && !result.error) { showSuccessMessage('活動実績を更新しました'); closeModal(); loadAchievementsData(); }
                else { showErrorMessage('更新に失敗しました'); }
            } else {
                const result = await supabaseQueries.createMemberAchievement({ memberId, year, month, title, description, category, priority, isPublic });
                if (result && !result.error) { showSuccessMessage('活動実績を追加しました'); closeModal(); loadAchievementsData(); }
                else { showErrorMessage('追加に失敗しました'); }
            }
        } catch (e) {
            console.error('Achievement save error:', e);
            showErrorMessage('保存中にエラーが発生しました');
        }
    };
    
    showModal(title, content, onSave);
    
    // メンバー選択肢を設定し、編集時はフォーム初期化
    setTimeout(async () => {
        await populateMemberSelect();
        if (achievementId) {
            setAchievementFormData(achievementId);
        }
    }, 0);
}

// メンバー選択肢設定
async function populateMemberSelect() {
    const memberSelect = document.getElementById('achievement-member');
    if (!memberSelect) return;
    
    try {
        const result = await supabaseQueries.getCouncilMembers();
        const members = result.data || [];
        
        memberSelect.innerHTML = '<option value="">メンバーを選択</option>' +
            members.map(member => `
                <option value="${member.id}">${member.name} (${member.role})</option>
            `).join('');
    } catch (error) {
        console.error('メンバー一覧の取得エラー:', error);
    }
}

// 実績フォームデータ設定（編集時）
async function setAchievementFormData(achievementId) {
    try {
        // 実績データを取得してフォームに設定
        // 注意: SupabaseQueriesには単一実績取得メソッドがないため、全データから検索
        // 実際の実装では、getMemberAchievement(id) メソッドを追加することが推奨
        
        document.getElementById('form-mode').value = 'edit';
        document.getElementById('form-id').value = achievementId;
    } catch (error) {
        console.error('実績データの取得エラー:', error);
    }
}

// フィルタークリア
function clearAchievementFilters() {
    document.getElementById('achievement-year-filter').value = '';
    document.getElementById('achievement-month-filter').value = '';
    document.getElementById('achievement-category-filter').value = '';
    document.getElementById('member-filter').value = '';
    
    // データ再読み込み
    loadAchievementsData();
}

// 活動実績編集
function editAchievement(achievementId) {
    showAchievementModal(achievementId);
}

// 活動実績削除
async function deleteAchievement(achievementId) {
    if (!confirm('この活動実績を削除してもよろしいですか？')) return;
    
    try {
        const result = await supabaseQueries.deleteMemberAchievement(achievementId);
        
        if (result.error) {
            showErrorMessage('削除に失敗しました: ' + result.error.message);
        } else {
            showInfoMessage('活動実績を削除しました');
            loadAchievementsData();
        }
    } catch (error) {
        console.error('実績削除エラー:', error);
        showErrorMessage('削除中にエラーが発生しました');
    }
}


[js/app.js]
// Supabaseクライアント
let supabaseClient = null;
let supabaseQueries = null;

// Supabaseクライアントを初期化
function initSupabase() {
    if (typeof supabase !== 'undefined' && 
        CONFIG.SUPABASE.URL && 
        CONFIG.SUPABASE.ANON_KEY &&
        CONFIG.SUPABASE.URL !== 'YOUR_SUPABASE_URL_HERE' &&
        CONFIG.SUPABASE.ANON_KEY !== 'YOUR_SUPABASE_ANON_KEY_HERE') {
        
        try {
            supabaseClient = supabase.createClient(CONFIG.SUPABASE.URL, CONFIG.SUPABASE.ANON_KEY);
            window.supabaseClient = supabaseClient; // グローバルに公開
            if (typeof SupabaseQueries === 'undefined') {
                throw new Error('SupabaseQueries class not available');
            }
            supabaseQueries = new SupabaseQueries(supabaseClient);
            window.supabaseQueries = supabaseQueries; // グローバルに公開
            console.log('Supabase client and queries initialized successfully');
        } catch (error) {
            console.error('Failed to initialize Supabase client:', error);
            console.log('Continuing with demo mode...');
            supabaseClient = null;
            supabaseQueries = null;
            window.supabaseClient = null;
            window.supabaseQueries = null;
        }
    } else {
        console.warn('Supabase not available or not configured properly');
        console.log('Using demo mode with fallback data');
        supabaseClient = null;
        supabaseQueries = null;
        window.supabaseClient = null;
        window.supabaseQueries = null;
    }
}

// JSONP用のグローバルコールバック関数を格納するオブジェクト
window.gasCallbacks = {};

// APIクライアントクラス
class APIClient {
    constructor() {
        this.baseURL = CONFIG.GAS_URL;
        this.cache = new Map();
        this.requestQueue = [];
        this.isOnline = navigator.onLine;
        
        // オンライン/オフライン状態の監視
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.processQueue();
        });
        
        window.addEventListener('offline', () => {
            this.isOnline = false;
        });
    }

// JSONP リクエストを送信する関数
    sendRequest(action, params = {}, options = {}) {
        return new Promise((resolve, reject) => {
            // オフライン時の処理
            if (!this.isOnline && !options.allowOffline) {
                this.requestQueue.push({ action, params, resolve, reject });
                reject(new Error(CONFIG.MESSAGES.INFO.OFFLINE));
                return;
            }
            
            // キャッシュチェック
            const cacheKey = `${action}_${JSON.stringify(params)}`;
            if (options.useCache && this.cache.has(cacheKey)) {
                const cached = this.cache.get(cacheKey);
                if (Date.now() - cached.timestamp < CONFIG.APP.CACHE_DURATION) {
                    resolve(cached.data);
                    return;
                }
            }
            
    const callbackName = 'callback_' + Date.now() + '_' + Math.random().toString(36).substr(2);
            
            // タイムアウト設定
            const timeout = setTimeout(() => {
                this.cleanup(callbackName);
                reject(new Error(CONFIG.MESSAGES.ERROR.NETWORK));
            }, options.timeout || 10000);
    
    // グローバルコールバック関数を設定
            window.gasCallbacks[callbackName] = (data) => {
                clearTimeout(timeout);
                
                if (data.success) {
                    // キャッシュに保存
                    if (options.useCache) {
                        this.cache.set(cacheKey, {
                            data: data,
                            timestamp: Date.now()
                        });
                    }
                    resolve(data);
                } else {
                    reject(new Error(data.error || CONFIG.MESSAGES.ERROR.SERVER));
                }
                
                this.cleanup(callbackName);
    };
    
    // パラメータをURLエンコード
    const queryParams = new URLSearchParams({
        action: action,
        callback: 'gasCallbacks.' + callbackName,
                timestamp: Date.now(),
        ...params
    });
    
    // scriptタグを動的に生成
    const script = document.createElement('script');
    script.id = 'jsonp_' + callbackName;
            script.src = `${this.baseURL}?${queryParams}`;
            script.onerror = () => {
                clearTimeout(timeout);
                this.cleanup(callbackName);
                reject(new Error(CONFIG.MESSAGES.ERROR.NETWORK));
            };
            
    document.head.appendChild(script);
        });
    }
    
    // クリーンアップ処理
    cleanup(callbackName) {
        delete window.gasCallbacks[callbackName];
        const script = document.getElementById('jsonp_' + callbackName);
        if (script) {
            script.remove();
        }
    }
    
    // キューに溜まったリクエストを処理
    processQueue() {
        while (this.requestQueue.length > 0) {
            const request = this.requestQueue.shift();
            this.sendRequest(request.action, request.params)
                .then(request.resolve)
                .catch(request.reject);
        }
    }
    
    // キャッシュクリア
    clearCache() {
        this.cache.clear();
    }
}

// APIクライアントのインスタンスを作成
const apiClient = new APIClient();

// 便利な関数（後方互換性のため）
function sendJsonpRequest(action, params = {}, callback) {
    apiClient.sendRequest(action, params, { useCache: true })
        .then(callback)
        .catch(error => {
            console.error('API Error:', error);
            callback({ success: false, error: error.message });
        });
}

// ページ初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM loaded, initializing...');
    
    // セッションごとにオープニング画面を表示
    const shouldShowOpening = checkAndMarkSessionVisit();
    if (shouldShowOpening) {
        console.log('New session detected, showing opening screen');
        document.body.classList.add('opening-active');
        showOpeningScreen();
    }
    
    // Supabaseを初期化
    initSupabase();
    
    // 基本機能を初期化
    initNavigation();
    initSidebar();
    initPWA();
    
    // ページ別の初期化
    const currentPage = getCurrentPage();
    console.log('Current page:', currentPage);

    // ページ公開フラグを確認
    if (CONFIG?.APP?.PAGES && CONFIG.APP.PAGES[currentPage] === false) {
        alert('このページは現在準備中です。');
        window.location.href = '404.html?from=' + encodeURIComponent(currentPage);
        return;
    }
    
    // 最小5秒間はオープニング画面を表示
    const startTime = Date.now();
    const minDisplayTime = 5000; // 5秒
    
    const initializeContent = async () => {
        try {
            switch(currentPage) {
                case 'index':
                    await initHomePage();
                    break;
                case 'council':
                    await loadCouncilMembers();
                    break;
                case 'clubs':
                    await loadClubs();
                    initClubsFilter();
                    break;
                case 'forum':
                    await initForum();
                    break;
                case 'news':
                    await loadNews();
                    initNewsFilter();
                    initNotifications();
                    break;
                case 'survey':
                    await loadSurveys();
                    initSurveyForm();
                    break;
            }
        } catch (error) {
            console.error('Error during content initialization:', error);
        }
        
        // オープニング画面を表示した場合のみ隠す
        if (shouldShowOpening) {
            const elapsedTime = Date.now() - startTime;
            const remainingTime = Math.max(minDisplayTime - elapsedTime, 0);
            
            console.log(`Elapsed time: ${elapsedTime}ms, remaining time: ${remainingTime}ms`);
            
            setTimeout(() => {
                console.log('Hiding opening screen...');
                hideOpeningScreen();
            }, remainingTime);
        }
    };
    
    // オープニング画面を表示しない場合は直接ページエントリーアニメーションを実行
    if (!shouldShowOpening) {
        document.body.classList.add('page-enter');
        requestAnimationFrame(() => {
            document.body.classList.add('page-enter-active');
            // コンテンツの初期化を開始
            initializeContent();
        });
    } else {
        // オープニング画面を表示する場合は、コンテンツの初期化のみ実行
        initializeContent();
    }
    
    // フォールバック：オープニング画面を表示した場合のみ10秒後に強制的に閉じる
    if (shouldShowOpening) {
        setTimeout(() => {
            const openingScreen = document.getElementById('opening-screen');
            if (openingScreen) {
                console.log('Force hiding opening screen after 10 seconds');
                hideOpeningScreen();
            }
        }, 10000);
    }
});

// セッションごとのアクセスをチェックして記録
function checkAndMarkSessionVisit() {
    const SESSION_KEY = 'nazuna-portal-session';
    const OPENING_SHOWN_KEY = 'nazuna-portal-opening-shown';
    
    // セッション開始時刻を取得または設定
    let sessionStart = sessionStorage.getItem(SESSION_KEY);
    if (!sessionStart) {
        sessionStart = Date.now().toString();
        sessionStorage.setItem(SESSION_KEY, sessionStart);
        console.log('New session started');
        
        // 新しいセッション: この1回だけ表示し、以後のページでは表示しない
        sessionStorage.setItem(OPENING_SHOWN_KEY, 'true');
        return true;
    }
    
    // 同一セッション内でオープニングが既に表示されたかチェック
    const openingShown = sessionStorage.getItem(OPENING_SHOWN_KEY);
    if (!openingShown) {
        sessionStorage.setItem(OPENING_SHOWN_KEY, 'true');
        console.log('First page load in this session');
        return true;
    }
    
    console.log('Opening already shown in this session');
    return false;
}

// 初回アクセスかチェックして記録（後方互換性のため保持）
function checkAndMarkFirstVisit() {
    const FIRST_VISIT_KEY = 'nazuna-portal-first-visit';
    const isFirstVisit = !localStorage.getItem(FIRST_VISIT_KEY);
    
    if (isFirstVisit) {
        localStorage.setItem(FIRST_VISIT_KEY, Date.now().toString());
        console.log('Marking first visit');
    } else {
        console.log('Returning visitor');
    }
    
    return isFirstVisit;
}

// セッション状態をリセット（デバッグ用）
function resetSession() {
    sessionStorage.removeItem('nazuna-portal-session');
    sessionStorage.removeItem('nazuna-portal-opening-shown');
    console.log('Session reset - opening will show on next page load');
}

// 初回アクセス状態をリセット（デバッグ用）
function resetFirstVisit() {
    localStorage.removeItem('nazuna-portal-first-visit');
    console.log('First visit status reset');
}

// 現在のページを取得
function getCurrentPage() {
    const path = window.location.pathname;
    const filename = path.split('/').pop() || 'index.html';
    return filename.replace('.html', '') || 'index';
}

// ナビゲーション初期化
function initNavigation() {
    // ページ内リンクのスムーススクロール
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            const href = this.getAttribute('href');
            
            // 空のhrefや単純な#の場合はスキップ
            if (!href || href === '#' || href.length <= 1) {
                return;
            }
            
            e.preventDefault();
            
            try {
                const target = document.querySelector(href);
                if (target) {
                    target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    closeSidebar(); // サイドバーが開いている場合は閉じる
                }
            } catch (error) {
                console.warn('Invalid selector for smooth scroll:', href);
            }
        });
    });
    
    console.log('Navigation initialized - using sidebar navigation');
}

// サイドバー初期化
function initSidebar() {
    const hamburger = document.querySelector('.hamburger');
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    
    // ハンバーガーメニューをクリックしてサイドバーを開閉
    hamburger?.addEventListener('click', (e) => {
        e.stopPropagation();
        toggleSidebar();
    });
    
    // オーバーレイをクリックしてサイドバーを閉じる
    overlay?.addEventListener('click', () => {
        closeSidebar();
    });
    
    // サイドバー内のリンクをクリックしたらサイドバーを閉じて画面遷移
    document.querySelectorAll('.sidebar-nav a').forEach(link => {
        link.addEventListener('click', (e) => {
            e.preventDefault();
            const href = link.getAttribute('href');
            // ページトランジション: フェードアウト → 遷移
            document.body.classList.add('page-exit');
            closeSidebar();
            setTimeout(() => { window.location.href = href; }, 220);
        });
    });

    // スマホ用の閉じるボタン
    const sidebarCloseBtn = document.querySelector('#sidebar-close-btn');
    sidebarCloseBtn?.addEventListener('click', (e) => {
        e.stopPropagation();
        closeSidebar();
    });
    
    // ESCキーでサイドバーを閉じる
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && sidebar?.classList.contains('active')) {
            closeSidebar();
        }
    });
}

// サイドバーを開閉
function toggleSidebar() {
    const hamburger = document.querySelector('.hamburger');
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    
    const isActive = sidebar?.classList.contains('active');
    
    hamburger?.classList.toggle('active');
    sidebar?.classList.toggle('active');
    overlay?.classList.toggle('active');
    
    // ハンバーガーボタンの位置制御用クラス
    if (!isActive) {
        document.body.classList.add('sidebar-open');
    } else {
        document.body.classList.remove('sidebar-open');
    }
    
    // アクセシビリティ属性を更新
    if (hamburger) {
        const newExpanded = !isActive;
        hamburger.setAttribute('aria-expanded', newExpanded.toString());
        hamburger.setAttribute('aria-label', newExpanded ? 'メニューを閉じる' : 'メニューを開く');
    }
    
    // ボディのスクロールを制御
    if (!isActive) {
        document.body.style.overflow = 'hidden';
    } else {
        document.body.style.overflow = '';
    }
}

// サイドバーを閉じる
function closeSidebar() {
    const hamburger = document.querySelector('.hamburger');
    const sidebar = document.querySelector('.sidebar');
    const overlay = document.querySelector('.sidebar-overlay');
    
    hamburger?.classList.remove('active');
    sidebar?.classList.remove('active');
    overlay?.classList.remove('active');
    document.body.classList.remove('sidebar-open');
    document.body.style.overflow = '';
}

// 画像のプリロード
function preloadImage(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => resolve(img);
        img.onerror = () => reject(new Error(`Failed to load image: ${url}`));
        img.src = url;
    });
}

// オープニング画面を表示
async function showOpeningScreen() {
    console.log('Showing opening screen...');
    
    // 既存のオープニング画面があれば削除
    const existing = document.getElementById('opening-screen');
    if (existing) {
        existing.remove();
    }
    
    // 画像をプリロード
    const iconUrl = 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon.png';
    let imageLoaded = false;
    
    try {
        await preloadImage(iconUrl);
        imageLoaded = true;
        console.log('Opening image preloaded successfully');
    } catch (error) {
        console.warn('Failed to preload opening image:', error);
    }
    
    const openingHTML = `
        <div class="opening-screen" id="opening-screen">
            <div class="opening-particles">
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
                <div class="opening-particle"></div>
            </div>
            <div class="opening-logo">
                <img src="${iconUrl}" alt="なずなポータル" class="opening-logo-img" style="opacity: ${imageLoaded ? '1' : '0'}; transition: opacity 0.5s ease-in-out;">
            </div>
            <h1 class="opening-title" data-text="なずなポータル">なずなポータル</h1>
            <p class="opening-subtitle">みんなでつくる学校生活</p>
            <div class="opening-loader"></div>
            <div class="opening-progress">
                <div class="opening-progress-bar"></div>
            </div>
            <div class="opening-loading-text">読み込み中...</div>
        </div>
    `;
    
    document.body.insertAdjacentHTML('afterbegin', openingHTML);
    console.log('Opening screen added to DOM');
    
    // 画像がまだ読み込まれていない場合は、読み込み完了後に表示
    if (!imageLoaded) {
        const img = document.querySelector('.opening-logo-img');
        if (img) {
            img.onload = () => {
                img.style.opacity = '1';
                console.log('Opening image loaded and displayed');
            };
            img.onerror = () => {
                console.error('Failed to load opening image');
                img.style.opacity = '1'; // エラーでも表示する
            };
        }
    }
    
    // デバッグ用：オープニング画面をクリックで閉じる
    const openingScreen = document.getElementById('opening-screen');
    if (openingScreen && CONFIG.APP.DEBUG) {
        openingScreen.style.cursor = 'pointer';
        openingScreen.addEventListener('click', () => {
            console.log('Opening screen clicked (debug mode)');
            hideOpeningScreen();
        });
    }
}

// オープニング画面を隠す
function hideOpeningScreen() {
    console.log('Attempting to hide opening screen...');
    const openingScreen = document.getElementById('opening-screen');
    
    if (openingScreen) {
        console.log('Opening screen found, adding fade-out class');
        openingScreen.classList.add('fade-out');
        
        // ページエントリーアニメーションを開始
        document.body.classList.add('page-enter');
        requestAnimationFrame(() => {
            document.body.classList.add('page-enter-active');
            
            // メインコンテンツの表示を少し遅らせる
            setTimeout(() => {
                const main = document.querySelector('main');
                if (main) {
                    main.classList.add('page-ready');
                }
            }, 200);
        });
        
        setTimeout(() => {
            if (openingScreen.parentNode) {
                openingScreen.remove();
                document.body.classList.remove('opening-active');
                console.log('Opening screen removed from DOM');
            }
        }, 800); // フェードアウト時間に合わせて調整
    } else {
        console.log('Opening screen not found in DOM');
    }
}

// データキャッシュ
const dataCache = {
    councilMembers: null,
    lastFetch: null,
    cacheDuration: 5 * 60 * 1000 // 5分
};

// キャッシュからデータを取得
function getCachedCouncilMembers() {
    if (!dataCache.councilMembers || !dataCache.lastFetch) {
        return null;
    }
    
    const now = Date.now();
    if (now - dataCache.lastFetch > dataCache.cacheDuration) {
        // キャッシュ期限切れ
        dataCache.councilMembers = null;
        dataCache.lastFetch = null;
        return null;
    }
    
    return dataCache.councilMembers;
}

// データをキャッシュに保存
function setCachedCouncilMembers(data) {
    dataCache.councilMembers = data;
    dataCache.lastFetch = Date.now();
}

// グローバルに公開（member-detail.jsからアクセス可能にする）
window.getCachedCouncilMembers = getCachedCouncilMembers;
window.setCachedCouncilMembers = setCachedCouncilMembers;

// 生徒会メンバー読み込み
async function loadCouncilMembers() {
    const container = document.querySelector('.council-members');
    if (!container) return;
    
    // ローディング表示
    container.innerHTML = `
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>生徒会メンバー情報を読み込み中...</p>
        </div>
    `;
    
    const renderMember = (member) => `
        <div class="member-card clickable" data-member-id="${member.id}" tabindex="0" role="button" aria-label="${member.name}の詳細を見る">
            <div class="member-image" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); height: 150px; border-radius: 50%; width: 150px; margin: 0 auto 1rem;"></div>
            <h3>${member.name}</h3>
            <p class="member-role">${member.role}</p>
            <p class="member-message">"${member.message || 'よろしくお願いします'}"</p>
            <div class="member-card-overlay">
                <i class="fas fa-eye"></i>
                <span>詳細を見る</span>
            </div>
        </div>
    `;
    
    try {
        // まずキャッシュをチェック
        const cachedData = getCachedCouncilMembers();
        if (cachedData) {
            console.log('Using cached council members data');
            container.innerHTML = cachedData.map(renderMember).join('');
            makeCouncilMembersClickable();
            showInfoMessage('キャッシュされたデータを表示しています。');
            return;
        }
        
        if (supabaseQueries) {
            console.log('Loading council members from Supabase...');
            const { data, error } = await supabaseQueries.getCouncilMembers({ activeOnly: true });
            
            if (error) {
                console.error('Supabase error loading council members:', error);
                console.log('Error details:', JSON.stringify(error));
                
                // エラーの詳細をチェック
                const errorMsg = error.message || error.details || error.hint || '不明なエラー';
                const isRLSError = errorMsg.includes('policy') || errorMsg.includes('RLS') || errorMsg.includes('permission');
                
                if (isRLSError) {
                    container.innerHTML = `
                        <div class="no-data-message">
                            <div class="no-data-icon">
                                <i class="fas fa-lock"></i>
                            </div>
                            <h3>アクセス権限エラー</h3>
                            <p>データベースのアクセス権限に問題があります。管理者にお問い合わせください。</p>
                            <details>
                                <summary>技術詳細</summary>
                                <pre>Error: ${JSON.stringify(error, null, 2)}</pre>
                            </details>
                            <button class="btn btn-primary" onclick="loadCouncilMembers()">
                                <i class="fas fa-refresh"></i>
                                再試行
                            </button>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div class="no-data-message">
                            <div class="no-data-icon">
                                <i class="fas fa-exclamation-triangle"></i>
                            </div>
                            <h3>データの読み込みに失敗しました</h3>
                            <p>データベースに接続できませんでした。しばらく待ってから再試行してください。</p>
                            <button class="btn btn-primary" onclick="loadCouncilMembers()">
                                <i class="fas fa-refresh"></i>
                                再試行
                            </button>
                        </div>
                    `;
                }
                showErrorMessage(`データの読み込み中にエラーが発生しました: ${errorMsg}`);
            } else if (data && data.length > 0) {
                console.log('Loaded council members from Supabase:', data.length);
                console.log('Sample data:', data[0]);
                // データをキャッシュに保存
                setCachedCouncilMembers(data);
                container.innerHTML = data.map(renderMember).join('');
                makeCouncilMembersClickable();
                showSuccessMessage(`${data.length}名の生徒会メンバー情報を読み込みました。`);
            } else {
                console.log('No council members found in Supabase - empty result');
                container.innerHTML = `
                    <div class="no-data-message">
                        <div class="no-data-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>メンバー情報がありません</h3>
                        <p>現在、生徒会メンバーの情報が登録されていません。</p>
                        <details>
                            <summary>デバッグ情報</summary>
                            <pre>Status: ${supabaseQueries?.isAvailable ? 'Supabase connected' : 'Supabase unavailable'}
RLS Policy: Public read access on council_members WHERE is_active = true
Query: SELECT * FROM council_members WHERE is_active = true ORDER BY display_order ASC</pre>
                        </details>
                    </div>
                `;
                showInfoMessage('データベースにメンバー情報が登録されていません。');
            }
        } else {
            console.log('Supabase not available');
            container.innerHTML = `
                <div class="no-data-message">
                    <div class="no-data-icon">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <h3>データベースに接続できません</h3>
                    <p>システムの初期化に失敗しました。ページを再読み込みしてください。</p>
                    <button class="btn btn-primary" onclick="location.reload()">
                        <i class="fas fa-refresh"></i>
                        ページを再読み込み
                    </button>
                </div>
            `;
            showErrorMessage('データベースに接続できません。');
        }
        
    } catch (error) {
        console.error('Error loading council members:', error);
        container.innerHTML = `
            <div class="no-data-message">
                <div class="no-data-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <h3>予期しないエラーが発生しました</h3>
                <p>システムエラーが発生しました。ページを再読み込みしてください。</p>
                <button class="btn btn-primary" onclick="location.reload()">
                    <i class="fas fa-refresh"></i>
                    ページを再読み込み
                </button>
            </div>
        `;
        showErrorMessage('予期しないエラーが発生しました。');
    }
}

// 生徒会メンバーカードをクリック可能にする
function makeCouncilMembersClickable() {
    const memberCards = document.querySelectorAll('.member-card.clickable');
    
    memberCards.forEach(card => {
        // クリックイベント
        card.addEventListener('click', function() {
            const memberId = this.dataset.memberId;
            if (memberId) {
                window.location.href = `member-detail.html?id=${memberId}`;
            }
        });
        
        // キーボード操作対応
        card.addEventListener('keydown', function(e) {
            if (e.key === 'Enter' || e.key === ' ') {
                e.preventDefault();
                this.click();
            }
        });
        
        // ホバー効果
        card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
            this.style.boxShadow = '0 8px 25px rgba(0,0,0,0.15)';
        });
        
        card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
            this.style.boxShadow = '';
        });
    });
}

// Supabaseからデータを読み込む汎用関数（統一版）
async function loadFromSupabase(table, container, renderFunction, fallbackData = null, options = {}) {
    const loadingEl = document.getElementById(`${table}-loading`);
    
    if (loadingEl) loadingEl.style.display = 'block';
    
    try {
        if (supabaseQueries) {
            const { data, error } = await supabaseQueries.getTableData(table, options);
            
            if (loadingEl) loadingEl.style.display = 'none';
            
            if (error) {
                console.error('Supabase error:', error);
                showNoDataMessage(container, supabaseQueries.getErrorMessage(error, `${table}の読み込み`));
                return;
            }
            
            if (data && data.length > 0) {
                container.innerHTML = data.map(renderFunction).join('');
            } else {
                showNoDataMessage(container, CONFIG.MESSAGES.INFO.NO_INFO);
            }
        } else {
            // Supabaseが利用できない場合はフォールバックデータまたは「まだ情報はありません」を表示
            if (loadingEl) loadingEl.style.display = 'none';
            
            if (fallbackData && fallbackData.length > 0) {
                container.innerHTML = fallbackData.map(renderFunction).join('');
            } else {
                showNoDataMessage(container, CONFIG.MESSAGES.INFO.NO_INFO);
            }
        }
    } catch (error) {
        if (loadingEl) loadingEl.style.display = 'none';
        console.error('Error loading data:', error);
        showNoDataMessage(container, `データの読み込み中にエラーが発生しました。`);
    }
}

// データなしメッセージを表示
function showNoDataMessage(container, message = CONFIG.MESSAGES.INFO.NO_INFO) {
    if (container) {
        container.innerHTML = `
            <div class="no-data-message">
                <div class="no-data-icon">
                    <i class="fas fa-inbox"></i>
                </div>
                <h3>${message}</h3>
                <p>新しい情報が追加されるまでお待ちください。</p>
            </div>
        `;
    }
}

// 成功メッセージを表示
function showSuccessMessage(message) {
    showMessage(message, 'success');
}

// エラーメッセージを表示
function showErrorMessage(message) {
    showMessage(message, 'error');
}

// 情報メッセージを表示
function showInfoMessage(message) {
    showMessage(message, 'info');
}

// メッセージ表示の共通関数
function showMessage(message, type) {
    const messageEl = document.createElement('div');
    messageEl.className = `message-toast message-${type}`;
    messageEl.innerHTML = `
        <div class="message-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(messageEl);
    
    // アニメーション表示
    setTimeout(() => {
        messageEl.classList.add('show');
    }, 100);
    
    // 5秒後に自動で消す
    setTimeout(() => {
        messageEl.classList.remove('show');
        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.remove();
            }
        }, 300);
    }, 5000);
}

// 部活動データ読み込み
async function loadClubs() {
    const container = document.getElementById('clubs-container');
    if (!container) return;
    
    // フォールバックデータ（DB接続失敗時のみ使用）
    const fallbackClubs = [];
    
    const renderClub = (club) => `
        <div class="club-card" data-category="${club.category || ''}">
            ${club.image_url ? `<img src="${club.image_url}" alt="${club.name}" class="club-image">` : 
              `<div class="club-image" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);"></div>`}
            <h3>${club.name}</h3>
            <p>${club.description}</p>
            ${club.members ? `<p class="club-members">部員数: ${club.members}名</p>` : ''}
            ${club.schedule ? `<p class="club-schedule">活動日: ${club.schedule}</p>` : ''}
        </div>
    `;
    
    await loadFromSupabase('clubs', container, renderClub, fallbackClubs);
}

// お知らせ読み込み
async function loadNews() {
    const newsContainer = document.querySelector('.news-container');
    if (!newsContainer) return;
    
    // フォールバックデータ（DB接続失敗時のみ使用）
    const fallbackNews = [];
    
    const renderNews = (item) => `
        <div class="news-item" data-category="${item.category || 'general'}">
            <div class="news-date">${formatDate(item.date || item.created_at)}</div>
            <div class="news-content">
                <h3>${item.title}</h3>
                <p>${item.content}</p>
            </div>
            <span class="news-type ${item.category || 'general'}">${getNewsTypeLabel(item.category || 'general')}</span>
        </div>
    `;
    
    // ラッパーdivを作成
    const wrapper = document.createElement('div');
    wrapper.className = 'news-list';
    newsContainer.appendChild(wrapper);
    
    await loadFromSupabase('news', wrapper, renderNews, fallbackNews);
}

function getNewsTypeLabel(type) {
    return CONFIG.CATEGORIES.NEWS[type] || 'お知らせ';
}

// なずなフォーラム初期化
async function initForum() {
    const submitBtn = document.getElementById('submit-post');
    const contentInput = document.getElementById('forum-content');
    const postsContainer = document.getElementById('posts-container');
    const loginBtn = document.getElementById('login-button');
    const logoutBtn = document.getElementById('logout-button');
    const navLoginBtn = document.getElementById('nav-login-button');
    const navLogoutBtn = document.getElementById('nav-logout-button');
    const chatPanel = document.getElementById('chat-panel');
    const chatMessages = document.getElementById('chat-messages');
    const chatSend = document.getElementById('chat-send');
    const chatText = document.getElementById('chat-text');
    const categorySelect = document.getElementById('post-category');
    const statusFilter = document.getElementById('status-filter');
    const searchInput = document.getElementById('search-posts');
    const sortSelect = document.getElementById('sort-posts');
    const pagePrev = document.getElementById('page-prev');
    const pageNext = document.getElementById('page-next');
    const pageInfo = document.getElementById('page-info');
    const charCounter = document.getElementById('forum-char-counter');

    // フォーラム状態（検索・並び替え・ページング）
    window.forumState = window.forumState || {
        search: '',
        status: 'all',
        orderBy: 'created_at',
        orderDirection: 'desc',
        page: 1,
        pageSize: 10,
        totalPages: 1
    };
    
    const bindLogout = (el) => el && el.addEventListener('click', () => {
        localStorage.removeItem('nazuna-auth');
        updateAuthUI();
    });
    const bindLogin = (el) => el && el.addEventListener('click', openAuthModal);
    bindLogin(loginBtn);
    bindLogin(navLoginBtn);
    bindLogout(logoutBtn);
    bindLogout(navLogoutBtn);

    updateAuthUI();

    if (submitBtn && contentInput) {
        // 文字数カウンタ
        if (charCounter) {
            const updateCounter = () => {
                const max = contentInput.getAttribute('maxlength') ? parseInt(contentInput.getAttribute('maxlength')) : 1000;
                const len = contentInput.value.length;
                charCounter.textContent = `${len} / ${max}`;
            };
            contentInput.addEventListener('input', updateCounter);
            updateCounter();
        }

        submitBtn.addEventListener('click', function() {
            // 先に認証チェック：未ログインなら即モーダルへ
            const auth = getAuth();
            if (!auth) {
                openAuthModal();
                return;
            }

            const content = contentInput.value.trim();
            if (!content) {
                alert('投稿内容を入力してください');
                return;
            }
            const category = categorySelect ? categorySelect.value : 'general';
            
            // 投稿を送信
            submitBtn.disabled = true;
            submitBtn.textContent = '送信中...';
            
            // Supabaseに投稿を送信
            submitToSupabase(content, auth.student_number, category).then(success => {
                submitBtn.disabled = false;
                submitBtn.textContent = '投稿する';
                
                if (success) {
                    contentInput.value = '';
                    alert(CONFIG.MESSAGES.SUCCESS.POST_SUBMITTED);
                    loadPosts();
                    // 投稿後にチャットパネルを表示
                    if (chatPanel) {
                        chatPanel.style.display = '';
                        // 直近の投稿IDは取得していないため、簡易にリスト再取得後の最初のアイテムを対象にするなどの実装は将来拡張
                    }
                } else {
                    alert(CONFIG.MESSAGES.ERROR.SERVER);
                }
            });
        });
    }
    
    // ステータスフィルター
    if (statusFilter) {
        statusFilter.addEventListener('change', () => {
            window.forumState.status = statusFilter.value || 'all';
            window.forumState.page = 1;
            loadPosts();
        });
    }
    // 検索
    if (searchInput) {
        let searchTimer = null;
        searchInput.addEventListener('input', () => {
            clearTimeout(searchTimer);
            searchTimer = setTimeout(() => {
                window.forumState.search = searchInput.value.trim();
                window.forumState.page = 1;
                loadPosts();
            }, 300);
        });
    }

    // 並び替え
    if (sortSelect) {
        sortSelect.addEventListener('change', () => {
            const v = sortSelect.value;
            window.forumState.orderBy = 'created_at';
            window.forumState.orderDirection = v === 'created_at_asc' ? 'asc' : 'desc';
            window.forumState.page = 1;
            loadPosts();
        });
    }

    // ページング
    const updatePager = () => {
        if (!pageInfo) return;
        pageInfo.textContent = `${window.forumState.page} / ${window.forumState.totalPages}`;
        if (pagePrev) pagePrev.disabled = window.forumState.page <= 1;
        if (pageNext) pageNext.disabled = window.forumState.page >= window.forumState.totalPages;
    };
    if (pagePrev) {
        pagePrev.addEventListener('click', () => {
            if (window.forumState.page > 1) {
                window.forumState.page -= 1;
                loadPosts();
            }
        });
    }
    if (pageNext) {
        pageNext.addEventListener('click', () => {
            if (window.forumState.page < window.forumState.totalPages) {
                window.forumState.page += 1;
                loadPosts();
            }
        });
    }
    
    // 投稿一覧を読み込み
    loadPosts().then(updatePager);

    // チャット送信
    if (chatSend && chatText) {
        chatSend.addEventListener('click', async () => {
            const auth = getAuth();
            if (!auth) { openAuthModal(); return; }
            const message = chatText.value.trim();
            if (!message) return;
            try {
                // 簡易: 直近の投稿に紐づけて送る（将来はユーザーごとのスレッド化）
                const latest = await getLatestUserPostId(auth.student_number);
                if (!latest) { alert('まず投稿してください。'); return; }
                await supabaseQueries.sendChat({ post_id: latest, sender: auth.student_number, message, is_admin: false });
                chatText.value = '';
                await renderChat(latest);
            } catch (e) {
                console.error('Chat send error', e);
            }
        });
    }
}

// 投稿一覧読み込み
async function loadPosts() {
    const container = document.getElementById('posts-container');
    if (!container) return;
    const state = window.forumState || { search: '', status: 'all', orderBy: 'created_at', orderDirection: 'desc', page: 1, pageSize: 10 };
    
    // フォールバックデータ（DB接続失敗時のみ使用）
    const fallbackPosts = [];
    
    const renderPost = (post) => `
        <div class="post-item">
            <div class="post-header">
                <span>投稿ID: ${post.id}</span>
                <span>${formatDate(post.created_at)}</span>
            </div>
            <div class="post-content">${escapeHtml(post.content)}</div>
            <span class="post-status status-${post.status}">${getStatusLabel(post.status)}</span>
            ${post.reply ? `
                <div class="post-reply">
                    <strong>生徒会より:</strong>
                    <p>${escapeHtml(post.reply)}</p>
                </div>
            ` : ''}
        </div>
    `;
    
    const options = {
        orderBy: state.orderBy,
        orderDirection: state.orderDirection,
        limit: state.pageSize,
        offset: (state.page - 1) * state.pageSize
    };
    if (state.status && state.status !== 'all') {
        options.filters = { status: state.status };
    }
    if (state.search) {
        options.search = state.search;
    }

    // データ取得
    if (supabaseQueries) {
        try {
            // リスト取得
            const { data, error } = await supabaseQueries.getTableData('posts', options);
            if (error) {
                showNoDataMessage(container, supabaseQueries.getErrorMessage(error, '投稿の読み込み'));
                return;
            }
            // 件数取得（HEADだと環境により失敗するため非HEADでcount取得）
            let countQuery = supabaseClient.from('posts').select('id', { count: 'exact' });
            if (state.status && state.status !== 'all') countQuery = countQuery.eq('status', state.status);
            if (state.search) countQuery = countQuery.ilike('content', `%${state.search}%`);
            countQuery = countQuery.limit(0);
            const { count } = await countQuery;
            const total = count || 0;
            window.forumState.totalPages = Math.max(1, Math.ceil(total / state.pageSize));

            if (data && data.length > 0) {
                container.innerHTML = data.map(renderPost).join('');
            } else {
                showNoDataMessage(container, CONFIG.MESSAGES.INFO.NO_INFO);
            }
        } catch (e) {
            console.error('Error loading posts:', e);
            showNoDataMessage(container, '投稿の読み込み中にエラーが発生しました。');
        }
    } else {
        // フォールバック
        container.innerHTML = fallbackPosts.map(renderPost).join('');
        window.forumState.totalPages = 1;
    }

    // ページャ表示更新
    const pageInfo = document.getElementById('page-info');
    const pagePrev = document.getElementById('page-prev');
    const pageNext = document.getElementById('page-next');
    if (pageInfo) {
        pageInfo.textContent = `${window.forumState.page} / ${window.forumState.totalPages}`;
    }
    if (pagePrev) pagePrev.disabled = window.forumState.page <= 1;
    if (pageNext) pageNext.disabled = window.forumState.page >= window.forumState.totalPages;
}

async function getLatestUserPostId(student_number) {
    try {
        if (!supabaseQueries) return null;
        const { data, error } = await supabaseClient
            .from('posts')
            .select('id')
            .eq('student_number', student_number)
            .order('created_at', { ascending: false })
            .limit(1)
            .maybeSingle();
        if (error) return null;
        return data?.id || null;
    } catch { return null; }
}

async function renderChat(post_id) {
    const chatPanel = document.getElementById('chat-panel');
    const chatMessages = document.getElementById('chat-messages');
    if (!chatPanel || !chatMessages) return;
    const { data, error } = await supabaseQueries.listChats(post_id, { limit: 200 });
    if (error) return;
    chatPanel.style.display = '';
    chatMessages.innerHTML = (data || []).map(m => `
        <div class="chat-message" style="margin:6px 0; ${m.is_admin ? 'text-align:right;' : ''}">
            <span class="bubble" style="display:inline-block; padding:8px 12px; border-radius:16px; background:${m.is_admin ? '#eef5ff' : '#f2f2f2'};">
                ${escapeHtml(m.message)}
            </span>
        </div>
    `).join('');
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

// Supabaseに投稿を送信（統一版）
async function submitToSupabase(content, student_number, category = 'general') {
    try {
        if (supabaseQueries) {
            const result = await supabaseQueries.createPost({ content, student_number, category });
            
            if (result.error) {
                console.error('Supabase insert error:', result.error);
                return false;
            }
            
            return true;
        } else {
            // Supabaseが利用できない場合はデモとして成功を返す
            console.log('Demo mode: Post submitted:', content);
            return true;
        }
    } catch (error) {
        console.error('Error submitting post:', error);
        return false;
    }
}

// 認証UI
function getAuth() {
    try {
        const raw = localStorage.getItem('nazuna-auth');
        if (!raw) return null;
        const data = JSON.parse(raw);
        if (!data || !data.student_number) return null;
        return data;
    } catch {
        return null;
    }
}

function updateAuthUI() {
    const auth = getAuth();
    const loginBtn = document.getElementById('login-button');
    const logoutBtn = document.getElementById('logout-button');
    const navLoginBtn = document.getElementById('nav-login-button');
    const navLogoutBtn = document.getElementById('nav-logout-button');
    const submitBtn = document.getElementById('submit-post');
    if (auth) {
        loginBtn && (loginBtn.style.display = 'none');
        logoutBtn && (logoutBtn.style.display = 'inline-flex');
        navLoginBtn && (navLoginBtn.style.display = 'none');
        navLogoutBtn && (navLogoutBtn.style.display = 'inline-flex');
        if (submitBtn) {
            submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 投稿する';
        }
    } else {
        loginBtn && (loginBtn.style.display = 'inline-flex');
        logoutBtn && (logoutBtn.style.display = 'none');
        navLoginBtn && (navLoginBtn.style.display = 'inline-flex');
        navLogoutBtn && (navLogoutBtn.style.display = 'none');
        if (submitBtn) {
            submitBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i> ログイン';
        }
    }
}

function openAuthModal() {
    const overlay = document.getElementById('auth-modal-overlay');
    const closeBtn = document.getElementById('auth-modal-close');
    const stepNumber = document.getElementById('step-student-number');
    const stepRegister = document.getElementById('step-register');
    const stepLogin = document.getElementById('step-login');
    const err = document.getElementById('auth-error');
    const checkBtn = document.getElementById('check-student-number');
    const registerBtn = document.getElementById('register-student');
    const loginBtn = document.getElementById('login-student');
    const numberInput = document.getElementById('student-number-input');
    const nameInput = document.getElementById('student-name-input');
    const passSetInput = document.getElementById('password-set-input');
    const passLoginInput = document.getElementById('password-login-input');
    const togglePassSet = document.getElementById('toggle-password-set');
    const togglePassLogin = document.getElementById('toggle-password-login');

    if (!overlay) return;
    err.style.display = 'none';
    stepNumber.style.display = '';
    stepRegister.style.display = 'none';
    stepLogin.style.display = 'none';
    // 開く（アニメーション：まずopeningでレイアウト→次フレームでactive）
    overlay.classList.remove('closing');
    overlay.classList.add('opening');
    document.body.style.overflow = 'hidden';
    requestAnimationFrame(() => {
        overlay.classList.add('active');
        overlay.classList.remove('opening');
    });

    // 初期フォーカス
    setTimeout(() => numberInput?.focus(), 0);

    const closeModal = () => {
        // 閉じる（アニメーション）
        overlay.classList.add('closing');
        setTimeout(() => {
            overlay.classList.remove('active');
            overlay.classList.remove('closing');
            document.body.style.overflow = '';
        }, 250);
        document.removeEventListener('keydown', onEscClose, true);
    };
    const onEscClose = (e) => {
        if (e.key === 'Escape') closeModal();
    };
    document.addEventListener('keydown', onEscClose, true);
    closeBtn.onclick = closeModal;
    overlay.onclick = (e) => { if (e.target === overlay) closeModal(); };

    // パスワード表示切替
    const bindToggle = (btn, input) => {
        if (!btn || !input) return;
        btn.addEventListener('click', (e) => {
            e.preventDefault();
            const isPw = input.getAttribute('type') === 'password';
            input.setAttribute('type', isPw ? 'text' : 'password');
            btn.innerHTML = isPw ? '<i class="fas fa-eye-slash"></i>' : '<i class="fas fa-eye"></i>';
            input.focus();
        });
    };
    bindToggle(togglePassSet, passSetInput);
    bindToggle(togglePassLogin, passLoginInput);

    const doCheck = async () => {
        const sn = numberInput.value.trim();
        if (!sn) { showAuthError('生徒番号を入力してください'); return; }
        if (!supabaseQueries) { showAuthError('Supabase未設定'); return; }
        const { data, error } = await supabaseQueries.getStudentByNumber(sn);
        if (error) { showAuthError('確認に失敗しました'); return; }
        if (!data) {
            // 初回登録
            stepNumber.style.display = 'none';
            stepRegister.style.display = '';
            document.getElementById('auth-modal-title').textContent = '初回登録';
            const doRegister = async () => {
                const name = nameInput.value.trim();
                const pw = passSetInput.value;
                if (!name || !pw || pw.length < 6) { showAuthError('氏名と6文字以上のパスワード'); return; }
                const password_hash = await window.sha256(pw);
                const { data: created, error: insErr } = await supabaseQueries.registerStudent({ student_number: sn, name, password_hash });
                if (insErr) { showAuthError('登録に失敗しました'); return; }
                localStorage.setItem('nazuna-auth', JSON.stringify({ student_number: sn, name }));
                closeModal();
                updateAuthUI();
            };
            registerBtn.onclick = doRegister;
            passSetInput.onkeydown = (e) => { if (e.key === 'Enter') doRegister(); };
        } else {
            // 既存 -> パスワード入力
            stepNumber.style.display = 'none';
            stepLogin.style.display = '';
            document.getElementById('auth-modal-title').textContent = 'ログイン';
            const doLogin = async () => {
                const pw = passLoginInput.value;
                if (!pw) { showAuthError('パスワードを入力してください'); return; }
                const hash = await window.sha256(pw);
                if (hash !== data.password_hash) { showAuthError('認証に失敗しました'); return; }
                localStorage.setItem('nazuna-auth', JSON.stringify({ student_number: data.student_number, name: data.name }));
                closeModal();
                updateAuthUI();
            };
            loginBtn.onclick = doLogin;
            passLoginInput.onkeydown = (e) => { if (e.key === 'Enter') doLogin(); };
        }
    };
    checkBtn.onclick = doCheck;
    numberInput.onkeydown = (e) => { if (e.key === 'Enter') doCheck(); };
}

function showAuthError(message) {
    const err = document.getElementById('auth-error');
    if (!err) return;
    err.style.display = 'block';
    err.textContent = message;
}

// PWA初期化
function initPWA() {
    console.log('Initializing PWA...');
    
    // PWAアップデーターとインストーラーは別ファイルで初期化されるため、
    // ここでは基本的なService Worker登録のみ行う
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker.register('./sw.js')
            .then(registration => {
                console.log('ServiceWorker registered successfully');
                
                // iOS向け通知許可の要求
                requestIOSNotificationPermission();
                
                return registration;
            })
            .catch(err => {
                console.error('ServiceWorker registration failed:', err);
            });
    } else {
        console.log('Service Worker not supported');
    }
}

// iOS向け通知許可要求
async function requestIOSNotificationPermission() {
    // iOSデバイスの検出
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    
    if (isIOS || isSafari) {
        console.log('iOS device detected, requesting notification permission...');
        
        // 通知がサポートされているかチェック
        if ('Notification' in window) {
            try {
                const permission = await Notification.requestPermission();
                
                if (permission === 'granted') {
                    console.log('iOS notification permission granted');
                    showNotification('通知が有効になりました', '重要なお知らせをお届けします', 'success');
                    
                    // PWAインストール促進（iOS Safari用）
                    showIOSInstallPrompt();
                } else if (permission === 'denied') {
                    console.log('iOS notification permission denied');
                } else {
                    console.log('iOS notification permission default');
                }
            } catch (error) {
                console.error('Error requesting iOS notification permission:', error);
            }
        }
    }
}

// iOS向けインストール促進メッセージ
function showIOSInstallPrompt() {
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    const isInStandaloneMode = window.navigator.standalone === true;
    
    if (isIOS && !isInStandaloneMode) {
        // PWAがまだインストールされていない場合のみ表示
        setTimeout(() => {
            const installPrompt = document.createElement('div');
            installPrompt.className = 'ios-install-prompt';
            installPrompt.innerHTML = `
                <div class="ios-install-content">
                    <div class="ios-install-icon">
                        <i class="fas fa-mobile-alt"></i>
                    </div>
                    <div class="ios-install-text">
                        <h4>アプリとしてインストール</h4>
                        <p>ホーム画面に追加して、アプリのように使用できます</p>
                        <div class="ios-install-steps">
                            <span><i class="fas fa-share"></i> 共有ボタン</span>
                            <span>→</span>
                            <span><i class="fas fa-plus-square"></i> ホーム画面に追加</span>
                        </div>
                    </div>
                    <button class="ios-install-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;
            
            document.body.appendChild(installPrompt);
            
            // 10秒後に自動で消す
            setTimeout(() => {
                if (installPrompt.parentElement) {
                    installPrompt.remove();
                }
            }, 10000);
        }, 3000);
    }
}

// ユーティリティ関数
function formatDate(dateString) {
    const date = new Date(dateString);
    return `${date.getFullYear()}/${(date.getMonth() + 1).toString().padStart(2, '0')}/${date.getDate().toString().padStart(2, '0')} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
}

function escapeHtml(unsafe) {
    return unsafe
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function getStatusLabel(status) {
    return CONFIG.STATUS.POSTS[status] || status;
}

// ホームページ初期化
async function initHomePage() {
    try {
        await loadLatestNews();
        await loadLatestPosts();
        initPWAInstall();
        console.log('Home page initialization completed');
    } catch (error) {
        console.error('Error initializing home page:', error);
    }
}

// 最新ニュース読み込み
async function loadLatestNews() {
    const container = document.getElementById('latest-news');
    if (!container) return Promise.resolve();
    
    // デモデータ（実際はDBから取得）
    const latestNews = [];
    
    container.innerHTML = latestNews.map(item => `
        <div class="news-preview">
            <span class="news-type ${item.type}">${getNewsTypeLabel(item.type)}</span>
            <h4>${item.title}</h4>
            <span class="news-date">${item.date}</span>
        </div>
    `).join('');
}

// 最新投稿読み込み
async function loadLatestPosts() {
    const container = document.getElementById('latest-posts');
    if (!container) return Promise.resolve();
    
    container.innerHTML = `
        <div class="no-data-message">
            <div class="no-data-icon">
                <i class="fas fa-comments"></i>
            </div>
            <h3>まだ投稿がありません</h3>
            <p>フォーラムに投稿してみましょう。</p>
        </div>
    `;
}

// PWAインストール機能
function initPWAInstall() {
    const installBtn = document.getElementById('install-pwa');
    if (!installBtn) return;
    
    let deferredPrompt;
    
    window.addEventListener('beforeinstallprompt', (e) => {
        e.preventDefault();
        deferredPrompt = e;
        installBtn.style.display = 'inline-flex';
    });
    
    installBtn.addEventListener('click', async () => {
        if (!deferredPrompt) return;
        
        deferredPrompt.prompt();
        const { outcome } = await deferredPrompt.userChoice;
        
        if (outcome === 'accepted') {
            console.log('PWA installed');
        }
        
        deferredPrompt = null;
        installBtn.style.display = 'none';
    });
}

// 部活動フィルター初期化
function initClubsFilter() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const clubCards = document.querySelectorAll('.club-card');
    
    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // アクティブ状態の切り替え
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            const category = btn.dataset.category;
            
            clubCards.forEach(card => {
                if (category === 'all' || card.dataset.category === category) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        });
    });
}

// ニュースフィルター初期化
function initNewsFilter() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const newsItems = document.querySelectorAll('.news-item');
    
    filterBtns.forEach(btn => {
        btn.addEventListener('click', () => {
            // アクティブ状態の切り替え
            filterBtns.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            const category = btn.dataset.category;
            
            newsItems.forEach(item => {
                if (category === 'all' || item.dataset.category === category) {
                    item.style.display = 'flex';
                } else {
                    item.style.display = 'none';
                }
            });
        });
    });
}

// 通知機能初期化
function initNotifications() {
    const enableBtn = document.getElementById('enable-notifications');
    const disableBtn = document.getElementById('disable-notifications');
    const statusEl = document.getElementById('notification-status');
    
    if (!enableBtn || !disableBtn || !statusEl) return;
    
    // 通知許可状態をチェック
    function checkNotificationStatus() {
        if (!('Notification' in window)) {
            statusEl.innerHTML = '<p><i class="fas fa-times-circle"></i> このブラウザは通知をサポートしていません</p>';
            enableBtn.style.display = 'none';
            return;
        }
        
        switch (Notification.permission) {
            case 'granted':
                statusEl.innerHTML = '<p><i class="fas fa-check-circle"></i> 通知が有効になっています</p>';
                enableBtn.style.display = 'none';
                disableBtn.style.display = 'inline-flex';
                break;
            case 'denied':
                statusEl.innerHTML = '<p><i class="fas fa-times-circle"></i> 通知が拒否されています</p>';
                enableBtn.style.display = 'none';
                break;
            default:
                statusEl.innerHTML = '<p><i class="fas fa-info-circle"></i> 通知を有効にしてお知らせを受け取りましょう</p>';
                enableBtn.style.display = 'inline-flex';
                disableBtn.style.display = 'none';
        }
    }
    
    enableBtn.addEventListener('click', async () => {
        const permission = await Notification.requestPermission();
        checkNotificationStatus();
        
        if (permission === 'granted') {
            new Notification(CONFIG.APP.NAME, {
                body: CONFIG.MESSAGES.SUCCESS.NOTIFICATION_ENABLED,
                icon: CONFIG.APP.NOTIFICATION_ICON
            });
        }
    });
    
    disableBtn.addEventListener('click', () => {
        // 通知を無効にする（実際にはブラウザ設定で行う）
        alert('通知を無効にするには、ブラウザの設定から行ってください。');
    });
    
    checkNotificationStatus();
}

// アンケート読み込み
async function loadSurveys() {
    const container = document.getElementById('active-surveys');
    if (!container) return;
    
    container.innerHTML = `
        <div class="no-data-message">
            <div class="no-data-icon">
                <i class="fas fa-poll"></i>
            </div>
            <h3>現在実施中のアンケートはありません</h3>
            <p>新しいアンケートが公開されるまでお待ちください。</p>
        </div>
    `;
}

// アンケートフォーム初期化
function initSurveyForm() {
    const form = document.querySelector('.survey-content');
    const submitBtn = form?.querySelector('.btn-primary');
    
    if (!submitBtn) return;
    
    submitBtn.addEventListener('click', (e) => {
        e.preventDefault();
        
        // 回答を収集
        const formData = new FormData();
        const inputs = form.querySelectorAll('input:checked, textarea');
        
        inputs.forEach(input => {
            if (input.type === 'radio' || input.type === 'checkbox') {
                formData.append(input.name, input.value);
            } else if (input.tagName === 'TEXTAREA' && input.value.trim()) {
                formData.append('comments', input.value.trim());
            }
        });
        
        // 送信処理（実際はGASに送信）
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 送信中...';
        
        setTimeout(() => {
            alert(CONFIG.MESSAGES.SUCCESS.SURVEY_SUBMITTED);
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> 回答を送信';
            
            // フォームをリセット
            inputs.forEach(input => {
                if (input.type === 'radio' || input.type === 'checkbox') {
                    input.checked = false;
                } else if (input.tagName === 'TEXTAREA') {
                    input.value = '';
                }
            });
        }, 2000);
    });
}

// デバッグ用関数をグローバルに公開
if (CONFIG.APP.DEBUG) {
    window.resetFirstVisit = resetFirstVisit;
    window.resetSession = resetSession;
    window.showOpeningScreen = showOpeningScreen;
    window.hideOpeningScreen = hideOpeningScreen;
    window.checkAndMarkSessionVisit = checkAndMarkSessionVisit;
    console.log('Debug functions available: resetFirstVisit(), resetSession(), showOpeningScreen(), hideOpeningScreen(), checkAndMarkSessionVisit()');
}

[js/config.js]
// なずなポータルサイト設定ファイル

// API設定
const CONFIG = {
    // Supabase設定
    SUPABASE: {
        URL: 'https://jirppalacwwinwnsyauo.supabase.co',
        ANON_KEY: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImppcnBwYWxhY3d3aW53bnN5YXVvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTk2NTYwNDUsImV4cCI6MjA3NTIzMjA0NX0.wbCEhrTTPETy1iOB3MmbNVtN4JQk5Be2Dxfs61x7fr4'
    },
    
    // Google Apps Script WebApp URL
    // デプロイ後にこのURLを更新してください
    GAS_URL: 'https://script.google.com/macros/s/AKfycbw65COeNBGagFKM0gCH_28ObtToIM2k-AH6t-w-PZuaXMR8oudLwUKh9-9ARGcLxAI1/exec',
    
    // Firebase設定（通知システム用）
    FIREBASE: {
        PROJECT_ID: 'nazuna-portal',
        VAPID_KEY: 'BCEnp7nRdNubcooPI86iEEFqavkUxRal0t3AKkjsC1nB-PYLOUiE-EnGITJKfdANSRCG7zjyRzR6ERX3ZT0tZMQ',
        MESSAGING_SENDER_ID: '181514532945'
    },
    
    // APIエンドポイント
    API: {
        // 部活動関連
        GET_CLUBS: 'getClubs',
        ADD_CLUB: 'addClub',
        UPDATE_CLUB: 'updateClub',
        
        // フォーラム関連
        GET_POSTS: 'getPosts',
        SUBMIT_POST: 'submitPost',
        UPDATE_POST_STATUS: 'updatePostStatus',
        
        // お知らせ関連
        GET_NEWS: 'getNews',
        ADD_NEWS: 'addNews',
        
        // アンケート関連
        GET_SURVEYS: 'getSurveys',
        SUBMIT_SURVEY: 'submitSurvey',
        GET_SURVEY_RESULTS: 'getSurveyResults',
        
        // 生徒会メンバー関連
        GET_MEMBERS: 'getMembers',
        UPDATE_MEMBERS: 'updateMembers'
    },
    
    // アプリケーション設定
    APP: {
        NAME: 'なずなポータル',
        VERSION: '2.0.0',
        DESCRIPTION: 'みんなでつくる学校生活',
        
        // ページネーション
        ITEMS_PER_PAGE: 10,
        
        // キャッシュ設定（ミリ秒）
        CACHE_DURATION: 5 * 60 * 1000, // 5分
        
        // 通知設定
        NOTIFICATION_ICON: 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
        
        // デバッグモード
        DEBUG: true,

        // ページごとの公開フラグ（falseで準備中）
        PAGES: {
            'index': true,
            'council': true,
            'clubs': true,
            'forum': true,
            'news': true,
            'survey': false,
            'member-detail': true,
            'admin': true,
            '404': true
        }
    },
    
    // UI設定
    UI: {
        // アニメーション時間（ミリ秒）
        ANIMATION_DURATION: 300,
        
        // ローディング表示時間
        MIN_LOADING_TIME: 1000,
        
        // 自動リフレッシュ間隔（ミリ秒）
        AUTO_REFRESH_INTERVAL: 30 * 60 * 1000, // 30分
        
        // フォーム設定
        FORM: {
            MAX_POST_LENGTH: 1000,
            MAX_COMMENT_LENGTH: 500,
            REQUIRED_FIELDS_MARK: '*'
        }
    },
    
    // カテゴリ設定
    CATEGORIES: {
        CLUBS: {
            'sports': '運動部',
            'culture': '文化部',
            'academic': '学術部',
            'music': '音楽部',
            'volunteer': 'ボランティア'
        },
        
        NEWS: {
            'event': 'イベント',
            'newsletter': '生徒会だより',
            'recruitment': '募集',
            'important': '重要',
            'general': '一般'
        },
        
        FORUM: {
            'suggestion': '提案・要望',
            'complaint': '苦情・問題',
            'question': '質問',
            'event': 'イベント関連',
            'facility': '施設・設備',
            'other': 'その他'
        }
    },
    
    // ステータス設定
    STATUS: {
        POSTS: {
            'pending': '確認中',
            'in_progress': '対応中',
            'resolved': '対応済み',
            'closed': '終了'
        },
        
        SURVEYS: {
            'active': '実施中',
            'closed': '終了',
            'draft': '下書き'
        }
    },
    
    // エラーメッセージ
    MESSAGES: {
        ERROR: {
            NETWORK: 'ネットワークエラーが発生しました。しばらく待ってから再試行してください。',
            SERVER: 'サーバーエラーが発生しました。管理者にお問い合わせください。',
            VALIDATION: '入力内容を確認してください。',
            PERMISSION: 'この操作を実行する権限がありません。',
            NOT_FOUND: '要求されたデータが見つかりません。'
        },
        
        SUCCESS: {
            POST_SUBMITTED: '投稿が完了しました！担当者が確認後、返信いたします。',
            SURVEY_SUBMITTED: 'アンケートの回答を送信しました。ご協力ありがとうございました！',
            NOTIFICATION_ENABLED: '通知が有効になりました！重要なお知らせをお届けします。'
        },
        
        INFO: {
            LOADING: '読み込み中...',
            NO_DATA: 'データがありません。',
            NO_INFO: 'まだ情報はありません',
            OFFLINE: 'オフラインモードで動作しています。'
        }
    }
};

// 設定の検証
if (CONFIG.APP.DEBUG) {
    console.log('なずなポータル設定:', CONFIG);
}

// 設定をグローバルに公開
window.CONFIG = CONFIG;


[js/firebase-config.js]
// Firebase設定ファイル
// 実際の運用時はFirebase Consoleから取得した設定値を使用

// Firebase設定ファイル
// 実際の運用時はFirebase Consoleから取得した設定値を使用
// ES6 importは使用せず、CDNから読み込まれたFirebase SDKを使用

// APIクライアントはグローバルを参照（重複定義を避ける）
// window.apiClient が未定義の場合のみ初期化します

// Your web app's Firebase configuration
const firebaseConfig = {
    apiKey: "AIzaSyDQ8g88Z4rW-nX6TzCGjxFvfDptju4fOIc",
    authDomain: "nazuna-portal.firebaseapp.com",
    projectId: "nazuna-portal",
    storageBucket: "nazuna-portal.firebasestorage.app", // Firebase Storage用の新しいドメイン
    messagingSenderId: "181514532945",
    appId: "1:181514532945:web:65043ee5d7d435a7af6070"
};

// Firebase初期化（CDN版を使用）
// const app = initializeApp(firebaseConfig); // ES6 import版は使用しない

// VAPIDキー（Firebase Console > Project Settings > Cloud Messaging から取得）
// Web Push通知などで使用します
const vapidKey = "BCEnp7nRdNubcooPI86iEEFqavkUxRal0t3AKkjsC1nB-PYLOUiE-EnGITJKfdANSRCG7zjyRzR6ERX3ZT0tZMQ";

// Firebase初期化（クロスプラットフォーム対応）
function initializeFirebase() {
    try {
        // APIクライアントの初期化
        if (typeof APIClient !== 'undefined') {
            if (!window.apiClient) {
                window.apiClient = new APIClient();
                console.log('API client initialized successfully');
            }
        } else {
            console.warn('APIClient class not available');
        }
        
        // Firebase SDKが読み込まれているかチェック
        if (typeof firebase === 'undefined') {
            console.warn('Firebase SDK not loaded. Using fallback push notification system.');
            return false;
        }
        
        // Firebase初期化
        if (!firebase.apps.length) {
            firebase.initializeApp(firebaseConfig);
            console.log('Firebase initialized successfully');
        }
        
        // Firebase Messaging初期化（簡略版）
        if (firebase.messaging.isSupported()) {
            const messaging = firebase.messaging();
            
            // VAPIDキー設定（新しい方法）
            if (vapidKey && vapidKey !== 'your-vapid-key-here') {
                console.log('VAPID key available for token generation');
            }
            
            // FCM用のService Workerを先に登録
            setupFirebaseServiceWorker();

            // 通知許可の要求（iOS対応）
            requestNotificationPermission()
                .then((permission) => {
                    if (permission === 'granted') {
                        console.log('Notification permission granted');
                        // VAPIDキーとService Worker登録をgetToken()に渡す
                        const baseOptions = vapidKey && vapidKey !== 'your-vapid-key-here' 
                            ? { vapidKey: vapidKey } 
                            : {};
                        return navigator.serviceWorker.getRegistration('./').then((reg) => {
                            const tokenOptions = { ...baseOptions };
                            if (reg) {
                                tokenOptions.serviceWorkerRegistration = reg;
                            }
                            return messaging.getToken(tokenOptions);
                        });
                    } else {
                        console.log('Notification permission denied');
                        return null;
                    }
                })
                .then((token) => {
                    if (token) {
                        console.log('FCM Token:', token);
                        // トークンをGASに送信
                        registerFCMToken(token);
                    }
                })
                .catch((error) => {
                    console.error('Firebase Messaging initialization failed:', error);
                });
            
            console.log('Firebase Messaging initialized successfully');
            return true;
        } else {
            console.warn('Firebase Messaging is not supported in this browser');
            return false;
        }
        
    } catch (error) {
        console.error('Error initializing Firebase:', error);
        return false;
    }
}

// 通知許可の要求（iOS対応）
function requestNotificationPermission() {
    return new Promise((resolve) => {
        if ('Notification' in window) {
            if (Notification.permission === 'granted') {
                resolve('granted');
            } else if (Notification.permission === 'denied') {
                resolve('denied');
            } else {
                Notification.requestPermission().then((permission) => {
                    resolve(permission);
                });
            }
        } else {
            resolve('denied');
        }
    });
}

// Firebase Messaging Service Worker用の設定
function createFirebaseMessagingServiceWorker() {
    const swContent = `
// Firebase Messaging Service Worker
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

// Firebase設定
const firebaseConfig = ${JSON.stringify(firebaseConfig)};

// Firebase初期化
firebase.initializeApp(firebaseConfig);

// Firebase Messaging初期化
const messaging = firebase.messaging();

// バックグラウンドメッセージ処理
messaging.onBackgroundMessage(function(payload) {
    console.log('Received background message:', payload);
    
    const { notification, data } = payload;
    
    const notificationTitle = notification?.title || 'お知らせ';
    const notificationOptions = {
        body: notification?.body || 'お知らせがあります',
        icon: notification?.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
        badge: '/images/badge-72x72.png',
        tag: data?.category || 'general',
        requireInteraction: data?.priority === '2',
        data: {
            url: data?.url || '/',
            category: data?.category || 'general',
            timestamp: Date.now()
        },
        actions: notification?.actions || [
            { action: 'view', title: '詳細を見る' },
            { action: 'dismiss', title: '閉じる' }
        ]
    };
    
    return self.registration.showNotification(notificationTitle, notificationOptions);
});

// 通知クリック処理
self.addEventListener('notificationclick', function(event) {
    console.log('Notification clicked:', event);
    
    event.notification.close();
    
    const urlToOpen = event.notification.data?.url || '/';
    
    if (event.action === 'dismiss') {
        return;
    }
    
    event.waitUntil(
        clients.matchAll({
            type: 'window',
            includeUncontrolled: true
        }).then(function(clientList) {
            // 既に開いているタブがあるかチェック
            for (let i = 0; i < clientList.length; i++) {
                const client = clientList[i];
                if (client.url.includes(self.location.origin) && 'focus' in client) {
                    return client.focus().then(() => {
                        if (urlToOpen !== '/') {
                            return client.navigate(urlToOpen);
                        }
                    });
                }
            }
            
            // 新しいタブを開く
            if (clients.openWindow) {
                return clients.openWindow(urlToOpen);
            }
        })
    );
});
    `;
    
    return swContent;
}

// Service Workerファイルを登録
function setupFirebaseServiceWorker() {
    if ('serviceWorker' in navigator) {
        // iOS環境の検出
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        const isPWA = window.matchMedia('(display-mode: standalone)').matches || 
                      window.navigator.standalone === true;
        const isIOSPWA = isIOS && isPWA;
        
        // iOS PWA環境でのバージョン検出
        let iosVersion = null;
        if (isIOS) {
            const match = navigator.userAgent.match(/OS (\d+)_(\d+)_?(\d+)?/);
            if (match) {
                iosVersion = parseFloat(`${match[1]}.${match[2]}`);
            }
        }
        
        // iOS 16.4以降はネイティブのプッシュ通知をサポート
        const useNativePush = !isIOSPWA || (isIOSPWA && iosVersion >= 16.4);
        
        // 静的なService Workerファイルを使用（動的生成よりも信頼性が高い）
        const swUrl = './firebase-messaging-sw.js';
        
        // Service Workerの登録を最大3回試行する
        let retryCount = 0;
        const maxRetries = 3;
        
        const registerServiceWorker = () => {
            navigator.serviceWorker.register(swUrl, { scope: './' })
                .then((registration) => {
                    console.log('Firebase Messaging Service Worker registered:', registration);
                    
                    // Firebase Messagingに登録を伝える
                    if (typeof firebase !== 'undefined' && firebase.messaging && firebase.messaging.isSupported()) {
                        const messaging = firebase.messaging();
                        // 新しいFirebase SDKでは自動的にService Workerが検出される
                        console.log('Firebase Messaging ready with Service Worker');
                    }
                    
                    // iOS 16.4以降のPWAの場合、通知許可を確認
                    if (isIOSPWA && iosVersion >= 16.4) {
                        console.log('iOS 16.4以降のPWA環境を検出しました。プッシュ通知がサポートされています。');
                        // 通知許可状態を確認
                        if (window.notificationManager) {
                            const supportInfo = window.notificationManager.checkIOSPWASupport();
                            console.log('iOS PWA通知サポート状況:', supportInfo);
                        }
                    }
                })
                .catch((error) => {
                    console.error(`Firebase Messaging Service Worker registration failed (attempt ${retryCount + 1}/${maxRetries}):`, error);
                    
                    // 再試行
                    if (retryCount < maxRetries - 1) {
                        retryCount++;
                        console.log(`Retrying Service Worker registration in 1 second... (attempt ${retryCount + 1}/${maxRetries})`);
                        setTimeout(registerServiceWorker, 1000);
                    } else {
                        // iOS PWAの場合は特別な処理
                        if (isIOSPWA) {
                            console.log('iOS PWA環境でService Worker登録に失敗しました。カスタム通知UIを使用します。');
                            // iOS PWAではService Workerの制限があるため、カスタム通知UIを使用
                            if (window.notificationManager) {
                                const supportInfo = window.notificationManager.checkIOSPWASupport();
                                console.log('iOS PWA診断情報:', supportInfo);
                            }
                        }
                    }
                });
        };
        
        // 最初の試行を開始
        registerServiceWorker();
    }
}

// 初期化処理
document.addEventListener('DOMContentLoaded', function() {
    // Firebase初期化
    const firebaseInitialized = initializeFirebase();
    
    if (firebaseInitialized) {
        // 通知マネージャーにVAPIDキーを設定
        if (window.notificationManager && vapidKey !== 'your-vapid-key-here') {
            window.notificationManager.vapidPublicKey = vapidKey;
        }
    }
});

// FCMトークンをGASに登録（クロスプラットフォーム対応）
async function registerFCMToken(token) {
    try {
        const deviceInfo = getDeviceInfo();
        
        // 登録の再試行ロジック
        let retries = 3;
        let result = null;
        
        while (retries > 0) {
            try {
                // GASにトークンを登録
                result = await (window.apiClient ? window.apiClient.sendRequest('registerFCMToken', {
                    fcmToken: token,
                    deviceInfo: deviceInfo,
                    timestamp: new Date().toISOString()
                }, {
                    timeout: 10000 // タイムアウトを10秒に設定
                }) : Promise.resolve({ success: false, error: 'API client unavailable' }));
                
                if (result.success) {
                    break; // 成功したらループを抜ける
                } else {
                    const msg = String(result.error || '').toLowerCase();
                    // 重複（409/23505）は成功扱い
                    if (msg.includes('duplicate key value') || msg.includes('23505') || msg.includes('409')) {
                        console.log('FCM token already registered. Treating as success.');
                        result = { success: true };
                        break;
                    }
                    console.warn(`FCM token registration failed (${retries} retries left):`, result.error);
                    retries--;
                    if (retries > 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
                    }
                }
            } catch (err) {
                const emsg = String(err && (err.message || err)).toLowerCase();
                if (emsg.includes('duplicate key value') || emsg.includes('23505') || emsg.includes('409')) {
                    console.log('FCM token already registered (caught). Treating as success.');
                    result = { success: true };
                    break;
                }
                console.warn(`FCM token registration error (${retries} retries left):`, err);
                retries--;
                if (retries > 0) {
                    await new Promise(resolve => setTimeout(resolve, 1000)); // 1秒待機
                }
            }
        }
        
        if (result && result.success) {
            console.log('FCM token registered successfully');
            // ローカルストレージに保存
            localStorage.setItem('fcmToken', token);
            localStorage.setItem('fcmTokenTimestamp', new Date().toISOString());
        } else {
            console.error('Failed to register FCM token:', result?.error || 'Registration failed after retries');
            // オフライン時はローカルストレージに保存
            localStorage.setItem('fcmToken', token);
            localStorage.setItem('fcmTokenTimestamp', new Date().toISOString());
        }
    } catch (error) {
        console.error('Error registering FCM token:', error);
        // オフライン時はローカルストレージに保存
        localStorage.setItem('fcmToken', token);
        localStorage.setItem('fcmTokenTimestamp', new Date().toISOString());
    }
}

// プラットフォーム検出（詳細版）
function getPlatform() {
    const userAgent = navigator.userAgent.toLowerCase();
    const platform = navigator.platform ? navigator.platform.toLowerCase() : '';
    
    // Android
    if (/android/.test(userAgent)) {
        return 'android';
    }
    
    // iOS
    if (/iphone|ipad|ipod/.test(userAgent) || 
        (platform === 'macintel' && 'ontouchend' in document)) {
        return 'ios';
    }
    
    // Windows
    if (/windows/.test(userAgent) || platform.includes('win')) {
        return 'windows';
    }
    
    // macOS
    if (/macintosh|mac os x/.test(userAgent) || platform === 'macintel') {
        return 'macos';
    }
    
    // Linux
    if (/linux/.test(userAgent) || platform.includes('linux')) {
        return 'linux';
    }
    
    // Chrome OS
    if (/cros/.test(userAgent)) {
        return 'chromeos';
    }
    
    return 'web';
}

// デバイス情報の取得
function getDeviceInfo() {
    return {
        platform: getPlatform(),
        userAgent: navigator.userAgent,
        language: navigator.language,
        onLine: navigator.onLine,
        cookieEnabled: navigator.cookieEnabled,
        doNotTrack: navigator.doNotTrack,
        screenWidth: screen.width,
        screenHeight: screen.height,
        windowWidth: window.innerWidth,
        windowHeight: window.innerHeight,
        pixelRatio: window.devicePixelRatio || 1,
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        timestamp: new Date().toISOString()
    };
}

// PWA対応状況のテスト
function testPWACompatibility() {
    const results = {
        platform: getPlatform(),
        serviceWorker: 'serviceWorker' in navigator,
        notifications: 'Notification' in window,
        pushManager: 'PushManager' in window,
        manifest: document.querySelector('link[rel="manifest"]') !== null,
        offline: 'onLine' in navigator,
        installPrompt: false,
        standalone: window.matchMedia('(display-mode: standalone)').matches,
        deviceInfo: getDeviceInfo()
    };
    
    // インストールプロンプトの検出
    window.addEventListener('beforeinstallprompt', (e) => {
        results.installPrompt = true;
        console.log('PWA install prompt available');
    });
    
    console.log('PWA Compatibility Test Results:', results);
    return results;
}

// 通知機能のテスト
function testNotificationSupport() {
    if ('Notification' in window) {
        console.log('Notification permission:', Notification.permission);
        
        if (Notification.permission === 'granted') {
            // テスト通知を送信
            new Notification('なずなポータル', {
                body: '通知機能が正常に動作しています',
                icon: 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                tag: 'test'
            });
            return true;
        } else if (Notification.permission === 'default') {
            Notification.requestPermission().then((permission) => {
                if (permission === 'granted') {
                    testNotificationSupport();
                }
            });
        }
    }
    return false;
}

// 設定値をグローバルに公開
window.firebaseConfig = firebaseConfig;
window.vapidKey = vapidKey;
window.initializeFirebase = initializeFirebase;
window.registerFCMToken = registerFCMToken;
window.getPlatform = getPlatform;
window.getDeviceInfo = getDeviceInfo;
window.testPWACompatibility = testPWACompatibility;
window.testNotificationSupport = testNotificationSupport;


[js/member-detail-fixed.js]
// メンバー詳細ページ用JavaScript

// シンプルなハッシュ（クライアント側）
if (!window.sha256) {
    async function sha256(text) {
        const enc = new TextEncoder();
        const data = enc.encode(text);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    window.sha256 = sha256;
}

// メンバーデータ（実際はSupabaseから取得）
const membersData = {
    '1': {
        id: 1,
        name: '会長 山田太郎',
        role: '全体統括',
        grade: '3年A組',
        message: '皆さんの声を大切にし、より良い学校生活の実現に向けて全力で取り組みます。些細なことでもお気軽にご相談ください。',
        longMessage: '生徒会長として、全校生徒の皆さんが充実した学校生活を送れるよう、日々努力しています。私たちの活動は、皆さん一人ひとりの声があってこそ成り立ちます。なずなフォーラムやアンケートを通じて、積極的にご意見をお聞かせください。一緒に素晴らしい学校を作っていきましょう。',
        image: null,
        responsibilities: [
            '生徒会全体の統括・運営',
            '学校行事の企画・調整',
            '生徒総会の司会進行',
            '学校側との連絡・調整',
            '各委員会の活動支援'
        ],
        achievements: [
            {
                title: '体育祭の企画改革',
                description: '昨年度の体育祭で新しい競技を導入し、参加率が20%向上',
                date: '2024年6月'
            },
            {
                title: '生徒会だよりのデジタル化',
                description: 'ポータルサイトを活用した情報発信システムを構築',
                date: '2024年4月'
            },
            {
                title: '学食メニュー改善プロジェクト',
                description: 'アンケート結果を基に新メニューを3品追加',
                date: '2024年9月'
            }
        ],
        hobbies: ['読書', 'バスケットボール', 'プログラミング'],
        motto: '一歩ずつ、確実に前進する',
        joinDate: '2023年4月'
    },
    '2': {
        id: 2,
        name: '副会長 田中花子',
        role: '企画運営',
        grade: '2年B組',
        message: 'イベント企画を通じて、みんなが楽しめる学校生活を作ることが私の使命です。新しいアイデアをお待ちしています！',
        longMessage: '副会長として、主に学校行事の企画・運営を担当しています。文化祭、体育祭、卒業式など、皆さんの思い出に残る素晴らしいイベントを作ることが私の目標です。創造力豊かなアイデアと実行力で、学校生活をより彩り豊かにしていきたいと思います。',
        image: null,
        responsibilities: [
            '学校行事の企画・運営',
            '委員会間の連絡調整',
            'イベント予算の管理等',
            '外部団体との連携',
            '広報活動の企画'
        ],
        achievements: [
            {
                title: '文化祭来場者数記録更新',
                description: '新しい企画により来場者数が過去最高を記録',
                date: '2024年10月'
            },
            {
                title: '生徒交流イベント開催',
                description: '他校との交流イベントを企画・実施',
                date: '2024年7月'
            }
        ],
        hobbies: ['音楽', 'イラスト', '映画鑑賞'],
        motto: '創造力で未来を切り開く',
        joinDate: '2023年4月'
    },
    '3': {
        id: 3,
        name: '書記 鈴木一郎',
        role: '議事録作成・情報管理',
        grade: '2年C組',
        message: '透明性のある活動を目指し、正確な情報管理に努めています。皆さんに分かりやすい情報発信を心がけています。',
        longMessage: '書記として、生徒会の活動記録や情報管理を担当しています。会議の議事録作成、資料整理、情報の整理・発信など、生徒会活動の記録係として重要な役割を果たしています。透明性のある組織運営を支え、皆さんに正確で分かりやすい情報をお届けします。',
        image: null,
        responsibilities: [
            '会議の議事録作成',
            '資料・文書の管理',
            '情報の整理・発信',
            'ポータルサイトの更新',
            '各種報告書の作成'
        ],
        achievements: [
            {
                title: '議事録システムの効率化',
                description: 'デジタル化により議事録作成時間を50%短縮',
                date: '2024年5月'
            },
            {
                title: '情報公開制度の導入',
                description: '生徒会活動の透明性を高める仕組みを構築',
                date: '2024年8月'
            }
        ],
        hobbies: ['写真', '文章執筆', 'パソコン'],
        motto: '正確性と効率性の両立',
        joinDate: '2023年9月'
    },
    '4': {
        id: 4,
        name: '会計 佐藤美咲',
        role: '予算管理・会計',
        grade: '1年D組',
        message: '予算を有効活用し、生徒会活動をしっかりと支えます。お金の使い方について透明性を保ち、説明責任を果たします。',
        longMessage: '会計として、生徒会の予算管理と会計業務を担当しています。限られた予算の中で最大の効果を得られるよう、計画的で効率的な資金運用を心がけています。また、予算の使途について透明性を保ち、定期的に収支報告を行っています。皆さんからの貴重な予算を大切に使わせていただきます。',
        image: null,
        responsibilities: [
            '予算の策定・管理',
            '収支の記録・報告',
            '支出の承認・監査',
            '会計資料の作成',
            '予算執行の効率化'
        ],
        achievements: [
            {
                title: '予算管理システムの導入',
                description: 'デジタル家計簿システムで収支管理を効率化',
                date: '2024年11月'
            },
            {
                title: '予算削減プロジェクト',
                description: '無駄な支出を見直し、年間予算の10%を削減',
                date: '2024年12月'
            }
        ],
        hobbies: ['数学', '料理', 'ゲーム'],
        motto: '一円を笑う者は一円に泣く',
        joinDate: '2024年4月'
    }
};

// URLパラメータからメンバーIDを取得
function getMemberIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id') || '1';
}

// ページ初期化
document.addEventListener('DOMContentLoaded', function() {
    console.log('Member detail page initializing...');
    
    // 基本機能を初期化
    initNavigation();
    initSidebar();
    
    // メンバー詳細を読み込み
    loadMemberDetail();
    
    // 他のメンバーリストを読み込み
    loadOtherMembers();
});

// メンバー詳細データキャッシュ
const memberDetailCache = {
    data: new Map(),
    lastFetch: new Map(),
    cacheDuration: 5 * 60 * 1000 // 5分
};

// キャッシュからメンバー詳細を取得
function getCachedMemberDetail(memberId) {
    if (!memberDetailCache.data.has(memberId) || !memberDetailCache.lastFetch.has(memberId)) {
        return null;
    }
    
    const now = Date.now();
    const lastFetch = memberDetailCache.lastFetch.get(memberId);
    if (now - lastFetch > memberDetailCache.cacheDuration) {
        // キャッシュ期限切れ
        memberDetailCache.data.delete(memberId);
        memberDetailCache.lastFetch.delete(memberId);
        return null;
    }
    
    return memberDetailCache.data.get(memberId);
}

// メンバー詳細をキャッシュに保存
function setCachedMemberDetail(memberId, data) {
    memberDetailCache.data.set(memberId, data);
    memberDetailCache.lastFetch.set(memberId, Date.now());
}

// メンバー詳細読み込み
async function loadMemberDetail() {
    const memberId = getMemberIdFromURL();
    
    // ローディング表示
    const heroContainer = document.getElementById('member-hero');
    if (heroContainer) {
        heroContainer.innerHTML = `
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>メンバー情報を読み込み中...</p>
            </div>
        `;
    }
    
    try {
        let member = null;
        
        // まずキャッシュをチェック
        const cachedMember = getCachedMemberDetail(memberId);
        if (cachedMember) {
            console.log('Using cached member detail for ID:', memberId);
            member = cachedMember;
            showInfoMessage('キャッシュされたデータを表示しています。');
        } else {
            // Supabaseからデータを取得
            if (window.supabaseQueries) {
                console.log('Loading member detail from Supabase for ID:', memberId);
                const { data, error } = await window.supabaseQueries.getTableData('council_members', {
                    filters: { id: memberId },
                    limit: 1
                });
                
                if (error) {
                    console.error('Supabase error loading');
                    const errorMsg = error.message || error.details || error.hint || '不明なエラー';
                    showErrorMessage(`データベースから情報を取得できませんでした: ${errorMsg}`);
                    showMemberNotFound();
                    return;
                } else if (data && data.length > 0) {
                    console.log('Loaded member detail from Supabase:', data[0]);
                    member = data[0];
                    
                    // 必要なフィールドが存在するかチェック
                    if (!member.name || !member.role) {
                        console.warn('Member data missing required fields:', member);
                        member = {
                            ...member,
                            name: member.name || 'データなし',
                            role: member.role || '未設定',
                            grade: member.grade || 'データなし',
                            message: member.message || member.longMessage || 'メッセージは準備中です',
                            longMessage: member.longMessage || member.message || '詳細メッセージは準備中です。',
                            responsibilities: member.responsibilities || ['準備中'],
                            achievements: member.achievements || [],
                            hobbies: member.hobbies || ['準備中'],
                            motto: member.motto || '準備中',
                            joinDate: member.joinDate || member.created_at || new Date().toISOString()
                        };
                    }
                    
                    // データをキャッシュに保存
                    setCachedMemberDetail(memberId, member);
                    showSuccessMessage('メンバー情報を正常に読み込みました。');
                } else {
                    console.log('No member found in Supabase - empty result');
                    console.log('Query details: ID filter =', memberId, ', RLS policy: is_active = true');
                    showErrorMessage('指定されたメンバーが見つかりませんでした。');
                    showMemberNotFound();
                    return;
                }
            } else {
                console.log('Supabase not available - using demo data');
                // Supabaseが利用できない場合はデモデータを使用
                const demoMember = membersData[memberId];
                if (demoMember) {
                    console.log('Using demo member data for ID:', memberId);
                    member = demoMember;
                    showInfoMessage('デモデータを表示しています。');
                } else {
                    showErrorMessage('データベースに接続できません。');
                    showMemberNotFound();
                    return;
                }
            }
        }
        
        if (!member) {
            showMemberNotFound();
            return;
        }
        
        // ページタイトルを更新
        document.title = `${member.name} - なずなポータル`;
        
        // ヘッダー情報を表示
        displayMemberHero(member);
        
        // 詳細情報を表示
        displayMemberProfile(member);
        displayMemberMessage(member);
        displayMemberResponsibilities(member);
        displayMemberAchievements(member);
        
    } catch (error) {
        console.error('Error loading member detail:', error);
        showErrorMessage('予期しないエラーが発生しました。');
        showMemberNotFound();
    }
}

// メンバーヒーロー表示
function displayMemberHero(member) {
    const heroContainer = document.getElementById('member-hero');
    if (!heroContainer) return;
    
    heroContainer.innerHTML = `
        <div class="member-hero-content">
            <div class="member-hero-avatar">
                ${member.image ? 
                    `<img src="${member.image}" alt="${member.name}" class="member-image">` :
                    `<div class="member-placeholder">
                        <i class="fas fa-user"></i>
                    </div>`
                }
            </div>
            <div class="member-hero-info">
                <h1 class="member-name">${member.name}</h1>
                <p class="member-role">${member.role}</p>
                <p class="member-grade">${member.grade}</p>
                <div class="member-meta">
                    <span class="member-join-date">
                        <i class="fas fa-calendar"></i>
                        ${formatJoinDate(member.joinDate)}から活動
                    </span>
                    <span class="member-motto">
                        <i class="fas fa-quote-left"></i>
                        ${member.motto}
                    </span>
                </div>
            </div>
        </div>
    `;
}

// プロフィール表示
function displayMemberProfile(member) {
    const profileContainer = document.getElementById('profile-content');
    if (!profileContainer) return;
    
    profileContainer.innerHTML = `
        <div class="profile-grid">
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-graduation-cap"></i>
                    学年・クラス
                </div>
                <div class="profile-value">${member.grade}</div>
            </div>
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-calendar-plus"></i>
                    活動開始
                </div>
                <div class="profile-value">${formatJoinDate(member.joinDate)}</div>
            </div>
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-heart"></i>
                    趣味
              </div>
              <div class="profile-value">
                  ${member.hobbies.map(hobby => `<span class="hobby-tag">${hobby}</span>`).join('')}
              </div>
          </div>
          <div class="profile-item">
              <div class="profile-label">
                  <i class="fas fa-star"></i>
                  座右の銘
              </div>
              <div class="profile-value">"${member.motto}"</div>
          </div>
      </div>
  `;
}

// メッセージ表示
function displayMemberMessage(member) {
    const messageContainer = document.getElementById('message-content');
    if (!messageContainer) return;
    
    messageContainer.innerHTML = `
        <div class="message-card">
            <div class="message-icon">
                <i class="fas fa-quote-left"></i>
            </div>
            <div class="message-text">
                <p>${member.longMessage}</p>
            </div>
        </div>
    `;
}

// 担当業務表示
function displayMemberResponsibilities(member) {
    const responsibilitiesContainer = document.getElementById('responsibilities-content');
    if (!responsibilitiesContainer) return;
    
    responsibilitiesContainer.innerHTML = `
        <div class="responsibilities-list">
            ${member.responsibilities.map(responsibility => `
                <div class="responsibility-item">
                    <i class="fas fa-check-circle"></i>
                    <span>${responsibility}</span>
                </div>
            `).join('')}
        </div>
    `;
}

// 活動実績表示
function displayMemberAchievements(member) {
    const achievementsContainer = document.getElementById('achievements-content');
    if (!achievementsContainer) return;
    
    if (!member.achievements || member.achievements.length === 0) {
        achievementsContainer.innerHTML = `
            <div class="no-achievements">
                <i class="fas fa-info-circle"></i>
                <p>まだ実績情報が登録されていません。</p>
            </div>
        `;
        return;
    }
    
    achievementsContainer.innerHTML = `
        <div class="achievements-timeline">
            ${member.achievements.map(achievement => `
                <div class="achievement-item">
                    <div class="achievement-date">
                        <i class="fas fa-calendar"></i>
                        ${achievement.date}
                    </div>
                    <div class="achievement-content">
                        <h4>${achievement.title}</h4>
                        <p>${achievement.description}</p>
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

// 他のメンバー表示
async function loadOtherMembers() {
    const otherMembersContainer = document.getElementById('other-members');
    if (!otherMembersContainer) return;
    
    const currentMemberId = getMemberIdFromURL();
    
    try {
        let otherMembers = [];
        
        // まずキャッシュをチェック（council.htmlのキャッシュを使用）
        if (window.getCachedCouncilMembers) {
            const cachedData = window.getCachedCouncilMembers();
            if (cachedData) {
                console.log('Using cached data for other members');
                otherMembers = cachedData.filter(member => member.id.toString() !== currentMemberId);
            }
        }
        
        // キャッシュにデータがない場合はSupabaseから取得
        if (otherMembers.length === 0) {
            if (window.supabaseQueries) {
                console.log('Loading other members from Supabase...');
                const { data, error } = await window.supabaseQueries.getCouncilMembers({ activeOnly: true });
                
                if (error) {
                    console.error('Supabase error loading other members:', error);
                    showErrorMessage('他のメンバー情報の読み込みに失敗しました。');
                } else if (data && data.length > 0) {
                    console.log('Loaded other members from Supabase:', data.length);
                    otherMembers = data.filter(member => member.id.toString() !== currentMemberId);
                } else {
                    console.log('No other members found in Supabase');
                }
            } else {
                console.log('Supabase not available');
                showErrorMessage('データベースに接続できません。');
            }
        }
        
        if (otherMembers.length === 0) {
            otherMembersContainer.innerHTML = `
                <div class="no-other-members">
                    <i class="fas fa-users"></i>
                    <p>他のメンバー情報がありません</p>
                </div>
            `;
            return;
        }
        
        otherMembersContainer.innerHTML = otherMembers.map(member => `
            <div class="other-member-item">
                <div class="other-member-avatar">
                    ${member.image ? 
                        `<img src="${member.image}" alt="${member.name}">` :
                        `<i class="fas fa-user"></i>`
                    }
                </div>
                <div class="other-member-info">
                    <h5>${member.name}</h5>
                    <p>${member.role}</p>
                    <a href="member-detail.html?id=${member.id}" class="other-member-link">
                        詳細を見る <i class="fas fa-arrow-right"></i>
                    </a>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading other members:', error);
        showErrorMessage('他のメンバー情報の読み込み中にエラーが発生しました。');
        otherMembersContainer.innerHTML = `
            <div class="no-other-members">
                <i class="fas fa-exclamation-triangle"></i>
                <p>メンバー情報の読み込みに失敗しました</p>
            </div>
        `;
    }
}

// メンバーが見つからない場合
function showMemberNotFound() {
    const heroContainer = document.getElementById('member-hero');
    const mainContent = document.querySelector('.member-detail-content');
    
    if (heroContainer) {
        heroContainer.innerHTML = `
            <div class="member-not-found">
                <div class="not-found-icon">
                    <i class="fas fa-user-slash"></i>
                </div>
                <h1>メンバーが見つかりません</h1>
                <p>指定されたメンバーは存在しないか、削除された可能性があります。</p>
                <a href="council.html" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i>
                    生徒会紹介に戻る
                </a>
            </div>
        `;
    }
    
    if (mainContent) {
        mainContent.style.display = 'none';
    }
}

// 日付フォーマット
function formatJoinDate(dateString) {
    const date = new Date(dateString);
    return `${date.getFullYear()}年${date.getMonth() + 1}月`;
}

// 生徒会ページでこの関数を呼び出すために、グローバルに公開
window.makeCouncilMembersClickable = makeCouncilMembersClickable;

// メッセージ表示関数（app.jsから移植）
function showSuccessMessage(message) {
    showMessage(message, 'success');
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

function showInfoMessage(message) {
    showMessage(message, 'info');
}

function showMessage(message, type) {
    const messageEl = document.createElement('div');
    messageEl.className = `message-toast message-${type}`;
    messageEl.innerHTML = `
        <div class="message-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(messageEl);
    
    // アニメーション表示
    setTimeout(() => {
        messageEl.classList.add('show');
    }, 100);
    
    // 5秒後に自動で消す
    setTimeout(() => {
        messageEl.classList.remove('show');
        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.remove();
            }
        }, 300);
    }, 5000);
}

// デバッグ用関数
if (CONFIG && CONFIG.APP && CONFIG.APP.DEBUG) {
    window.memberDetailDebug = {
        loadMember: (id) => {
            window.history.pushState({}, '', `?id=${id}`);
            loadMemberDetail();
        },
        getMemberData: (id) => membersData[id],
        getAllMembers: () => membersData
    };
    console.log('Member detail debug functions available: memberDetailDebug.loadMember(id), etc.');
}


[js/member-detail.js]
// メンバー詳細ページ用JavaScript

// シンプルなハッシュ（クライアント側）
if (!window.sha256) {
    async function sha256(text) {
        const enc = new TextEncoder();
        const data = enc.encode(text);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    window.sha256 = sha256;
}

// メンバーデータ（実際はSupabaseから取得）
const membersData = {
    '1': {
        id: 1,
        name: '会長 山田太郎',
        role: '全体統括',
        grade: '3年A組',
        message: '皆さんの声を大切にし、より良い学校生活の実現に向けて全力で取り組みます。些細なことでもお気軽にご相談ください。',
        longMessage: '生徒会長として、全校生徒の皆さんが充実した学校生活を送れるよう、日々努力しています。私たちの活動は、皆さん一人ひとりの声があってこそ成り立ちます。なずなフォーラムやアンケートを通じて、積極的にご意見をお聞かせください。一緒に素晴らしい学校を作っていきましょう。',
        image: null,
        responsibilities: [
            '生徒会全体の統括・運営',
            '学校行事の企画・調整',
            '生徒総会の司会進行',
            '学校側との連絡・調整',
            '各委員会の活動支援'
        ],
        achievements: [
            {
                title: '体育祭の企画改革',
                description: '昨年度の体育祭で新しい競技を導入し、参加率が20%向上',
                date: '2024年6月'
            },
            {
                title: '生徒会だよりのデジタル化',
                description: 'ポータルサイトを活用した情報発信システムを構築',
                date: '2024年4月'
            },
            {
                title: '学食メニュー改善プロジェクト',
                description: 'アンケート結果を基に新メニューを3品追加',
                date: '2024年9月'
            }
        ],
        hobbies: ['読書', 'バスケットボール', 'プログラミング'],
        motto: '一歩ずつ、確実に前進する',
        joinDate: '2023年4月'
    },
    '2': {
        id: 2,
        name: '副会長 田中花子',
        role: '企画運営',
        grade: '2年B組',
        message: 'イベント企画を通じて、みんなが楽しめる学校生活を作ることが私の使命です。新しいアイデアをお待ちしています！',
        longMessage: '副会長として、主に学校行事の企画・運営を担当しています。文化祭、体育祭、卒業式など、皆さんの思い出に残る素晴らしいイベントを作ることが私の目標です。創造力豊かなアイデアと実行力で、学校生活をより彩り豊かにしていきたいと思います。',
        image: null,
        responsibilities: [
            '学校行事の企画・運営',
            '委員会間の連絡調整',
            'イベント予算の管理等',
            '外部団体との連携',
            '広報活動の企画'
        ],
        achievements: [
            {
                title: '文化祭来場者数記録更新',
                description: '新しい企画により来場者数が過去最高を記録',
                date: '2024年10月'
            },
            {
                title: '生徒交流イベント開催',
                description: '他校との交流イベントを企画・実施',
                date: '2024年7月'
            }
        ],
        hobbies: ['音楽', 'イラスト', '映画鑑賞'],
        motto: '創造力で未来を切り開く',
        joinDate: '2023年4月'
    },
    '3': {
        id: 3,
        name: '書記 鈴木一郎',
        role: '議事録作成・情報管理',
        grade: '2年C組',
        message: '透明性のある活動を目指し、正確な情報管理に努めています。皆さんに分かりやすい情報発信を心がけています。',
        longMessage: '書記として、生徒会の活動記録や情報管理を担当しています。会議の議事録作成、資料整理、情報の整理・発信など、生徒会活動の記録係として重要な役割を果たしています。透明性のある組織運営を支え、皆さんに正確で分かりやすい情報をお届けします。',
        image: null,
        responsibilities: [
            '会議の議事録作成',
            '資料・文書の管理',
            '情報の整理・発信',
            'ポータルサイトの更新',
            '各種報告書の作成'
        ],
        achievements: [
            {
                title: '議事録システムの効率化',
                description: 'デジタル化により議事録作成時間を50%短縮',
                date: '2024年5月'
            },
            {
                title: '情報公開制度の導入',
                description: '生徒会活動の透明性を高める仕組みを構築',
                date: '2024年8月'
            }
        ],
        hobbies: ['写真', '文章執筆', 'パソコン'],
        motto: '正確性と効率性の両立',
        joinDate: '2023年9月'
    },
    '4': {
        id: 4,
        name: '会計 佐藤美咲',
        role: '予算管理・会計',
        grade: '1年D組',
        message: '予算を有効活用し、生徒会活動をしっかりと支えます。お金の使い方について透明性を保ち、説明責任を果たします。',
        longMessage: '会計として、生徒会の予算管理と会計業務を担当しています。限られた予算の中で最大の効果を得られるよう、計画的で効率的な資金運用を心がけています。また、予算の使途について透明性を保ち、定期的に収支報告を行っています。皆さんからの貴重な予算を大切に使わせていただきます。',
        image: null,
        responsibilities: [
            '予算の策定・管理',
            '収支の記録・報告',
            '支出の承認・監査',
            '会計資料の作成',
            '予算執行の効率化'
        ],
        achievements: [
            {
                title: '予算管理システムの導入',
                description: 'デジタル家計簿システムで収支管理を効率化',
                date: '2024年11月'
            },
            {
                title: '予算削減プロジェクト',
                description: '無駄な支出を見直し、年間予算の10%を削減',
                date: '2024年12月'
            }
        ],
        hobbies: ['数学', '料理', 'ゲーム'],
        motto: '一円を笑う者は一円に泣く',
        joinDate: '2024年4月'
    }
};

// URLパラメータからメンバーIDを取得
function getMemberIdFromURL() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id') || '1';
}

// ページ初期化
document.addEventListener('DOMContentLoaded', function() {
    const memberId = getMemberIdFromURL();
    console.log('Member detail page initializing...');
    console.log('Member ID from URL:', memberId);
    
    // 基本機能を初期化
    initNavigation();
    initSidebar();
    
    // Supabaseの初期化を待ってからメンバー詳細を読み込み
    waitForSupabaseInitialization();
    
    async function waitForSupabaseInitialization() {
        let attempts = 0;
        const maxAttempts = 50; // 5秒間待機 (100ms × 50)
        
        while (attempts < maxAttempts) {
            if (typeof window.supabaseQueries !== 'undefined' && window.supabaseQueries !== null) {
                console.log('SupabaseQueries initialized successfully');
                console.log('SupabaseQueries available:', typeof window.supabaseQueries !== 'undefined');
                
                // メンバー詳細を読み込み
                loadMemberDetail();
                
                // 他のメンバーリストを読み込み
                loadOtherMembers();
                return;
            }
            
            await new Promise(resolve => setTimeout(resolve, 100));
            attempts++;
        }
        
        console.log('SupabaseQueries initialization timeout - using demo mode');
        console.log('SupabaseQueries available:', typeof window.supabaseQueries !== 'undefined');
        
        // タイムアウトしてもメンバー詳細を読み込み
        loadMemberDetail();
        loadOtherMembers();
    }
});

// メンバー詳細データキャッシュ
const memberDetailCache = {
    data: new Map(),
    lastFetch: new Map(),
    cacheDuration: 5 * 60 * 1000 // 5分
};

// キャッシュからメンバー詳細を取得
function getCachedMemberDetail(memberId) {
    if (!memberDetailCache.data.has(memberId) || !memberDetailCache.lastFetch.has(memberId)) {
        return null;
    }
    
    const now = Date.now();
    const lastFetch = memberDetailCache.lastFetch.get(memberId);
    if (now - lastFetch > memberDetailCache.cacheDuration) {
        // キャッシュ期限切れ
        memberDetailCache.data.delete(memberId);
        memberDetailCache.lastFetch.delete(memberId);
        return null;
    }
    
    return memberDetailCache.data.get(memberId);
}

// メンバー詳細をキャッシュに保存
function setCachedMemberDetail(memberId, data) {
    memberDetailCache.data.set(memberId, data);
    memberDetailCache.lastFetch.set(memberId, Date.now());
}

// メンバー詳細読み込み
async function loadMemberDetail() {
    const memberId = getMemberIdFromURL();
    
    // ローディング表示
    const heroContainer = document.getElementById('member-hero');
    if (heroContainer) {
        heroContainer.innerHTML = `
            <div class="loading-container">
                <div class="loading-spinner"></div>
                <p>メンバー情報を読み込み中...</p>
            </div>
        `;
    }
    
    try {
        let member = null;
        
        // まずキャッシュをチェック
        const cachedMember = getCachedMemberDetail(memberId);
        if (cachedMember) {
            console.log('Using cached member detail for ID:', memberId);
            member = cachedMember;
            showInfoMessage('キャッシュされたデータを表示しています。');
        } else {
            // Supabaseからデータを取得
            if (window.supabaseQueries) {
                console.log('Loading member detail from Supabase for ID:', memberId);
                console.log('SupabaseQueries instance:', window.supabaseQueries);
                console.log('SupabaseQueries.isAvailable:', window.supabaseQueries.isAvailable);
                
                const { data, error } = await window.supabaseQueries.getTableData('council_members', {
                    filters: { id: memberId },
                    limit: 1
                });
                
                if (error) {
                    console.error('Supabase error loading');
                    const errorMsg = error.message || error.details || error.hint || '不明なエラー';
                    showErrorMessage(`データベースから情報を取得できませんでした: ${errorMsg}`);
                    showMemberNotFound();
                    return;
                } else if (data && data.length > 0) {
                    console.log('Loaded member detail from Supabase:', data[0]);
                    member = data[0];
                    
                    // 必要なフィールドが存在するかチェック
                    console.log('Raw Supabase data:', member);
                    
                    // Supabaseデータ構造をフロントエンド用に変換
                    member = {
                        ...member,
                        name: member.name || 'データなし',
                        grade: member.grade || 'データなし',
                        message: member.message || 'よろしくお願いします',
                        longMessage: member.bio || member.message || '詳細メッセージは準備中です。',
                        
                        // responsibilities は TEXT[] -> array変換
                        responsibilities: Array.isArray(member.responsibilities) ? member.responsibilities : 
                                       (member.responsibilities ? [member.responsibilities] : ['準備中']),
                        
                        // achievements は新しい構造で処理
                        achievements: member.achievements || [],
                        
                        // hobbies のデフォルト設定
                        hobbies: ['準備中'],
                        motto: member.message || '準備中',
                        joinDate: member.created_at || new Date().toISOString()
                    };
                    
                    console.log('Processed member data:', member);
                    
                    // データをキャッシュに保存
                    setCachedMemberDetail(memberId, member);
                    showSuccessMessage('メンバー情報を正常に読み込みました。');
                } else {
                    console.log('No member found in Supabase - empty result');
                    console.log('Query details: ID filter =', memberId, ', RLS policy: is_active = true');
                    showErrorMessage('指定されたメンバーが見つかりませんでした。');
                    showMemberNotFound();
                    return;
                }
            } else {
                console.log('Supabase not available - using demo data');
                // Supabaseが利用できない場合はデモデータを使用
                const demoMember = membersData[memberId];
                if (demoMember) {
                    console.log('Using demo member data for ID:', memberId);
                    member = demoMember;
                    showInfoMessage('デモデータを表示しています。');
                } else {
                    showErrorMessage('指定されたメンバーIDのデータが見つかりません。');
                    showInfoMessage(`利用可能なID: ${Object.keys(membersData).join(', ')}`);
                    showMemberNotFound();
                    return;
                }
            }
        }
        
        if (!member) {
            showMemberNotFound();
            return;
        }
        
        // ページタイトルを更新
        document.title = `${member.name} - なずなポータル`;
        
        // ヘッダー情報を表示
        displayMemberHero(member);
        
        // 詳細情報を表示
        displayMemberProfile(member);
        displayMemberMessage(member);
        displayMemberResponsibilities(member);
        displayMemberAchievements(member);
        
    } catch (error) {
        console.error('Error loading member detail:', error);
        showErrorMessage('予期しないエラーが発生しました。');
        showMemberNotFound();
    }
}

// メンバーヒーロー表示
function displayMemberHero(member) {
    const heroContainer = document.getElementById('member-hero');
    if (!heroContainer) return;
    
    heroContainer.innerHTML = `
        <div class="member-hero-content">
            <div class="member-hero-avatar">
                ${member.image ? 
                    `<img src="${member.image}" alt="${member.name}" class="member-image">` :
                    `<div class="member-placeholder">
                        <i class="fas fa-user"></i>
                    </div>`
                }
            </div>
            <div class="member-hero-info">
                <h1 class="member-name">${member.name}</h1>
                <p class="member-role">${member.role}</p>
                <p class="member-grade">${member.grade}</p>
                <div class="member-meta">
                    <span class="member-join-date">
                        <i class="fas fa-calendar"></i>
                        ${formatJoinDate(member.joinDate)}から活動
                    </span>
                    <span class="member-motto">
                        <i class="fas fa-quote-left"></i>
                        ${member.motto}
                    </span>
                </div>
            </div>
        </div>
    `;
}

// プロフィール表示
function displayMemberProfile(member) {
    const profileContainer = document.getElementById('profile-content');
    if (!profileContainer) return;
    
    profileContainer.innerHTML = `
        <div class="profile-grid">
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-graduation-cap"></i>
                    学年・クラス
                </div>
                <div class="profile-value">${member.grade}</div>
            </div>
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-calendar-plus"></i>
                    活動開始
                </div>
                <div class="profile-value">${formatJoinDate(member.joinDate)}</div>
            </div>
            <div class="profile-item">
                <div class="profile-label">
                    <i class="fas fa-heart"></i>
                    趣味
              </div>
              <div class="profile-value">
                  ${member.hobbies.map(hobby => `<span class="hobby-tag">${hobby}</span>`).join('')}
              </div>
          </div>
          <div class="profile-item">
              <div class="profile-label">
                  <i class="fas fa-star"></i>
                  座右の銘
              </div>
              <div class="profile-value">"${member.motto}"</div>
          </div>
      </div>
  `;
}

// メッセージ表示
function displayMemberMessage(member) {
    const messageContainer = document.getElementById('message-content');
    if (!messageContainer) return;
    
    messageContainer.innerHTML = `
        <div class="message-card">
            <div class="message-icon">
                <i class="fas fa-quote-left"></i>
            </div>
            <div class="message-text">
                <p>${member.longMessage}</p>
            </div>
        </div>
    `;
}

// 担当業務表示
function displayMemberResponsibilities(member) {
    const responsibilitiesContainer = document.getElementById('responsibilities-content');
    if (!responsibilitiesContainer) return;
    
    responsibilitiesContainer.innerHTML = `
        <div class="responsibilities-list">
            ${member.responsibilities.map(responsibility => `
                <div class="responsibility-item">
                    <i class="fas fa-check-circle"></i>
                    <span>${responsibility}</span>
                </div>
            `).join('')}
        </div>
    `;
}

// 活動実績表示
function displayMemberAchievements(member) {
    const achievementsContainer = document.getElementById('achievements-content');
    if (!achievementsContainer) return;
    
    if (!member.achievements || member.achievements.length === 0) {
        achievementsContainer.innerHTML = `
            <div class="no-achievements">
                <i class="fas fa-info-circle"></i>
                <p>まだ実績情報が登録されていません。</p>
            </div>
        `;
        return;
    }
    
    // 年別にソートしてグループ化
    const achievementsByYear = {};
    member.achievements.forEach(achievement => {
        const year = achievement.year || 2024;
        if (!achievementsByYear[year]) {
            achievementsByYear[year] = [];
        }
        achievementsByYear[year].push(achievement);
    });
    
    // 年順（降順）でソート
    const sortedYears = Object.keys(achievementsByYear).sort((a, b) => b - a);
    
    achievementsContainer.innerHTML = `
        <div class="achievements-timeline">
            ${sortedYears.map(year => `
                <div class="achievements-year-group">
                    <h3 class="year-header">
                        <i class="fas fa-calendar-alt"></i>
                        ${year}年
                    </h3>
                    <div class="achievements-year-content">
                        ${achievementsByYear[year]
                            .sort((a, b) => (b.month || 1) - (a.month || 1))
                            .map(achievement => `
                                <div class="achievement-item ${achievement.category || 'general'}">
                                    <div class="achievement-date">
                                        <i class="fas fa-calendar"></i>
                                        ${achievement.month || 1}月
                                    </div>
                                    <div class="achievement-content">
                                        <h4>${achievement.title}</h4>
                                        <p>${achievement.description || ''}</p>
                                        ${achievement.category ? `
                                            <span class="achievement-category category-${achievement.category}">
                                                ${getAchievementCategoryLabel(achievement.category)}
                                            </span>
                                        ` : ''}
                                    </div>
                                </div>
                            `).join('')
                        }
                    </div>
                </div>
            `).join('')}
        </div>
    `;
}

// 活動実績カテゴリのラベル取得
function getAchievementCategoryLabel(category) {
    const categoryLabels = {
        'general': '一般',
        'academic': '学習',
        'cultural': '文化',
        'sports': 'スポーツ',
        'leadership': 'リーダーシップ',
        'volunteer': 'ボランティア',
        'event': 'イベント'
    };
    return categoryLabels[category] || category;
}

// 他のメンバー表示
async function loadOtherMembers() {
    const otherMembersContainer = document.getElementById('other-members');
    if (!otherMembersContainer) return;
    
    const currentMemberId = getMemberIdFromURL();
    
    try {
        let otherMembers = [];
        
        // まずキャッシュをチェック（council.htmlのキャッシュを使用）
        if (window.getCachedCouncilMembers) {
            const cachedData = window.getCachedCouncilMembers();
            if (cachedData) {
                console.log('Using cached data for other members');
                otherMembers = cachedData.filter(member => member.id.toString() !== currentMemberId);
            }
        }
        
        // キャッシュにデータがない場合はSupabaseから取得
        if (otherMembers.length === 0) {
            if (window.supabaseQueries) {
                console.log('Loading other members from Supabase...');
                const { data, error } = await window.supabaseQueries.getCouncilMembers({ activeOnly: true });
                
                if (error) {
                    console.error('Supabase error loading other members:', error);
                    showErrorMessage('他のメンバー情報の読み込みに失敗しました。');
                } else if (data && data.length > 0) {
                    console.log('Loaded other members from Supabase:', data.length);
                    otherMembers = data.filter(member => member.id.toString() !== currentMemberId);
                } else {
                    console.log('No other members found in Supabase');
                }
            } else {
                console.log('Supabase not available');
                showErrorMessage('データベースに接続できません。');
            }
        }
        
        if (otherMembers.length === 0) {
            otherMembersContainer.innerHTML = `
                <div class="no-other-members">
                    <i class="fas fa-users"></i>
                    <p>他のメンバー情報がありません</p>
                </div>
            `;
            return;
        }
        
        otherMembersContainer.innerHTML = otherMembers.map(member => `
            <div class="other-member-item">
                <div class="other-member-avatar">
                    ${member.image ? 
                        `<img src="${member.image}" alt="${member.name}">` :
                        `<i class="fas fa-user"></i>`
                    }
                </div>
                <div class="other-member-info">
                    <h5>${member.name}</h5>
                    <p>${member.role}</p>
                    <a href="member-detail.html?id=${member.id}" class="other-member-link">
                        詳細を見る <i class="fas fa-arrow-right"></i>
                    </a>
                </div>
            </div>
        `).join('');
        
    } catch (error) {
        console.error('Error loading other members:', error);
        showErrorMessage('他のメンバー情報の読み込み中にエラーが発生しました。');
        otherMembersContainer.innerHTML = `
            <div class="no-other-members">
                <i class="fas fa-exclamation-triangle"></i>
                <p>メンバー情報の読み込みに失敗しました</p>
            </div>
        `;
    }
}

// メンバーが見つからない場合
function showMemberNotFound() {
    const heroContainer = document.getElementById('member-hero');
    const mainContent = document.querySelector('.member-detail-content');
    
    if (heroContainer) {
        heroContainer.innerHTML = `
            <div class="member-not-found">
                <div class="not-found-icon">
                    <i class="fas fa-user-slash"></i>
                </div>
                <h1>メンバーが見つかりません</h1>
                <p>指定されたメンバーは存在しないか、削除された可能性があります。</p>
                <a href="council.html" class="btn btn-primary">
                    <i class="fas fa-arrow-left"></i>
                    生徒会紹介に戻る
                </a>
            </div>
        `;
    }
    
    if (mainContent) {
        mainContent.style.display = 'none';
    }
}

// 日付フォーマット
function formatJoinDate(dateString) {
    const date = new Date(dateString);
    return `${date.getFullYear()}年${date.getMonth() + 1}月`;
}

// 生徒会ページでこの関数を呼び出すために、グローバルに公開
window.makeCouncilMembersClickable = makeCouncilMembersClickable;

// メッセージ表示関数（app.jsから移植）
function showSuccessMessage(message) {
    showMessage(message, 'success');
}

function showErrorMessage(message) {
    showMessage(message, 'error');
}

function showInfoMessage(message) {
    showMessage(message, 'info');
}

function showMessage(message, type) {
    const messageEl = document.createElement('div');
    messageEl.className = `message-toast message-${type}`;
    messageEl.innerHTML = `
        <div class="message-content">
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(messageEl);
    
    // アニメーション表示
    setTimeout(() => {
        messageEl.classList.add('show');
    }, 100);
    
    // 5秒後に自動で消す
    setTimeout(() => {
        messageEl.classList.remove('show');
        setTimeout(() => {
            if (messageEl.parentNode) {
                messageEl.remove();
            }
        }, 300);
    }, 5000);
}

// デバッグ用関数
if (CONFIG && CONFIG.APP && CONFIG.APP.DEBUG) {
    window.memberDetailDebug = {
        loadMember: (id) => {
            window.history.pushState({}, '', `?id=${id}`);
            loadMemberDetail();
        },
        getMemberData: (id) => membersData[id],
        getAllMembers: () => membersData
    };
    console.log('Member detail debug functions available: memberDetailDebug.loadMember(id), etc.');
}


[js/notification-manager.js]
// 通知管理システム（GAS + FCM連携版、iOS PWA対応強化版）

class NotificationManager {
    constructor() {
        this.isSupported = 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;
        this.registration = null;
        this.fcmToken = null;
        this.vapidPublicKey = (window.vapidKey || (CONFIG.FIREBASE && CONFIG.FIREBASE.VAPID_KEY)) || null; // Firebase Consoleから取得したVAPIDキー
        this.gasEndpoint = CONFIG.GAS_URL; // GASのWebAppエンドポイント
        
        // iOS PWA検出
        this.isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        this.isPWA = window.matchMedia('(display-mode: standalone)').matches || 
                    window.navigator.standalone === true;
        this.isIOSPWA = this.isIOS && this.isPWA;
        
        console.log('NotificationManager initialized. Support:', this.isSupported, 'iOS PWA:', this.isIOSPWA);
    }
    
    // 初期化
    async init() {
        if (!this.isSupported) {
            console.warn('Push messaging is not supported');
            return false;
        }
        
        try {
            // Service Worker登録を取得
            this.registration = await navigator.serviceWorker.getRegistration();
            if (!this.registration) {
                console.error('Service Worker not registered');
                return false;
            }
            
            console.log('NotificationManager initialized successfully');
            return true;
        } catch (error) {
            console.error('Error initializing NotificationManager:', error);
            return false;
        }
    }
    
    // 通知許可の要求（iOS PWA対応強化版）
    async requestPermission() {
        if (!this.isSupported) {
            throw new Error('Push messaging is not supported');
        }
        
        try {
            // iOS PWA環境の検出
            const iOSVersion = this.getIOSVersion();
            const isIOS16_4OrLater = this.isIOSPWA && iOSVersion && iOSVersion >= 16.4;
            
            // iOS 16.4以降のPWAの場合は特別な処理
            if (isIOS16_4OrLater) {
                console.log('iOS 16.4以降のPWA環境で通知許可を要求します');
                
                // 通知許可状態を確認
                if (Notification.permission === 'granted') {
                    console.log('通知許可は既に付与されています');
                    await this.subscribeToPush();
                    return true;
                }
                
                // ユーザーに通知の重要性を説明
                const confirmMessage = 'このアプリからの通知を受け取るには許可が必要です。\n\n重要なお知らせや緊急情報をお届けするために通知を使用します。\n\n「許可」を選択してください。';
                const userConfirmed = confirm(confirmMessage);
                
                if (!userConfirmed) {
                    console.log('ユーザーが通知の説明を拒否しました');
                    throw new Error('User declined notification explanation');
                }
            }
            
            // 通知許可を要求
            const permission = await Notification.requestPermission();
            console.log('Notification permission:', permission);
            
            if (permission === 'granted') {
                await this.subscribeToPush();
                
                // iOS PWAの場合は確認メッセージを表示
                if (this.isIOSPWA) {
                    setTimeout(() => {
                        this.showNotificationSuccessMessage();
                    }, 1000);
                }
                
                return true;
            } else if (permission === 'denied') {
                // iOS PWAの場合は設定方法を案内
                if (this.isIOSPWA) {
                    this.showIOSNotificationSettings();
                }
                throw new Error('Notification permission denied');
            } else {
                throw new Error('Notification permission dismissed');
            }
        } catch (error) {
            console.error('Error requesting notification permission:', error);
            throw error;
        }
    }
    
    // 通知許可成功メッセージの表示
    showNotificationSuccessMessage() {
        const messageElement = document.createElement('div');
        messageElement.className = 'notification-success-message';
        messageElement.innerHTML = `
            <div class="success-content">
                <div class="success-icon">✓</div>
                <div class="success-text">通知の設定が完了しました</div>
                <button class="success-close">閉じる</button>
            </div>
        `;
        
        // スタイルを適用
        const styleId = 'notification-success-style';
        if (!document.getElementById(styleId)) {
            const style = document.createElement('style');
            style.id = styleId;
            style.textContent = `
                .notification-success-message {
                    position: fixed;
                    bottom: 20px;
                    left: 50%;
                    transform: translateX(-50%);
                    background: #4a7c59;
                    color: white;
                    padding: 12px 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
                    z-index: 10000;
                    animation: success-fade-in 0.3s ease-out;
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                }
                .success-content {
                    display: flex;
                    align-items: center;
                }
                .success-icon {
                    font-size: 18px;
                    margin-right: 10px;
                }
                .success-text {
                    font-size: 14px;
                    font-weight: 500;
                }
                .success-close {
                    background: none;
                    border: none;
                    color: white;
                    margin-left: 15px;
                    font-size: 14px;
                    cursor: pointer;
                    opacity: 0.8;
                }
                @keyframes success-fade-in {
                    from { opacity: 0; transform: translateX(-50%) translateY(20px); }
                    to { opacity: 1; transform: translateX(-50%) translateY(0); }
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(messageElement);
        
        // 閉じるボタンのイベント
        const closeButton = messageElement.querySelector('.success-close');
        closeButton.addEventListener('click', () => {
            messageElement.remove();
        });
        
        // 5秒後に自動的に消える
        setTimeout(() => {
            if (messageElement.parentNode) {
                messageElement.remove();
            }
        }, 5000);
    }
    
    // iOS通知設定案内の表示
    showIOSNotificationSettings() {
        const messageElement = document.createElement('div');
        messageElement.className = 'ios-settings-guide';
        messageElement.innerHTML = `
            <div class="settings-content">
                <div class="settings-header">
                    <div class="settings-title">通知を有効にするには</div>
                    <button class="settings-close">&times;</button>
                </div>
                <div class="settings-body">
                    <p>1. iOSの「設定」アプリを開く</p>
                    <p>2. 「Safari」を選択</p>
                    <p>3. 「詳細」をタップ</p>
                    <p>4. このWebサイトの設定で「通知」をオンにする</p>
                </div>
            </div>
        `;
        
        // スタイルを適用
        const styleId = 'ios-settings-guide-style';
        if (!document.getElementById(styleId)) {
            const style = document.createElement('style');
            style.id = styleId;
            style.textContent = `
                .ios-settings-guide {
                    position: fixed;
                    top: 50%;
                    left: 50%;
                    transform: translate(-50%, -50%);
                    background: white;
                    width: 90%;
                    max-width: 350px;
                    border-radius: 12px;
                    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
                    z-index: 10001;
                    font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                }
                .settings-content {
                    padding: 20px;
                }
                .settings-header {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    margin-bottom: 15px;
                }
                .settings-title {
                    font-size: 18px;
                    font-weight: 600;
                    color: #333;
                }
                .settings-close {
                    background: none;
                    border: none;
                    font-size: 24px;
                    cursor: pointer;
                    color: #999;
                }
                .settings-body {
                    color: #555;
                    font-size: 14px;
                    line-height: 1.5;
                }
                .settings-body p {
                    margin: 8px 0;
                }
            `;
            document.head.appendChild(style);
        }
        
        document.body.appendChild(messageElement);
        
        // 閉じるボタンのイベント
        const closeButton = messageElement.querySelector('.settings-close');
        closeButton.addEventListener('click', () => {
            messageElement.remove();
        });
    }
    
    // FCMトークンの取得と登録
    async subscribeToPush() {
        try {
            // Firebase SDKを使用してFCMトークンを取得
            if (typeof firebase !== 'undefined' && firebase.messaging) {
                // Firebase SDK使用時
                const messaging = firebase.messaging();
                
                // ServiceWorker登録を取得して getToken に渡す
                const swReg = await navigator.serviceWorker.getRegistration('./');
                const tokenOptions = this.vapidPublicKey ? { vapidKey: this.vapidPublicKey } : {};
                if (swReg) {
                    tokenOptions.serviceWorkerRegistration = swReg;
                }
                this.fcmToken = await messaging.getToken(tokenOptions);
                console.log('FCM token obtained:', this.fcmToken);
                
                // Firebase v9 compatでは onTokenRefresh は提供されないため、
                // SW の更新時や許可変更時に再取得する実装は別途行う
                
                // フォアグラウンドメッセージの処理
                messaging.onMessage((payload) => {
                    this.handleForegroundMessage(payload);
                });
                
            } else {
                // Service Worker Push APIを使用（フォールバック）
                this.subscription = await this.registration.pushManager.getSubscription();
                
                if (!this.subscription) {
                    const subscribeOptions = {
                        userVisibleOnly: true,
                        applicationServerKey: this.urlBase64ToUint8Array(this.vapidPublicKey || this.getDefaultVapidKey())
                    };
                    
                    this.subscription = await this.registration.pushManager.subscribe(subscribeOptions);
                }
                
                // FCMトークンとして endpoint を使用
                this.fcmToken = this.subscription.endpoint;
                console.log('Push subscription created (fallback mode)');
            }
            
            // デバイス情報をGASに登録
            await this.registerDevice();
            
            return this.fcmToken;
        } catch (error) {
            console.error('Failed to subscribe to push:', error);
            throw error;
        }
    }
    
    // デバイス情報をGASに登録
    async registerDevice() {
        try {
            if (!this.fcmToken) {
                throw new Error('FCM token not available');
            }
            
            const deviceData = {
                action: 'registerDevice',
                fcmToken: this.fcmToken,
                userAgent: navigator.userAgent,
                platform: this.getPlatform(),
                browser: this.getBrowser(),
                deviceInfo: {
                    screen: {
                        width: screen.width,
                        height: screen.height
                    },
                    language: navigator.language,
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    online: navigator.onLine
                }
            };
            
            const result = await apiClient.sendRequest('registerDevice', {
                fcmToken: this.fcmToken,
                userAgent: navigator.userAgent,
                platform: this.getPlatform(),
                browser: this.getBrowser(),
                deviceInfo: {
                    userAgent: navigator.userAgent,
                    platform: this.getPlatform(),
                    browser: this.getBrowser(),
                    screen: {
                        width: screen.width,
                        height: screen.height
                    },
                    language: navigator.language,
                    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
                    online: navigator.onLine
                }
            });
            
            if (!result.success) {
                const errMsg = String(result.error || '');
                // 重複トークン（ユニーク制約違反）は成功扱い
                if (errMsg.includes('duplicate key value') || errMsg.includes('23505')) {
                    console.log('Device already registered for this token. Treating as success.');
                } else {
                    throw new Error(result.error || 'Device registration failed');
                }
            }
            
            console.log('Device registered successfully:', result.data);
            
            // ローカルストレージに保存
            localStorage.setItem('fcm-token', this.fcmToken);
            localStorage.setItem('device-registered', new Date().toISOString());
            
            return result.data;
            
        } catch (error) {
            // GAS 側からのJSONPエラー（例: 409/23505 重複トークン）はここに来る
            const msg = String(error && (error.message || error))
                .toLowerCase();
            if (msg.includes('duplicate key value') || msg.includes('23505') || msg.includes('409')) {
                console.log('Device already registered (duplicate token). Treating as success.');
                // ローカル保存のみ行い、成功として扱う
                localStorage.setItem('fcm-token', this.fcmToken || localStorage.getItem('fcm-token') || '');
                localStorage.setItem('device-registered', new Date().toISOString());
                return { alreadyRegistered: true };
            }
            console.error('Error registering device:', error);
            throw error;
        }
    }
    
    // プッシュ通知の購読解除
    async unsubscribeFromPush() {
        try {
            if (this.fcmToken) {
                // GASにデバイス登録解除を通知
                await this.unregisterDevice();
                
                // Firebase SDK使用時
                if (typeof firebase !== 'undefined' && firebase.messaging) {
                    const messaging = firebase.messaging();
                    await messaging.deleteToken(this.fcmToken);
                }
                
                // Service Worker Push API使用時
                if (this.subscription) {
                    await this.subscription.unsubscribe();
                    this.subscription = null;
                }
                
                this.fcmToken = null;
                
                // ローカルストレージをクリア
                localStorage.removeItem('fcm-token');
                localStorage.removeItem('device-registered');
                
                console.log('Push subscription removed');
                return true;
            }
            return false;
        } catch (error) {
            console.error('Error unsubscribing from push:', error);
            throw error;
        }
    }
    
    // デバイス登録解除
    async unregisterDevice() {
        try {
            if (!this.fcmToken) {
                return;
            }
            
            const result = await apiClient.sendRequest('unregisterDevice', {
                fcmToken: this.fcmToken
            });
            
            if (!result.success) {
                console.warn('Device unregistration failed:', result.error);
            } else {
                console.log('Device unregistered successfully');
            }
            
        } catch (error) {
            console.error('Error unregistering device:', error);
            throw error;
        }
    }
    
    // 現在の購読状態を取得
    async getSubscriptionStatus() {
        try {
            if (!this.registration) {
                return { supported: false, subscribed: false };
            }
            
            const permission = Notification.permission;
            const hasToken = !!this.fcmToken || !!localStorage.getItem('fcm-token');
            
            return {
                supported: this.isSupported,
                permission: permission,
                subscribed: hasToken,
                fcmToken: this.fcmToken || localStorage.getItem('fcm-token'),
                lastRegistered: localStorage.getItem('device-registered')
            };
        } catch (error) {
            console.error('Error getting subscription status:', error);
            return { supported: false, subscribed: false, error: error.message };
        }
    }
    
    // フォアグラウンドメッセージの処理
    handleForegroundMessage(payload) {
        console.log('Foreground message received:', payload);
        
        // iOS PWAの場合の処理
        if (this.isIOSPWA) {
            // iOS 16.4以降かどうかを確認
            const iOSVersion = this.getIOSVersion();
            const isIOS16_4OrLater = iOSVersion && iOSVersion >= 16.4;
            
            if (!isIOS16_4OrLater) {
                // iOS 16.4未満の場合はカスタムUI
                this.handleIOSPWANotification(payload);
                return;
            }
            // iOS 16.4以降は標準APIを使用（以下の処理に続く）
        }
        
        const { notification, data } = payload;
        
        // カスタム通知を表示
        if (notification) {
            const options = {
                body: notification.body,
                icon: notification.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                badge: notification.badge || '/images/badge-72x72.png',
                tag: data?.category || 'general',
                requireInteraction: data?.priority === '2',
                actions: notification.actions || [],
                data: data || {}
            };
            
            if ('serviceWorker' in navigator && navigator.serviceWorker.ready) {
                navigator.serviceWorker.ready.then(registration => {
                    registration.showNotification(notification.title || 'お知らせ', options);
                });
            } else {
                // フォールバック
                new Notification(notification.title || 'お知らせ', options);
            }
        }
    }
    
    // iOS PWA向けの特別な通知処理
    handleIOSPWANotification(payload) {
        try {
            // iOS PWAではService Workerの通知が機能しない場合があるため、
            // 代わりにネイティブのアラートやカスタムUIを使用
            
            // 通知データの取得
            const notification = payload.notification || {};
            const data = payload.data || {};
            const notificationTitle = notification.title || 'お知らせ';
            const notificationBody = notification.body || '';
            const notificationUrl = data.url || './';
            const notificationIcon = notification.icon || './images/icon-192x192.png';
            const notificationCategory = data.category || 'general';
            
            // iOS 16.4以降かどうかを確認
            const iOSVersion = this.getIOSVersion();
            const isIOS16_4OrLater = iOSVersion && iOSVersion >= 16.4;
            
            // iOS 16.4以降でPWAの場合は標準のNotification APIを試す
            if (isIOS16_4OrLater && this.isIOSPWA && 'Notification' in window && Notification.permission === 'granted') {
                try {
                    console.log('iOS 16.4以降のPWAで標準通知APIを使用します');
                    
                    // 標準のNotification APIを使用
                    const notification = new Notification(notificationTitle, {
                        body: notificationBody,
                        icon: notificationIcon,
                        badge: './images/badge-72x72.png',
                        tag: notificationCategory,
                        data: { url: notificationUrl },
                        requireInteraction: data.priority === '2'
                    });
                    
                    notification.onclick = function() {
                        window.focus();
                        window.location.href = notificationUrl;
                        this.close();
                    };
                    
                    return;
                } catch (error) {
                    console.warn('標準APIでの通知に失敗しました。カスタムUIにフォールバックします:', error);
                    // 標準APIが失敗した場合はカスタムUIにフォールバック
                }
            }
            
            // カスタム通知UIを作成
            const notificationElement = document.createElement('div');
            notificationElement.className = 'ios-pwa-notification';
            notificationElement.innerHTML = `
                <div class="notification-content">
                    <div class="notification-header">
                        <img src="./images/icon-48x48.png" alt="Icon" class="notification-icon">
                        <div class="notification-title">${notificationTitle}</div>
                        <button class="notification-close">&times;</button>
                    </div>
                    <div class="notification-body">${notificationBody}</div>
                    <div class="notification-actions">
                        <button class="notification-action-view">詳細を見る</button>
                    </div>
                </div>
            `;
            
            // スタイルを適用
            const styleId = 'ios-pwa-notification-style';
            if (!document.getElementById(styleId)) {
                const style = document.createElement('style');
                style.id = styleId;
                style.textContent = `
                    .ios-pwa-notification {
                        position: fixed;
                        top: 10px;
                        left: 50%;
                        transform: translateX(-50%);
                        width: 90%;
                        max-width: 400px;
                        background: rgba(250, 250, 250, 0.98);
                        border-radius: 12px;
                        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
                        z-index: 10000;
                        animation: notification-slide-in 0.3s ease-out;
                        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
                    }
                    .notification-content {
                        padding: 16px;
                    }
                    .notification-header {
                        display: flex;
                        align-items: center;
                        margin-bottom: 10px;
                    }
                    .notification-icon {
                        width: 24px;
                        height: 24px;
                        margin-right: 10px;
                        border-radius: 6px;
                    }
                    .notification-title {
                        flex-grow: 1;
                        font-weight: 600;
                        font-size: 16px;
                        color: #333;
                    }
                    .notification-close {
                        background: none;
                        border: none;
                        font-size: 22px;
                        cursor: pointer;
                        padding: 0 5px;
                        color: #999;
                    }
                    .notification-body {
                        padding-left: 34px;
                        margin-bottom: 12px;
                        font-size: 14px;
                        color: #555;
                        line-height: 1.4;
                    }
                    .notification-actions {
                        display: flex;
                        justify-content: flex-end;
                    }
                    .notification-action-view {
                        background: #4a7c59;
                        color: white;
                        border: none;
                        border-radius: 16px;
                        padding: 6px 16px;
                        font-size: 13px;
                        font-weight: 500;
                        cursor: pointer;
                    }
                    @keyframes notification-slide-in {
                        from { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                        to { transform: translateX(-50%) translateY(0); opacity: 1; }
                    }
                    @keyframes notification-slide-out {
                        from { transform: translateX(-50%) translateY(0); opacity: 1; }
                        to { transform: translateX(-50%) translateY(-100%); opacity: 0; }
                    }
                `;
                document.head.appendChild(style);
            }
            
            document.body.appendChild(notificationElement);
            
            // クリックイベントを設定
            notificationElement.addEventListener('click', () => {
                window.location.href = notificationUrl;
                notificationElement.remove();
            });
            
            // 詳細ボタンのイベント
            const viewButton = notificationElement.querySelector('.notification-action-view');
            viewButton.addEventListener('click', (e) => {
                e.stopPropagation();
                window.location.href = notificationUrl;
                notificationElement.remove();
            });
            
            // 閉じるボタンのイベント
            const closeButton = notificationElement.querySelector('.notification-close');
            closeButton.addEventListener('click', (e) => {
                e.stopPropagation();
                notificationElement.remove();
            });
            
            // 一定時間後に自動的に消える
            setTimeout(() => {
                if (notificationElement.parentNode) {
                    notificationElement.style.animation = 'notification-slide-out 0.3s ease-in';
                    setTimeout(() => notificationElement.remove(), 300);
                }
            }, 5000);
            
            // 通知音を再生（オプション）
            if (notification.sound !== 'silent') {
                try {
                    const audio = new Audio('/sounds/notification.mp3');
                    audio.play().catch(e => console.log('Could not play notification sound:', e));
                } catch (e) {
                    console.log('Sound playback error:', e);
                }
            }
            
        } catch (error) {
            console.error('Error handling iOS PWA notification:', error);
        }
    }
    
    // テスト通知の送信
    async sendTestNotification(options = {}) {
        try {
            // iOS PWAの場合は特別な処理
            if (this.isIOSPWA) {
                // iOS 16.4以降かどうかを確認
                const iOSVersion = this.getIOSVersion();
                const isIOS16_4OrLater = iOSVersion && iOSVersion >= 16.4;
                
                console.log(`iOS PWA環境でテスト通知を送信します。iOS バージョン: ${iOSVersion}`);
                
                // テスト通知のデータ
                const testNotification = {
                    notification: {
                        title: options.title || 'テスト通知',
                        body: options.body || 'これはテスト通知です。通知システムが正常に動作しています。',
                        icon: options.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                        badge: options.badge || './images/badge-72x72.png'
                    },
                    data: {
                        url: options.url || window.location.href,
                        timestamp: new Date().toISOString(),
                        category: options.category || 'test',
                        priority: options.requireInteraction ? '2' : '1'
                    }
                };
                
                // iOS 16.4以降は標準のNotification APIを試す
                if (isIOS16_4OrLater && 'serviceWorker' in navigator && 'PushManager' in window) {
                    try {
                        console.log('iOS 16.4以降のため、標準のNotification APIを使用します');
                        const notification = new Notification(options.title || 'テスト通知 (標準API)', {
                            body: options.body || 'これはiOS 16.4以降の標準APIを使用したテスト通知です。',
                            icon: options.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                            badge: options.badge || './images/badge-72x72.png',
                            tag: options.category || 'test-notification'
                        });
                        
                        notification.onclick = function() {
                            window.focus();
                            this.close();
                        };
                        
                        return true;
                    } catch (error) {
                        console.warn('標準APIでの通知に失敗しました。カスタムUIにフォールバックします:', error);
                        // フォールバック：カスタムUI通知
                        this.handleForegroundMessage(testNotification);
                        return true;
                    }
                } else {
                    // iOS 16.4未満またはPush APIが利用できない場合はカスタムUIで表示
                    console.log('カスタム通知UIを使用します');
                    this.handleForegroundMessage(testNotification);
                    return true;
                }
            }
            
            // 通常のブラウザ向け処理
            if (Notification.permission === 'granted') {
                const notification = new Notification(options.title || 'テスト通知', {
                    body: options.body || 'これはテスト通知です。通知システムが正常に動作しています。',
                    icon: options.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
                    badge: options.badge || './images/badge-72x72.png',
                    tag: options.category || 'test-notification',
                    requireInteraction: options.requireInteraction || false
                });
                
                notification.onclick = function() {
                    window.focus();
                    this.close();
                };
                
                // 5秒後に自動で閉じる
                setTimeout(() => {
                    notification.close();
                }, 5000);
                
                return true;
            } else {
                throw new Error('Notification permission not granted');
            }
        } catch (error) {
            console.error('Error sending test notification:', error);
            throw error;
        }
    }
    
    // iOS PWA向けの通知サポート状況を確認
    checkIOSPWASupport() {
        // iOS バージョンの取得
        const iOSVersion = this.getIOSVersion();
        const isIOS16_4OrLater = iOSVersion && iOSVersion >= 16.4;
        
        const supportInfo = {
            isIOS: this.isIOS,
            isPWA: this.isPWA,
            isIOSPWA: this.isIOSPWA,
            iOSVersion: iOSVersion,
            isIOS16_4OrLater: isIOS16_4OrLater,
            notificationPermission: Notification.permission,
            serviceWorkerSupported: 'serviceWorker' in navigator,
            pushManagerSupported: 'PushManager' in window,
            fcmSupported: typeof firebase !== 'undefined' && firebase.messaging,
            customNotificationUI: this.isIOSPWA,
            fullPushSupport: isIOS16_4OrLater && this.isIOSPWA
        };
        
        console.log('通知サポート状況:', supportInfo);
        
        // iOS 16.4以降のPWAでは完全なプッシュ通知がサポートされている
        if (this.isIOSPWA) {
            if (isIOS16_4OrLater) {
                console.log('iOS 16.4以降のPWAで実行中です。完全なプッシュ通知がサポートされています。');
            } else {
                console.log('iOS 16.4未満のPWAで実行中です。カスタム通知UIを使用します。');
            }
        }
        
        return supportInfo;
    }
    
    // iOSバージョンを取得
    getIOSVersion() {
        if (!this.isIOS) return null;
        
        const match = navigator.userAgent.match(/OS\s([0-9_]+)/);
        if (match && match[1]) {
            return parseFloat(match[1].replace('_', '.'));
        }
        return null;
    }
    
    // ユーティリティ関数：Base64をUint8Arrayに変換
    urlBase64ToUint8Array(base64String) {
        const padding = '='.repeat((4 - base64String.length % 4) % 4);
        const base64 = (base64String + padding)
            .replace(/\-/g, '+')
            .replace(/_/g, '/');
        
        const rawData = window.atob(base64);
        const outputArray = new Uint8Array(rawData.length);
        
        for (let i = 0; i < rawData.length; ++i) {
            outputArray[i] = rawData.charCodeAt(i);
        }
        return outputArray;
    }
    
    // ユーティリティ関数：ArrayBufferをBase64に変換
    arrayBufferToBase64(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = '';
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return window.btoa(binary);
    }
    
    // プラットフォーム検出
    getPlatform() {
        const userAgent = navigator.userAgent.toLowerCase();
        
        if (/android/.test(userAgent)) return 'android';
        if (/iphone|ipad|ipod/.test(userAgent)) return 'ios';
        if (/windows/.test(userAgent)) return 'windows';
        if (/macintosh|mac os x/.test(userAgent)) return 'macos';
        if (/linux/.test(userAgent)) return 'linux';
        
        return 'web';
    }
    
    // ブラウザ検出
    getBrowser() {
        const userAgent = navigator.userAgent.toLowerCase();
        
        if (/chrome/.test(userAgent) && !/edge/.test(userAgent)) return 'chrome';
        if (/firefox/.test(userAgent)) return 'firefox';
        if (/safari/.test(userAgent) && !/chrome/.test(userAgent)) return 'safari';
        if (/edge/.test(userAgent)) return 'edge';
        if (/opera/.test(userAgent)) return 'opera';
        
        return 'unknown';
    }
    
    // デフォルトのVAPIDキー（実際の運用では適切なキーを設定）
    getDefaultVapidKey() {
        // 実際の運用時はFirebase ConsoleのVAPIDキーを設定
        return 'BEl62iUYgUivxIkv69yViEuiBIa40HI0DLb5vdNt6ZIjBhgPCIKKhYhUGrTFDe4sHOVGKLFXfIGr3Qc4Jt6QE';
    }
}

// 通知UI管理
class NotificationUI {
    constructor(notificationManager) {
        this.manager = notificationManager;
        this.statusElement = null;
        this.enableButton = null;
        this.disableButton = null;
        this.testButton = null;
    }
    
    // UI要素を初期化
    init() {
        this.statusElement = document.getElementById('notification-status');
        this.enableButton = document.getElementById('enable-notifications');
        this.disableButton = document.getElementById('disable-notifications');
        this.testButton = document.getElementById('test-notification');
        
        if (this.enableButton) {
            this.enableButton.addEventListener('click', () => this.enableNotifications());
        }
        
        if (this.disableButton) {
            this.disableButton.addEventListener('click', () => this.disableNotifications());
        }
        
        if (this.testButton) {
            this.testButton.addEventListener('click', () => this.sendTestNotification());
        }
        
        // 初期状態を更新
        this.updateUI();
    }
    
    // 通知を有効化
    async enableNotifications() {
        try {
            this.setButtonLoading(this.enableButton, true);
            await this.manager.requestPermission();
            this.showMessage('通知が有効になりました！', 'success');
            this.updateUI();
        } catch (error) {
            console.error('Error enabling notifications:', error);
            this.showMessage('通知の有効化に失敗しました: ' + error.message, 'error');
        } finally {
            this.setButtonLoading(this.enableButton, false);
        }
    }
    
    // 通知を無効化
    async disableNotifications() {
        try {
            this.setButtonLoading(this.disableButton, true);
            await this.manager.unsubscribeFromPush();
            this.showMessage('通知が無効になりました', 'info');
            this.updateUI();
        } catch (error) {
            console.error('Error disabling notifications:', error);
            this.showMessage('通知の無効化に失敗しました: ' + error.message, 'error');
        } finally {
            this.setButtonLoading(this.disableButton, false);
        }
    }
    
    // テスト通知を送信
    async sendTestNotification() {
        try {
            this.setButtonLoading(this.testButton, true);
            await this.manager.sendTestNotification();
            this.showMessage('テスト通知を送信しました', 'success');
        } catch (error) {
            console.error('Error sending test notification:', error);
            this.showMessage('テスト通知の送信に失敗しました: ' + error.message, 'error');
        } finally {
            this.setButtonLoading(this.testButton, false);
        }
    }
    
    // UI状態を更新
    async updateUI() {
        const status = await this.manager.getSubscriptionStatus();
        
        if (!this.statusElement) return;
        
        if (!status.supported) {
            this.statusElement.innerHTML = `
                <div class="notification-status-item">
                    <i class="fas fa-times-circle text-error"></i>
                    <span>このブラウザは通知をサポートしていません</span>
                </div>
            `;
            this.hideButtons();
            return;
        }
        
        if (status.permission === 'denied') {
            this.statusElement.innerHTML = `
                <div class="notification-status-item">
                    <i class="fas fa-times-circle text-error"></i>
                    <span>通知が拒否されています。ブラウザの設定から許可してください。</span>
                </div>
            `;
            this.hideButtons();
            return;
        }
        
        if (status.subscribed) {
            this.statusElement.innerHTML = `
                <div class="notification-status-item">
                    <i class="fas fa-check-circle text-success"></i>
                    <span>通知が有効になっています</span>
                </div>
            `;
            this.showButton(this.disableButton);
            this.showButton(this.testButton);
            this.hideButton(this.enableButton);
        } else {
            this.statusElement.innerHTML = `
                <div class="notification-status-item">
                    <i class="fas fa-info-circle text-info"></i>
                    <span>通知を有効にしてお知らせを受け取りましょう</span>
                </div>
            `;
            this.showButton(this.enableButton);
            this.hideButton(this.disableButton);
            this.hideButton(this.testButton);
        }
    }
    
    // ボタンの表示/非表示
    showButton(button) {
        if (button) {
            button.style.display = 'inline-flex';
        }
    }
    
    hideButton(button) {
        if (button) {
            button.style.display = 'none';
        }
    }
    
    hideButtons() {
        this.hideButton(this.enableButton);
        this.hideButton(this.disableButton);
        this.hideButton(this.testButton);
    }
    
    // ボタンのローディング状態
    setButtonLoading(button, loading) {
        if (!button) return;
        
        if (loading) {
            button.disabled = true;
            const originalText = button.innerHTML;
            button.dataset.originalText = originalText;
            button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> 処理中...';
        } else {
            button.disabled = false;
            button.innerHTML = button.dataset.originalText || button.innerHTML;
        }
    }
    
    // メッセージ表示
    showMessage(message, type = 'info') {
        const messageEl = document.createElement('div');
        messageEl.className = `notification-message notification-message-${type}`;
        messageEl.innerHTML = `
            <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
            <span>${message}</span>
            <button class="notification-message-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;
        
        document.body.appendChild(messageEl);
        
        // 自動で消す
        setTimeout(() => {
            if (messageEl.parentElement) {
                messageEl.remove();
            }
        }, 5000);
    }
}

// グローバルインスタンス（多重初期化防止ガード）
if (!window.__notificationSystemInitialized) {
    window.__notificationSystemInitialized = false;
}
let notificationManager = null;
let notificationUI = null;

// 初期化
async function initNotificationSystem() {
    if (window.__notificationSystemInitialized) {
        return;
    }
    try {
        notificationManager = new NotificationManager();
        const initialized = await notificationManager.init();
        
        if (initialized) {
            notificationUI = new NotificationUI(notificationManager);
            notificationUI.init();
            console.log('Notification system initialized successfully');
            window.__notificationSystemInitialized = true;
        } else {
            console.warn('Failed to initialize notification system');
        }
    } catch (error) {
        console.error('Error initializing notification system:', error);
    }
}

// DOMが読み込まれたら初期化
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initNotificationSystem);
} else {
    initNotificationSystem();
}

// グローバルに公開
window.notificationManager = notificationManager;
window.notificationUI = notificationUI;
window.initNotificationSystem = initNotificationSystem;


[js/pwa-install.js]
// PWAインストール機能

class PWAInstaller {
    constructor() {
        this.deferredPrompt = null;
        this.installButton = null;
        this.banner = null;
        this.dismissKey = 'pwa-install-dismissed';
        this.init();
    }

    init() {
        // DOMが読み込まれた後に初期化
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => this.setupInstaller());
        } else {
            this.setupInstaller();
        }
    }

    setupInstaller() {
        this.installButton = document.getElementById('install-pwa');
        
        // beforeinstallpromptイベントをリッスン
        window.addEventListener('beforeinstallprompt', (e) => {
            console.log('PWA install prompt available');
            e.preventDefault();
            this.deferredPrompt = e;
            this.showInstallButton();
            this.maybeShowSmartBanner();
        });

        // インストールボタンのクリックイベント
        if (this.installButton) {
            this.installButton.addEventListener('click', () => this.installPWA());
        }

        // アプリがインストールされた後の処理
        window.addEventListener('appinstalled', () => {
            console.log('PWA installed successfully');
            this.hideInstallButton();
            this.showInstallSuccessMessage();
            this.removeSmartBanner();
            try { localStorage.setItem(this.dismissKey, 'installed'); } catch {}
        });

        // 既にインストール済みかチェック
        this.checkIfInstalled();
        this.maybeShowSmartBanner();
    }

    showInstallButton() {
        if (this.installButton) {
            this.installButton.style.display = 'inline-flex';
            this.installButton.classList.add('pwa-install-available');
        }
    }

    hideInstallButton() {
        if (this.installButton) {
            this.installButton.style.display = 'none';
            this.installButton.classList.remove('pwa-install-available');
        }
    }

    async installPWA() {
        // iOS Safari の場合は特別な案内を表示
        const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
        const isInStandaloneMode = window.navigator.standalone === true;
        
        if (isIOS && !isInStandaloneMode) {
            this.showIOSInstallInstructions();
            return;
        }
        
        if (!this.deferredPrompt) {
            console.log('PWA install prompt not available');
            this.showFallbackInstallMessage();
            return;
        }

        try {
            // インストールプロンプトを表示
            this.deferredPrompt.prompt();
            
            // ユーザーの選択を待つ
            const { outcome } = await this.deferredPrompt.userChoice;
            
            console.log(`PWA install outcome: ${outcome}`);
            
            if (outcome === 'accepted') {
                this.showInstallSuccessMessage();
            }
            
            // プロンプトを一度だけ使用できるのでリセット
            this.deferredPrompt = null;
            this.hideInstallButton();
            
        } catch (error) {
            console.error('PWA installation failed:', error);
            this.showInstallErrorMessage();
        }
    }

    checkIfInstalled() {
        // スタンドアロンモードで実行されているかチェック
        if (window.matchMedia('(display-mode: standalone)').matches || 
            window.navigator.standalone === true) {
            console.log('PWA is already installed');
            this.hideInstallButton();
            return true;
        }
        return false;
    }

    // スマートバナーの表示（一定条件で表示、ユーザーが閉じたら抑制）
    maybeShowSmartBanner() {
        try {
            const dismissed = localStorage.getItem(this.dismissKey);
            if (dismissed) return;
        } catch {}
        if (this.checkIfInstalled()) return;
        if (this.banner) return;
        this.banner = document.createElement('div');
        this.banner.className = 'pwa-smart-banner';
        this.banner.innerHTML = `
            <div class="pwa-smart-banner-content">
                <div class="pwa-smart-banner-icon"><i class="fas fa-download"></i></div>
                <div class="pwa-smart-banner-text">
                    <strong>アプリとしてインストール</strong>
                    <span>ホーム画面から素早くアクセスできます</span>
                </div>
                <div class="pwa-smart-banner-actions">
                    <button class="btn btn-primary" id="pwa-smart-install">インストール</button>
                    <button class="btn btn-outline" id="pwa-smart-dismiss" aria-label="閉じる">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            </div>
        `;
        document.body.appendChild(this.banner);
        setTimeout(() => this.banner.classList.add('show'), 50);
        const onInstall = () => this.installPWA();
        const onDismiss = () => {
            this.removeSmartBanner();
            try { localStorage.setItem(this.dismissKey, String(Date.now())); } catch {}
        };
        this.banner.querySelector('#pwa-smart-install').addEventListener('click', onInstall);
        this.banner.querySelector('#pwa-smart-dismiss').addEventListener('click', onDismiss);
    }

    removeSmartBanner() {
        if (!this.banner) return;
        this.banner.classList.remove('show');
        setTimeout(() => { this.banner && this.banner.remove(); this.banner = null; }, 200);
    }

    showInstallSuccessMessage() {
        this.showMessage('PWAのインストールが完了しました！', 'success');
    }

    showInstallErrorMessage() {
        this.showMessage('PWAのインストールに失敗しました。', 'error');
    }

    showMessage(message, type = 'info') {
        // 通知メッセージを表示
        const notification = document.createElement('div');
        notification.className = `pwa-notification pwa-notification-${type}`;
        notification.innerHTML = `
            <div class="pwa-notification-content">
                <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-triangle' : 'info-circle'}"></i>
                <span>${message}</span>
                <button class="pwa-notification-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        document.body.appendChild(notification);

        // 閉じるボタンのイベント
        notification.querySelector('.pwa-notification-close').addEventListener('click', () => {
            notification.remove();
        });

        // 5秒後に自動で消す
        setTimeout(() => {
            if (notification.parentNode) {
                notification.remove();
            }
        }, 5000);

        // アニメーション
        setTimeout(() => {
            notification.classList.add('pwa-notification-show');
        }, 100);
    }

    // PWAの機能をチェック
    checkPWAFeatures() {
        const features = {
            serviceWorker: 'serviceWorker' in navigator,
            installPrompt: 'BeforeInstallPromptEvent' in window,
            standalone: 'standalone' in window.navigator,
            fullscreen: 'requestFullscreen' in document.documentElement
        };

        console.log('PWA Features:', features);
        return features;
    }

    // iOS向けインストール案内
    showIOSInstallInstructions() {
        this.showNotification(
            'アプリをインストール',
            'Safari で共有ボタン → "ホーム画面に追加" を選択してください',
            'info'
        );
    }

    // フォールバック案内メッセージ
    showFallbackInstallMessage() {
        this.showNotification(
            'アプリのインストール',
            'このブラウザではワンクリックインストールをサポートしていませんが、ブックマークに追加してアプリのように使用できます',
            'info'
        );
    }

    // エラーメッセージ
    showInstallErrorMessage() {
        this.showNotification(
            'インストールエラー',
            'アプリのインストールに失敗しました。再度お試しください',
            'error'
        );
    }

    // 共通通知表示メソッド
    showNotification(title, message, type = 'info') {
        // 既存の通知があれば削除
        const existingNotification = document.querySelector('.pwa-install-notification');
        if (existingNotification) {
            existingNotification.remove();
        }

        const notification = document.createElement('div');
        notification.className = `pwa-install-notification pwa-install-${type}`;
        notification.innerHTML = `
            <div class="pwa-install-notification-content">
                <div class="pwa-install-notification-icon">
                    <i class="fas ${this.getIconForType(type)}"></i>
                </div>
                <div class="pwa-install-notification-text">
                    <h4>${title}</h4>
                    <p>${message}</p>
                </div>
                <button class="pwa-install-notification-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        `;

        // 閉じるボタンのイベント
        const closeBtn = notification.querySelector('.pwa-install-notification-close');
        closeBtn.addEventListener('click', () => notification.remove());

        document.body.appendChild(notification);

        // 10秒後に自動で削除
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 10000);
    }

    // タイプに応じたアイコンを取得
    getIconForType(type) {
        const icons = {
            success: 'fa-check-circle',
            error: 'fa-exclamation-circle',
            info: 'fa-info-circle',
            warning: 'fa-exclamation-triangle'
        };
        return icons[type] || 'fa-info-circle';
    }
}

// PWAインストーラーを初期化
const pwaInstaller = new PWAInstaller();

// グローバルに公開
window.PWAInstaller = PWAInstaller;


[js/pwa-update.js]
// PWAアップデート機能

class PWAUpdater {
    constructor() {
        this.registration = null;
        this.updateAvailable = false;
        this.updatePromptShown = false;
        this.isApplying = false;
        this.updateIntervalId = null;
        this.channel = null;
        if (!window.__pwaUpdaterInitialized) {
            window.__pwaUpdaterInitialized = true;
            this.ensureStyles();
            this.init();
        }
    }

    init() {
        if ('serviceWorker' in navigator) {
            this.registerServiceWorker();
            // タブがアクティブになったときに軽量チェック
            document.addEventListener('visibilitychange', () => {
                if (!document.hidden) {
                    this.throttledUpdateCheck();
                }
            });

            // Service Worker からのメッセージを受信
            navigator.serviceWorker.addEventListener('message', (event) => {
                const data = event.data || {};
                if (!data || !data.type) return;
                switch (data.type) {
                    case 'UPDATE_AVAILABLE':
                        this.updateAvailable = true;
                        if (!this.updatePromptShown) {
                            this.updatePromptShown = true;
                            this.showUpdateNotification();
                        }
                        break;
                    case 'RELOAD':
                        window.location.reload();
                        break;
                    default:
                        break;
                }
            });

            // BroadcastChannel 経由のメッセージリスナー
            try {
                if (window.BroadcastChannel) {
                    this.channel = new BroadcastChannel('pwa-updates');
                    this.channel.addEventListener('message', (ev) => {
                        const data = ev.data || {};
                        if (!data || !data.type) return;
                        switch (data.type) {
                            case 'UPDATE_AVAILABLE':
                                this.updateAvailable = true;
                                if (!this.updatePromptShown) {
                                    this.updatePromptShown = true;
                                    this.showUpdateNotification();
                                }
                                break;
                            case 'INSTALLED':
                            case 'ACTIVATED':
                                // 必要に応じてログやUI反映
                                break;
                            default:
                                break;
                        }
                    });
                }
            } catch {}
        } else {
            console.log('Service Worker not supported');
        }
    }

    async registerServiceWorker() {
        try {
            this.registration = await navigator.serviceWorker.register('./sw.js');
            console.log('Service Worker registered successfully');

            // アップデートをチェック
            this.registration.addEventListener('updatefound', () => {
                // 重複ガード
                if (this.pendingWorker && this.pendingWorker.state !== 'redundant') return;
                console.log('New Service Worker found');
                this.handleUpdateFound();
            });

            // Service Workerの状態変更を監視
            navigator.serviceWorker.addEventListener('controllerchange', () => {
                console.log('Service Worker controller changed');
                this.handleControllerChange();
            });

            // 定期的にアップデートをチェック（重複防止）
            this.startPeriodicUpdateCheck();

        } catch (error) {
            console.error('Service Worker registration failed:', error);
        }
    }

    handleUpdateFound() {
        const newWorker = this.registration.installing;
        if (!newWorker) return;
        this.pendingWorker = newWorker;
        newWorker.addEventListener('statechange', () => {
            if (newWorker.state === 'installed') {
                if (navigator.serviceWorker.controller) {
                    // 既存のService Workerがある場合、アップデートが利用可能
                    console.log('App update available');
                    this.updateAvailable = true;
                    if (!this.updatePromptShown) {
                        this.updatePromptShown = true;
                        this.showUpdateNotification();
                    }
                } else {
                    // 初回インストール
                    console.log('App cached for offline use');
                    this.showCachedNotification();
                }
            }
        });
    }

    handleControllerChange() {
        // 待機中SWが存在しない場合はリロードしない（無限更新防止）
        if (!this.registration || !this.registration.waiting) {
            console.log('Controller changed but no waiting SW; skipping reload');
            return;
        }
        if (this.updateAvailable) {
            console.log('Reloading page for update');
            this.updateAvailable = false;
            this.updatePromptShown = false;
            window.location.reload();
        }
    }

    showUpdateNotification() {
        const notification = this.createNotification(
            'アップデートが利用可能です',
            '最新の内容に更新できます。',
            [
                { text: '今すぐ更新', action: () => this.applyUpdate(), primary: true },
                { text: '後で', action: () => this.dismissNotification() }
            ]
        );
        this.showNotification(notification);
    }

    showCachedNotification() {
        const notification = this.createNotification(
            'オフライン対応完了',
            'アプリがオフラインで利用可能になりました。',
            [
                {
                    text: 'OK',
                    action: () => this.dismissNotification()
                }
            ]
        );

        this.showNotification(notification);
    }

    createNotification(title, message, buttons = []) {
        const notification = document.createElement('div');
        notification.className = 'pwa-update-toast';
        const buttonsHTML = buttons.map(btn => `
            <button class="pwa-update-btn ${btn.primary ? 'pwa-update-btn-primary' : ''}" data-action="${btn.text}">${btn.text}</button>
        `).join('');
        notification.innerHTML = `
            <div class="pwa-update-toast-inner" role="status" aria-live="polite">
                <div class="pwa-update-toast-text">
                    <strong>${title}</strong>
                    <span>${message}</span>
                </div>
                <div class="pwa-update-toast-actions">
                    ${buttonsHTML}
                </div>
            </div>
        `;
        buttons.forEach(btn => {
            const el = notification.querySelector(`[data-action="${btn.text}"]`);
            if (el && btn.action) el.addEventListener('click', btn.action);
        });
        return notification;
    }

    showNotification(notification) {
        // 既存のトーストは上部でスタック表示にする（直近のみ残す運用が良ければ先に削除）
        const existing = document.querySelectorAll('.pwa-update-toast');
        if (existing.length > 1) existing[0].remove();
        document.body.appendChild(notification);
        requestAnimationFrame(() => notification.classList.add('show'));
    }

    dismissNotification() {
        const notification = document.querySelector('.pwa-update-toast');
        if (notification) {
            notification.classList.remove('show');
            setTimeout(() => notification.remove(), 200);
        }
    }

    async applyUpdate() {
        if (this.isApplying) return;
        this.isApplying = true;
        try {
            this.showUpdateLoading();
            if (this.registration) {
                // 既に待機中のSWがいれば、待機解除を依頼
                if (this.registration.waiting) {
                    try { this.registration.waiting.postMessage({ type: 'SKIP_WAITING' }); } catch (e) {}
                    try { this.channel && this.channel.postMessage({ type: 'APPLY_UPDATE' }); } catch {}
                } else if (this.registration.installing) {
                    const installing = this.registration.installing;
                    installing.addEventListener('statechange', () => {
                        if (installing.state === 'installed' && this.registration.waiting) {
                            try { this.registration.waiting.postMessage({ type: 'SKIP_WAITING' }); } catch (e) {}
                            try { this.channel && this.channel.postMessage({ type: 'APPLY_UPDATE' }); } catch {}
                        }
                    });
                } else {
                    // 念のため最新のSWを取りに行く
                    await this.registration.update();
                    if (this.registration.waiting) {
                        try { this.registration.waiting.postMessage({ type: 'SKIP_WAITING' }); } catch (e) {}
                        try { this.channel && this.channel.postMessage({ type: 'APPLY_UPDATE' }); } catch {}
                    }
                }
            }
            // 実際のリロードは controllerchange で行う
        } catch (error) {
            console.error('Apply update (cache clear) failed:', error);
            this.cleanupOverlays();
            window.location.reload();
        } finally {
            this.isApplying = false;
        }
    }

    startPeriodicUpdateCheck() {
        // 30分ごとにアップデートをチェック（多重起動防止）
        if (this.updateIntervalId) clearInterval(this.updateIntervalId);
        this.updateIntervalId = setInterval(() => this.throttledUpdateCheck(), 30 * 60 * 1000);
    }

    // 手動でアップデートをチェック
    async checkForUpdates() {
        if (this.registration) {
            try {
                await this.registration.update();
                console.log('Update check completed');
                // SW にも明示チェックを依頼し、待機中の有無を通知してもらう
                if (navigator.serviceWorker.controller) {
                    try { navigator.serviceWorker.controller.postMessage({ type: 'CHECK_UPDATE' }); } catch {}
                }
                try { this.channel && this.channel.postMessage({ type: 'CHECK_UPDATE' }); } catch {}
            } catch (error) {
                console.error('Update check failed:', error);
            }
        }
    }

    throttledUpdateCheck() {
        if (!this.registration) return;
        if (this._lastCheck && Date.now() - this._lastCheck < 60 * 1000) return; // 最低1分間隔
        this._lastCheck = Date.now();
        this.registration.update().catch(() => {});
    }

    // アップデートローディング表示（ディスプレイ中央）
    showUpdateLoading() {
        const loadingModal = document.createElement('div');
        loadingModal.className = 'pwa-update-loading';
        loadingModal.innerHTML = `
            <div class="pwa-update-loading-content">
                <div class="pwa-update-loading-spinner">
                    <div class="spinner"></div>
                </div>
                <div class="pwa-update-loading-text">
                    <h3>システムをアップデート中...</h3>
                    <p>しばらくお待ちください</p>
                </div>
            </div>
        `;
        // テーマカラー適用
        try {
            const theme = this.getThemeColor();
            const box = loadingModal.querySelector('.pwa-update-loading-content');
            const spinner = loadingModal.querySelector('.spinner');
            if (box) box.style.background = theme || '#4a7c59';
            if (spinner) {
                spinner.style.borderTopColor = '#fff';
                spinner.style.borderColor = 'rgba(255,255,255,.35)';
            }
        } catch {}
        
        document.body.appendChild(loadingModal);
        
        // アニメーション
        setTimeout(() => {
            loadingModal.classList.add('pwa-update-loading-show');
        }, 100);
    }

    // アップデートローディング非表示
    hideUpdateLoading() {
        const loadingModal = document.querySelector('.pwa-update-loading');
        if (loadingModal) {
            loadingModal.classList.remove('pwa-update-loading-show');
            setTimeout(() => {
                loadingModal.remove();
            }, 300);
        }
        // オーバーレイ類を後処理で確実に除去
        this.cleanupOverlays();
    }

    // アップデートエラー表示
    showUpdateError() {
        const errorModal = document.createElement('div');
        errorModal.className = 'pwa-update-error';
        errorModal.innerHTML = `
            <div class="pwa-update-error-content">
                <div class="pwa-update-error-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="pwa-update-error-text">
                    <h3>アップデートに失敗しました</h3>
                    <p>しばらく時間をおいてから再度お試しください</p>
                </div>
                <div class="pwa-update-error-actions">
                    <button class="pwa-update-btn pwa-update-btn-primary" onclick="this.parentElement.parentElement.parentElement.remove()">
                        閉じる
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(errorModal);
        
        // アニメーション
        setTimeout(() => {
            errorModal.classList.add('pwa-update-error-show');
        }, 100);
    }

    // ソフトリロード（URLにバスター付与）
    forceSoftReload() {
        try {
            const url = new URL(window.location.href);
            url.searchParams.set('updated', String(Date.now()));
            this.cleanupOverlays();
            window.location.replace(url.toString());
        } catch (e) {
            this.cleanupOverlays();
            window.location.reload();
        }
    }

    // 現在のキャッシュを全消去してリロード
    async forceReloadWithCacheClearOnly() {
        try {
            if ('caches' in window) {
                const names = await caches.keys();
                await Promise.all(names.map(name => caches.delete(name)));
            }
        } catch (e) {
            console.warn('Cache clear error:', e);
        }
        this.cleanupOverlays();
        window.location.reload();
    }

    // 画面上に残りがちなオーバーレイやスクロール制御を除去
    cleanupOverlays() {
        try {
            const selectors = [
                '.opening-screen',
                '.modal-overlay',
                '.sidebar-overlay',
                '#main-overlay',
                '.pwa-update-notification',
                '.pwa-update-loading',
                '.pwa-update-error',
                '.pwa-update-module',
                '.pwa-update-details'
            ];
            selectors.forEach(sel => {
                document.querySelectorAll(sel).forEach(el => {
                    // アニメーション用クラスを外してから除去
                    el.classList && el.classList.remove('active', 'show');
                    if (el.parentElement) el.remove();
                });
            });
            // ボディのスクロールを復帰
            document.body && (document.body.style.overflow = '');
        } catch (e) {
            console.warn('Overlay cleanup warning:', e);
        }
    }
    
    // 手動でキャッシュクリアとリロードを実行
    async manualCacheClearAndReload() {
        this.showUpdateLoading();
        
        try {
            await this.forceReloadWithCacheClear();
        } catch (error) {
            console.error('Manual cache clear failed:', error);
            this.hideUpdateLoading();
            this.showUpdateError();
        }
    }
    
    // 更新モジュールを画面に表示
    showUpdateModule() {
        // 既存のモジュールを削除
        const existingModule = document.querySelector('.pwa-update-module');
        if (existingModule) {
            existingModule.remove();
        }
        
        const module = document.createElement('div');
        module.className = 'pwa-update-module';
        module.innerHTML = `
            <div class="pwa-update-module-content">
                <div class="pwa-update-module-header">
                    <div class="pwa-update-module-icon">
                        <i class="fas fa-sync-alt fa-spin"></i>
                    </div>
                    <div class="pwa-update-module-title">
                        <h3>システムアップデート</h3>
                        <p>新しいバージョンが利用可能です</p>
                    </div>
                    <button class="pwa-update-module-close" onclick="this.parentElement.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="pwa-update-module-body">
                    <div class="pwa-update-module-info">
                        <div class="pwa-update-module-item">
                            <i class="fas fa-download"></i>
                            <span>新しい機能と改善</span>
                        </div>
                        <div class="pwa-update-module-item">
                            <i class="fas fa-shield-alt"></i>
                            <span>セキュリティの強化</span>
                        </div>
                        <div class="pwa-update-module-item">
                            <i class="fas fa-bolt"></i>
                            <span>パフォーマンスの向上</span>
                        </div>
                    </div>
                    <div class="pwa-update-module-actions">
                        <button class="pwa-update-module-btn pwa-update-module-btn-primary" onclick="pwaUpdater.applyUpdate()">
                            <i class="fas fa-download"></i>
                            今すぐアップデート
                        </button>
                        <button class="pwa-update-module-btn" onclick="pwaUpdater.showUpdateDetails()">
                            <i class="fas fa-info-circle"></i>
                            詳細を確認
                        </button>
                        <button class="pwa-update-module-btn" onclick="pwaUpdater.manualCacheClearAndReload()">
                            <i class="fas fa-trash"></i>
                            キャッシュクリア
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(module);
        
        // アニメーション
        setTimeout(() => {
            module.classList.add('pwa-update-module-show');
        }, 100);
    }
    
    // 更新詳細を表示
    async showUpdateDetails() {
        const cacheInfo = await this.getCacheInfo();
        const status = this.getPWAStatus();
        
        const detailsModal = document.createElement('div');
        detailsModal.className = 'pwa-update-details';
        detailsModal.innerHTML = `
            <div class="pwa-update-details-content">
                <div class="pwa-update-details-header">
                    <h3>アップデート詳細</h3>
                    <button class="pwa-update-details-close" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="pwa-update-details-body">
                    <div class="pwa-update-details-section">
                        <h4>システム状態</h4>
                        <div class="pwa-update-details-item">
                            <span>Service Worker:</span>
                            <span class="${status.registered ? 'status-active' : 'status-inactive'}">
                                ${status.registered ? '登録済み' : '未登録'}
                            </span>
                        </div>
                        <div class="pwa-update-details-item">
                            <span>更新利用可能:</span>
                            <span class="${status.updateAvailable ? 'status-active' : 'status-inactive'}">
                                ${status.updateAvailable ? 'はい' : 'いいえ'}
                            </span>
                        </div>
                    </div>
                    
                    <div class="pwa-update-details-section">
                        <h4>キャッシュ情報</h4>
                        <div class="pwa-update-details-cache">
                            ${cacheInfo.caches.map(cache => `
                                <div class="pwa-update-details-cache-item">
                                    <strong>${cache.name}</strong>
                                    <span>${cache.entries} エントリ</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>
                    
                    <div class="pwa-update-details-actions">
                        <button class="pwa-update-module-btn pwa-update-module-btn-primary" onclick="pwaUpdater.applyUpdate()">
                            <i class="fas fa-download"></i>
                            アップデート実行
                        </button>
                        <button class="pwa-update-module-btn" onclick="pwaUpdater.manualCacheClearAndReload()">
                            <i class="fas fa-trash"></i>
                            キャッシュクリア
                        </button>
                        <button class="pwa-update-module-btn" onclick="window.checkForPWAUpdates()">
                            <i class="fas fa-sync"></i>
                            更新チェック
                        </button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(detailsModal);
        
        // アニメーション
        setTimeout(() => {
            detailsModal.classList.add('pwa-update-details-show');
        }, 100);
    }
    
    // キャッシュ情報を取得
    async getCacheInfo() {
        const cacheInfo = {
            caches: [],
            totalSize: 0,
            serviceWorker: null
        };
        
        try {
            if ('caches' in window) {
                const cacheNames = await caches.keys();
                for (const cacheName of cacheNames) {
                    const cache = await caches.open(cacheName);
                    const keys = await cache.keys();
                    cacheInfo.caches.push({
                        name: cacheName,
                        entries: keys.length,
                        urls: keys.map(request => request.url)
                    });
                }
            }
            
            if (this.registration) {
                cacheInfo.serviceWorker = {
                    scope: this.registration.scope,
                    active: this.registration.active ? this.registration.active.scriptURL : null,
                    waiting: this.registration.waiting ? this.registration.waiting.scriptURL : null,
                    installing: this.registration.installing ? this.registration.installing.scriptURL : null
                };
            }
            
        } catch (error) {
            console.error('Error getting cache info:', error);
        }
        
        return cacheInfo;
    }

    // PWAの状態を取得
    getPWAStatus() {
        return {
            registered: !!this.registration,
            updateAvailable: this.updateAvailable,
            controller: !!navigator.serviceWorker.controller,
            scope: this.registration ? this.registration.scope : null
        };
    }

    // 最小限のスタイルを注入して確実に表示
    ensureStyles() {
        const STYLE_ID = 'pwa-update-minimal-style';
        if (document.getElementById(STYLE_ID)) return;
        const style = document.createElement('style');
        style.id = STYLE_ID;
        style.textContent = `
            .pwa-update-toast { position: fixed; top: 16px; right: 16px; z-index: 2147483647; display: block; transform: translateY(-12px); opacity: 0; transition: transform .16s ease-out, opacity .16s ease-out; }
            .pwa-update-toast.show { transform: translateY(0); opacity: 1; }
            .pwa-update-toast-inner { box-sizing: border-box; background: #1f2937; color: #fff; padding: 10px 12px; border-radius: 8px; box-shadow: 0 8px 24px rgba(0,0,0,.25); display: flex; gap: 10px; align-items: center; max-width: 360px; }
            .pwa-update-toast-text { display: flex; flex-direction: column; gap: 2px; font-size: 13px; line-height: 1.35; }
            .pwa-update-toast-text strong { font-size: 13px; }
            .pwa-update-toast-actions { margin-left: auto; display: flex; gap: 8px; }
            .pwa-update-btn { appearance: none; border: 1px solid rgba(255,255,255,.35); background: transparent; color: #fff; border-radius: 6px; padding: 6px 10px; font-size: 13px; cursor: pointer; }
            .pwa-update-btn:hover { background: rgba(255,255,255,.08); }
            .pwa-update-btn-primary { background: #10b981; border-color: #10b981; color: #0b2b22; }
            .pwa-update-btn-primary:hover { filter: brightness(0.95); }
            @media (max-width: 480px) { .pwa-update-toast { right: 8px; left: 8px; } .pwa-update-toast-inner { max-width: none; } }
            /* Loading modal (viewport center) */
            .pwa-update-loading { position: fixed; inset: 0; z-index: 2147483646; display: flex; align-items: flex-start; justify-content: center; padding-top: 28px; background: rgba(0,0,0,.35); backdrop-filter: blur(4px); opacity: 0; transition: opacity .16s ease-out; }
            .pwa-update-loading-show { opacity: 1; }
            .pwa-update-loading-content { background: #4a7c59; color: #fff; padding: 18px 20px; border-radius: 12px; width: min(92vw, 420px); box-shadow: 0 14px 40px rgba(0,0,0,.45); text-align: center; }
            .pwa-update-loading-spinner { margin-bottom: 12px; display: grid; place-items: center; }
            .pwa-update-loading-spinner .spinner { width: 32px; height: 32px; border: 4px solid rgba(255,255,255,.25); border-top-color: #10b981; border-radius: 50%; animation: pwa-spin 1s linear infinite; }
            @keyframes pwa-spin { to { transform: rotate(360deg); } }
            /* Details/Module (viewport centered) */
            .pwa-update-details, .pwa-update-module { position: fixed; inset: 0; z-index: 2147483646; display: grid; place-items: center; background: rgba(0,0,0,.35); opacity: 0; transition: opacity .16s ease-out; }
            .pwa-update-details-show, .pwa-update-module-show { opacity: 1; }
            .pwa-update-details-content, .pwa-update-module-content { background: #111827; color:#fff; width: min(92vw, 560px); border-radius: 12px; box-shadow: 0 12px 36px rgba(0,0,0,.45); }
            .pwa-update-details-header, .pwa-update-module-header { display:flex; align-items:center; justify-content: space-between; padding: 12px 16px; border-bottom: 1px solid rgba(255,255,255,.08); }
            .pwa-update-details-body, .pwa-update-module-body { padding: 14px 16px; }
        `;
        document.head.appendChild(style);
    }

    getThemeColor() {
        try {
            const meta = document.querySelector('meta[name="theme-color"]');
            return meta && meta.content ? meta.content : '#4a7c59';
        } catch {
            return '#4a7c59';
        }
    }
}

// PWAアップデーターを初期化
const pwaUpdater = new PWAUpdater();

// グローバルに公開
window.PWAUpdater = PWAUpdater;

// 手動アップデートチェック用の関数をグローバルに公開
window.checkForPWAUpdates = () => pwaUpdater.checkForUpdates();
window.getPWAStatus = () => pwaUpdater.getPWAStatus();

// 更新モジュールを手動で表示する関数
window.showPWAUpdateModule = () => pwaUpdater.showUpdateModule();

// キャッシュクリアとリロードを手動で実行する関数
window.clearPWACacheAndReload = () => pwaUpdater.manualCacheClearAndReload();

// 更新詳細を表示する関数
window.showPWAUpdateDetails = () => pwaUpdater.showUpdateDetails();


[js/supabase-queries.js]
// シンプルなハッシュ（クライアント側）
if (!window.sha256) {
    async function sha256(text) {
        const enc = new TextEncoder();
        const data = enc.encode(text);
        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
    }
    window.sha256 = sha256;
}

// ========================================
// なずなポータルサイト 統一Supabaseクエリ
// ========================================

/**
 * 統一されたSupabaseクエリクラス
 * すべてのデータベース操作を統一された形式で提供
 */

// SupabaseQueries クラスをグローバルスコープに公開
if (typeof window.SupabaseQueries === 'undefined') {
class SupabaseQueries {
    constructor(supabaseClient) {
        this.client = supabaseClient;
        this.isAvailable = !!supabaseClient;
    }

    // ========================================
    // 基本システムテーブル用クエリ
    // ========================================

    /**
     * 部活動データを取得
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getClubs(options = {}) {
        const {
            limit = 10,
            offset = 0,
            category = null,
            activeOnly = true
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('clubs')
                .select('*')
                .order('display_order', { ascending: true })
                .order('created_at', { ascending: false })
                .range(offset, offset + limit - 1);

            if (activeOnly) {
                query = query.eq('is_active', true);
            }

            if (category) {
                query = query.eq('category', category);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching clubs:', error);
            return { data: [], error };
        }
    }

    /**
     * お知らせデータを取得
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getNews(options = {}) {
        const {
            limit = 10,
            offset = 0,
            category = null,
            publishedOnly = true
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('news')
                .select('*')
                .order('date', { ascending: false })
                .order('priority', { ascending: false })
                .range(offset, offset + limit - 1);

            if (publishedOnly) {
                query = query.eq('is_published', true);
            }

            if (category) {
                query = query.eq('category', category);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching news:', error);
            return { data: [], error };
        }
    }

    /**
     * 生徒会メンバーデータを取得
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getCouncilMembers(options = {}) {
        const {
            activeOnly = true,
            orderBy = 'display_order',
            includeAchievements = true
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('council_members')
                .select('*')
                .order(orderBy, { ascending: true });

            // RLSにより、is_active=trueのレコードのみ取得可能
            if (activeOnly) {
                query = query.eq('is_active', true);
            }

            const { data, error } = await query;
            
            if (error) {
                console.error('Supabase query error:', error);
                return { data: [], error };
            }

            // 活動実績も取得する場合
            if (includeAchievements && data && data.length > 0) {
                const memberIds = data.map(member => member.id);
                const { data: achievementsData, error: achievementsError } = await this.client
                    .from('member_achievements')
                    .select('*')
                    .in('member_id', memberIds)
                    .eq('is_public', true)
                    .order('achievement_year', { ascending: false })
                    .order('achievement_month', { ascending: false })
                    .order('priority', { ascending: true });

                if (!achievementsError && achievementsData) {
                    // 各メンバーに活動実績を追加
                    data.forEach(member => {
                        member.achievements = achievementsData.filter(achievement => achievement.member_id === member.id)
                            .map(achievement => ({
                                id: achievement.id,
                                title: achievement.title,
                                description: achievement.description,
                                date: `${achievement.achievement_year}年${achievement.achievement_month}月`,
                                year: achievement.achievement_year,
                                month: achievement.achievement_month,
                                category: achievement.category
                            }));
                    });
                }
            }
            
            return { data: data || [], error: null };
        } catch (error) {
            console.error('Error fetching council members:', error);
            return { data: [], error };
        }
    }

    /**
     * 管理者用：投稿データを取得（管理画面用）
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getPostsForAdmin(options = {}) {
        const {
            limit = 200,
            offset = 0,
            status = null
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('posts')
                .select('*')
                .order('created_at', { ascending: false })
                .range(offset, offset + limit - 1);

            if (status) {
                query = query.eq('status', status);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching posts for admin:', error);
            return { data: [], error };
        }
    }

    /**
     * 生徒番号で生徒を取得（名前マッピング用）
     * @param {Array} studentNumbers - 生徒番号の配列
     * @returns {Promise<Object>} クエリ結果
     */
    async getStudentsByNumbers(studentNumbers) {
        if (!this.isAvailable || !studentNumbers || studentNumbers.length === 0) {
            return { data: [], error: null };
        }

        try {
            const { data, error } = await this.client
                .from('students')
                .select('student_number, name')
                .in('student_number', studentNumbers);

            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching students by numbers:', error);
            return { data: [], error };
        }
    }

    // ========================================
    // フォーラム・投稿システム用クエリ
    // ========================================

    /**
     * 投稿データを取得
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getPosts(options = {}) {
        const {
            limit = 10,
            offset = 0,
            status = 'approved',
            category = null
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('posts')
                .select('*')
                .order('created_at', { ascending: false })
                .range(offset, offset + limit - 1);

            if (status) {
                if (Array.isArray(status)) {
                    query = query.in('status', status);
                } else {
                    query = query.eq('status', status);
                }
            }

            if (category) {
                query = query.eq('category', category);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching posts:', error);
            return { data: [], error };
        }
    }

    /**
     * 新しい投稿を作成
     * @param {Object} postData - 投稿データ
     * @returns {Promise<Object>} クエリ結果
     */
    async createPost(postData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('posts')
                .insert([{
                    content: postData.content,
                    category: postData.category || 'general',
                    priority: postData.priority || 0,
                    student_number: postData.student_number || null
                }])
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error creating post:', error);
            return { data: null, error };
        }
    }

    /**
     * 生徒番号で生徒を取得（認証用）
     * @param {string} studentNumber - 生徒番号
     * @returns {Promise<Object>} クエリ結果
     */
    async getStudentByNumber(studentNumber) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('students')
                .select('student_number, name, password_hash')
                .eq('student_number', studentNumber)
                .maybeSingle();
            return { data: data || null, error };
        } catch (error) {
            console.error('Error fetching student by number:', error);
            return { data: null, error };
        }
    }

    /**
     * 生徒登録
     * @param {Object} studentData - { student_number, name, password_hash }
     * @returns {Promise<Object>} クエリ結果
     */
    async registerStudent(studentData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('students')
                .insert([{
                    student_number: studentData.student_number,
                    name: studentData.name,
                    password_hash: studentData.password_hash
                }])
                .select();
            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error registering student:', error);
            return { data: null, error };
        }
    }

    /**
     * チャットメッセージ送信
     * @param {Object} chatData - { post_id, sender, message, is_admin }
     * @returns {Promise<Object>} クエリ結果
     */
    async sendChat(chatData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('chats')
                .insert([{
                    post_id: chatData.post_id,
                    sender: chatData.sender || null,
                    message: chatData.message,
                    is_admin: !!chatData.is_admin
                }])
                .select();
            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error sending chat:', error);
            return { data: null, error };
        }
    }

    /**
     * チャット一覧取得
     * @param {string|number} postId - 投稿ID
     * @param {Object} options - { limit }
     * @returns {Promise<Object>} クエリ結果
     */
    async listChats(postId, options = {}) {
        const { limit = 200 } = options;
        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            const { data, error } = await this.client
                .from('chats')
                .select('*')
                .eq('post_id', postId)
                .order('created_at', { ascending: true })
                .limit(limit);
            return { data: data || [], error };
        } catch (error) {
            console.error('Error listing chats:', error);
            return { data: [], error };
        }
    }

    /**
     * 投稿のステータスを更新
     * @param {string} postId - 投稿ID
     * @param {string} status - 新しいステータス
     * @param {string} reply - 返信内容（オプション）
     * @returns {Promise<Object>} クエリ結果
     */
    async updatePostStatus(postId, status, reply = null) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const updateData = { status };
            if (reply) {
                updateData.reply = reply;
                updateData.replied_at = new Date().toISOString();
            }

            const { data, error } = await this.client
                .from('posts')
                .update(updateData)
                .eq('id', postId)
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error updating post status:', error);
            return { data: null, error };
        }
    }

    // ========================================
    // アンケートシステム用クエリ
    // ========================================

    /**
     * アンケートデータを取得
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getSurveys(options = {}) {
        const {
            limit = 10,
            offset = 0,
            activeOnly = true,
            publishedOnly = true
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('surveys')
                .select('*')
                .order('created_at', { ascending: false })
                .range(offset, offset + limit - 1);

            if (activeOnly) {
                query = query.eq('is_active', true);
            }

            if (publishedOnly) {
                query = query.eq('is_published', true);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching surveys:', error);
            return { data: [], error };
        }
    }

    /**
     * アンケート回答を送信
     * @param {Object} responseData - 回答データ
     * @returns {Promise<Object>} クエリ結果
     */
    async submitSurveyResponse(responseData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('survey_responses')
                .insert([{
                    survey_id: responseData.survey_id,
                    answers: responseData.answers,
                    respondent_info: responseData.respondent_info || null
                }])
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error submitting survey response:', error);
            return { data: null, error };
        }
    }

    // ========================================
    // 通知システム用クエリ
    // ========================================

    /**
     * デバイス登録
     * @param {Object} deviceData - デバイスデータ
     * @returns {Promise<Object>} クエリ結果
     */
    async registerDevice(deviceData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('device_registrations')
                .upsert([{
                    fcm_token: deviceData.fcm_token,
                    user_agent: deviceData.user_agent,
                    platform: deviceData.platform || 'web',
                    browser: deviceData.browser,
                    device_info: deviceData.device_info,
                    user_info: deviceData.user_info,
                    is_active: true
                }], {
                    onConflict: 'fcm_token'
                })
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error registering device:', error);
            return { data: null, error };
        }
    }

    /**
     * 通知テンプレートを取得
     * @param {string} category - カテゴリ（オプション）
     * @returns {Promise<Object>} クエリ結果
     */
    async getNotificationTemplates(category = null) {
        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('notification_templates')
                .select('*')
                .eq('is_active', true)
                .order('priority', { ascending: false });

            if (category) {
                query = query.eq('category', category);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error('Error fetching notification templates:', error);
            return { data: [], error };
        }
    }

    // ========================================
    // 活動実績管理
    // ========================================

    /**
     * メンバーの活動実績を取得
     * @param {number} memberId - メンバーID
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getMemberAchievements(memberId, options = {}) {
        const {
            limit = 100,
            offset = 0,
            includePublicOnly = true,
            category = null
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from('member_achievements')
                .select('*')
                .eq('member_id', memberId)
                .order('achievement_year', { ascending: false })
                .order('achievement_month', { ascending: false })
                .order('priority', { ascending: true })
                .range(offset, offset + limit - 1);

            if (includePublicOnly) {
                query = query.eq('is_public', true);
            }

            if (category) {
                query = query.eq('category', category);
            }

            const { data, error } = await query;
            
            if (error) {
                console.error('Error fetching member achievements:', error);
                return { data: [], error };
            }

            // フロントエンド用にフォーマット
            const formattedData = (data || []).map(achievement => ({
                id: achievement.id,
                memberId: achievement.member_id,
                title: achievement.title,
                description: achievement.description,
                year: achievement.achievement_year,
                month: achievement.achievement_month,
                date: `${achievement.achievement_year}年${achievement.achievement_month}月`,
                category: achievement.category,
                priority: achievement.priority,
                isPublic: achievement.is_public,
                createdAt: achievement.created_at,
                updatedAt: achievement.updated_at
            }));

            return { data: formattedData, error: null };
        } catch (error) {
            console.error('Error fetching member achievements:', error);
            return { data: [], error };
        }
    }

    /**
     * 活動実績を追加
     * @param {Object} achievementData - 活動実績データ
     * @returns {Promise<Object>} クエリ結果
     */
    async createMemberAchievement(achievementData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('member_achievements')
                .insert([{
                    member_id: achievementData.memberId,
                    achievement_year: achievementData.year,
                    achievement_month: achievementData.month,
                    title: achievementData.title,
                    description: achievementData.description,
                    category: achievementData.category || 'general',
                    priority: achievementData.priority || 0,
                    is_public: achievementData.isPublic !== false
                }])
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error creating member achievement:', error);
            return { data: null, error };
        }
    }

    /**
     * 活動実績を更新
     * @param {number} achievementId - 活動実績ID
     * @param {Object} achievementData - 更新データ
     * @returns {Promise<Object>} クエリ結果
     */
    async updateMemberAchievement(achievementId, achievementData) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const updateData = {};
            if (achievementData.year !== undefined) updateData.achievement_year = achievementData.year;
            if (achievementData.month !== undefined) updateData.achievement_month = achievementData.month;
            if (achievementData.title !== undefined) updateData.title = achievementData.title;
            if (achievementData.description !== undefined) updateData.description = achievementData.description;
            if (achievementData.category !== undefined) updateData.category = achievementData.category;
            if (achievementData.priority !== undefined) updateData.priority = achievementData.priority;
            if (achievementData.isPublic !== undefined) updateData.is_public = achievementData.isPublic;

            const { data, error } = await this.client
                .from('member_achievements')
                .update(updateData)
                .eq('id', achievementId)
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error updating member achievement:', error);
            return { data: null, error };
        }
    }

    /**
     * 活動実績を削除
     * @param {number} achievementId - 活動実績ID
     * @returns {Promise<Object>} クエリ結果
     */
    async deleteMemberAchievement(achievementId) {
        if (!this.isAvailable) {
            return { data: null, error: null };
        }

        try {
            const { data, error } = await this.client
                .from('member_achievements')
                .delete()
                .eq('id', achievementId)
                .select();

            return { data: data?.[0] || null, error };
        } catch (error) {
            console.error('Error deleting member achievement:', error);
            return { data: null, error };
        }
    }

    // ========================================
    // 汎用クエリ関数
    // ========================================

    /**
     * 汎用データ取得関数
     * @param {string} tableName - テーブル名
     * @param {Object} options - クエリオプション
     * @returns {Promise<Object>} クエリ結果
     */
    async getTableData(tableName, options = {}) {
        const {
            limit = 10,
            offset = 0,
            orderBy = 'created_at',
            orderDirection = 'desc',
            filters = {},
            search = null
        } = options;

        if (!this.isAvailable) {
            return { data: [], error: null };
        }

        try {
            let query = this.client
                .from(tableName)
                .select('*')
                .range(offset, offset + limit - 1);

            // 指定カラムが存在しないテーブルでも落ちないように安全な並び替え
            try {
                query = query.order(orderBy, { ascending: orderDirection === 'asc' });
            } catch (e) {
                // orderByが無効な場合はid/created_atの順でフォールバック
                try { query = query.order('created_at', { ascending: orderDirection === 'asc' }); }
                catch (e2) {
                    try { query = query.order('id', { ascending: true }); } catch (e3) {}
                }
            }

            // フィルターを適用
            Object.entries(filters).forEach(([key, value]) => {
                if (value !== null && value !== undefined) {
                    if (Array.isArray(value)) {
                        query = query.in(key, value);
                    } else {
                        query = query.eq(key, value);
                    }
                }
            });

            // 簡易検索（contentカラムの部分一致）
            if (search && typeof search === 'string' && search.trim()) {
                query = query.ilike('content', `%${search.trim()}%`);
            }

            const { data, error } = await query;
            return { data: data || [], error };
        } catch (error) {
            console.error(`Error fetching data from ${tableName}:`, error);
            return { data: [], error };
        }
    }

    /**
     * 統計データを取得
     * @returns {Promise<Object>} 統計データ
     */
    async getStatistics() {
        if (!this.isAvailable) {
            return {
                clubs_count: 0,
                news_count: 0,
                posts_count: 0,
                surveys_count: 0,
                members_count: 0
            };
        }

        try {
            const [clubsResult, newsResult, postsResult, surveysResult, membersResult] = await Promise.all([
                this.client.from('clubs').select('id', { count: 'exact', head: true }).eq('is_active', true),
                this.client.from('news').select('id', { count: 'exact', head: true }).eq('is_published', true),
                this.client.from('posts').select('id', { count: 'exact', head: true }).eq('status', 'approved'),
                this.client.from('surveys').select('id', { count: 'exact', head: true }).eq('is_active', true).eq('is_published', true),
                this.client.from('council_members').select('id', { count: 'exact', head: true }).eq('is_active', true)
            ]);

            return {
                clubs_count: clubsResult.count || 0,
                news_count: newsResult.count || 0,
                posts_count: postsResult.count || 0,
                surveys_count: surveysResult.count || 0,
                members_count: membersResult.count || 0
            };
        } catch (error) {
            console.error('Error fetching statistics:', error);
            return {
                clubs_count: 0,
                news_count: 0,
                posts_count: 0,
                surveys_count: 0,
                members_count: 0
            };
        }
    }

    // ========================================
    // エラーハンドリング
    // ========================================

    /**
     * エラーメッセージを統一形式で返す
     * @param {Error} error - エラーオブジェクト
     * @param {string} operation - 操作名
     * @returns {string} エラーメッセージ
     */
    getErrorMessage(error, operation = '操作') {
        if (!error) return `${operation}中にエラーが発生しました`;

        if (error.message) {
            return `${operation}中にエラーが発生しました: ${error.message}`;
        }

        return `${operation}中にエラーが発生しました`;
    }

    /**
     * 成功メッセージを統一形式で返す
     * @param {string} operation - 操作名
     * @returns {string} 成功メッセージ
     */
    getSuccessMessage(operation = '操作') {
        return `${operation}が正常に完了しました`;
    }
}

// グローバルに公開（クラスのみ）
window.SupabaseQueries = SupabaseQueries;
}


[public/firebase-messaging-sw.js]
// Firebase Cloud Messaging Service Worker

// Firebase SDKをインポート
importScripts('https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.22.0/firebase-messaging-compat.js');

// Firebaseの設定情報
const firebaseConfig = {
  apiKey: "AIzaSyDQ8g88Z4rW-nX6TzCGjxFvfDptju4fOIc",
  authDomain: "nazuna-portal.firebaseapp.com",
  projectId: "nazuna-portal",
  storageBucket: "nazuna-portal.firebasestorage.app",
  messagingSenderId: "181514532945",
  appId: "1:181514532945:web:65043ee5d7d435a7af6070"
};

// Firebaseの初期化
firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

// バックグラウンドメッセージの処理
messaging.onBackgroundMessage(function(payload) {
  console.log('[firebase-messaging-sw.js] Received background message ', payload);
  
  // 通知データの取得
  const notificationTitle = payload.notification.title || 'お知らせ';
  const notificationOptions = {
    body: payload.notification.body || '',
    icon: payload.notification.icon || '/images/icon-192x192.png',
    badge: payload.notification.badge || '/images/badge-72x72.png',
    image: payload.notification.image,
    data: payload.data || {},
    tag: payload.data?.category || 'general',
    renotify: payload.data?.renotify === 'true',
    requireInteraction: payload.data?.requireInteraction === 'true',
    actions: []
  };
  
  // アクションの設定
  try {
    if (payload.data?.actions) {
      const actions = JSON.parse(payload.data.actions);
      if (Array.isArray(actions)) {
        notificationOptions.actions = actions.slice(0, 2); // 最大2つまで
      }
    }
  } catch (e) {
    console.error('Error parsing notification actions:', e);
  }
  
  // クリック時のURLを設定
  if (payload.data?.url) {
    notificationOptions.data.url = payload.data.url;
  }
  
  // 通知を表示
  return self.registration.showNotification(notificationTitle, notificationOptions);
});

// 通知クリック時の処理
self.addEventListener('notificationclick', function(event) {
  console.log('[firebase-messaging-sw.js] Notification click event', event);
  
  event.notification.close();
  
  // クリックされたアクションの処理
  const action = event.action;
  const notification = event.notification;
  const data = notification.data || {};
  
  // URLの決定（アクション固有のURLまたはデフォルトURL）
  let url = '/';
  
  if (action && notification.actions) {
    const clickedAction = notification.actions.find(a => a.action === action);
    if (clickedAction && clickedAction.url) {
      url = clickedAction.url;
    }
  } else if (data.url) {
    url = data.url;
  }
  
  // 分析データの送信（オプション）
  try {
    const analyticsData = {
      notification_id: data.notification_id,
      category: data.category,
      action: action || 'click',
      timestamp: Date.now()
    };
    
    // 分析データをサーバーに送信（実装は省略）
    console.log('Analytics data:', analyticsData);
  } catch (e) {
    console.error('Error sending analytics data:', e);
  }
  
  // クライアントを開くか、新しいウィンドウを開く
  event.waitUntil(
    clients.matchAll({type: 'window'}).then(function(windowClients) {
      // 既に開いているウィンドウがあれば、そこに移動
      for (let i = 0; i < windowClients.length; i++) {
        const client = windowClients[i];
        if (client.url === url && 'focus' in client) {
          return client.focus();
        }
      }
      
      // 新しいウィンドウを開く
      if (clients.openWindow) {
        return clients.openWindow(url);
      }
    })
  );
});

// プッシュサブスクリプションの変更イベント
self.addEventListener('pushsubscriptionchange', function(event) {
  console.log('[firebase-messaging-sw.js] Push subscription changed', event);
  
  const applicationServerKey = self.registration.pushManager.getSubscription()
    .then(function(subscription) {
      return subscription.options.applicationServerKey;
    });
  
  event.waitUntil(
    Promise.all([
      applicationServerKey,
      self.registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: applicationServerKey
      })
    ])
    .then(function([applicationServerKey, subscription]) {
      // 新しいサブスクリプションをサーバーに送信（実装は省略）
      console.log('New subscription:', subscription);
    })
  );
});

// Service Workerのインストール時の処理
self.addEventListener('install', function(event) {
  console.log('[firebase-messaging-sw.js] Service Worker installed');
  self.skipWaiting(); // 即座にアクティブ化
});

// Service Workerのアクティベーション時の処理
self.addEventListener('activate', function(event) {
  console.log('[firebase-messaging-sw.js] Service Worker activated');
  event.waitUntil(self.clients.claim()); // すべてのクライアントを制御
});

[404.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>準備中 - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <meta name="theme-color" content="#2c3e50">
    <style>
        .maintenance-wrapper { min-height: 100vh; display: flex; align-items: center; justify-content: center; padding: 40px 20px; }
        .maintenance-card { background: var(--surface-color); border: 1px solid var(--border-color); border-radius: 16px; box-shadow: var(--shadow-lg); max-width: 560px; width: 100%; padding: 32px; text-align: center; }
        .maintenance-icon { width: 80px; height: 80px; border-radius: 50%; background: var(--gradient-primary); display: flex; align-items: center; justify-content: center; margin: 0 auto 16px; }
        .maintenance-icon i { color: #fff; font-size: 2rem; }
        .maintenance-card h1 { margin: 0 0 8px; color: var(--primary-color); font-size: 1.5rem; }
        .maintenance-card p { color: var(--text-light); margin: 0 0 16px; }
        .maintenance-actions { display: flex; gap: 8px; justify-content: center; flex-wrap: wrap; margin-top: 8px; }
    </style>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const params = new URLSearchParams(location.search);
            const from = params.get('from');
            const info = document.getElementById('from-info');
            if (from && info) {
                info.textContent = `要求されたページ: ${from}.html`;
            }
        });
    </script>
</head>
<body>
    <div class="maintenance-wrapper">
        <div class="maintenance-card">
            <div class="maintenance-icon">
                <i class="fas fa-tools"></i>
            </div>
            <h1>このページは現在準備中です</h1>
            <p id="from-info"></p>
            <p>公開までしばらくお待ちください。トップページから他のコンテンツをご覧いただけます。</p>
            <div class="maintenance-actions">
                <a href="index.html" class="btn btn-primary"><i class="fas fa-home"></i> ホームへ戻る</a>
                <a href="javascript:history.back()" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> 前のページ</a>
            </div>
        </div>
    </div>
</body>
</html>



[admin.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>管理画面 - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="stylesheet" href="css/admin.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <meta name="theme-color" content="#2c3e50">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js"></script>
</head>
<body>
    <!-- メインコンテンツオーバーレイ -->
    <div class="main-overlay" id="main-overlay"></div>

    <!-- ログイン画面 -->
    <div class="login-screen" id="login-screen">
        <div class="login-container">
            <div class="login-header">
                <div class="login-logo">
                    <i class="fas fa-shield-alt"></i>
                </div>
                <h1>管理画面ログイン</h1>
                <p>なずなポータル管理システム</p>
            </div>
            <form class="login-form" id="login-form" autocomplete="off">
                <div class="form-group">
                    <label for="admin-email">メールアドレス</label>
                    <input type="email" id="admin-email" class="form-control" placeholder="example@school.ac.jp" required autocomplete="off" maxlength="100">
                </div>
                <div class="form-group">
                    <label for="admin-password">パスワード</label>
                    <input type="password" id="admin-password" class="form-control" placeholder="パスワードを入力" required autocomplete="off" minlength="6" maxlength="50">
                </div>
                <button type="submit" class="btn btn-primary btn-login" id="login-btn">
                    <i class="fas fa-sign-in-alt"></i>
                    ログイン
                </button>
                <div class="login-error" id="login-error" style="display: none;">
                    <i class="fas fa-exclamation-triangle"></i>
                    <span>ログインに失敗しました。認証情報を確認してください。</span>
                </div>
            </form>
        </div>
    </div>

    <!-- 管理画面メイン -->
    <div class="admin-main" id="admin-main" style="display: none;">
        <!-- ヘッダー -->
        <header class="admin-header">
            <!-- ハンバーガーメニューボタン -->
            <button class="hamburger-menu" id="hamburger-menu" aria-label="メニューを開く">
                <span></span>
                <span></span>
                <span></span>
            </button>
            <div class="admin-nav">
                <div class="admin-logo">
                    <i class="fas fa-cogs"></i>
                    <span>管理画面</span>
                </div>
                <div class="admin-user">
                    <button class="btn btn-outline btn-sm" id="pwa-update-btn" title="PWA更新管理">
                        <i class="fas fa-sync-alt"></i>
                        PWA更新
                    </button>
                    <span id="admin-user-name">管理者</span>
                    <button class="btn btn-outline btn-sm" id="logout-btn">
                        <i class="fas fa-sign-out-alt"></i>
                        ログアウト
                    </button>
                </div>
            </div>
        </header>

        <!-- サイドバー -->
        <div class="admin-sidebar" id="admin-sidebar">
            <div class="sidebar-header">
                <h3>管理メニュー</h3>
                <button class="sidebar-close" id="admin-sidebar-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <nav class="admin-menu">
                <ul>
                    <li>
                        <a href="#dashboard" class="menu-item active" data-section="dashboard">
                            <i class="fas fa-tachometer-alt"></i>
                            <span>ダッシュボード</span>
                        </a>
                    </li>
                    <li>
                        <a href="#news" class="menu-item" data-section="news">
                            <i class="fas fa-newspaper"></i>
                            <span>お知らせ管理</span>
                        </a>
                    </li>
                    <li>
                        <a href="#surveys" class="menu-item" data-section="surveys">
                            <i class="fas fa-poll"></i>
                            <span>アンケート管理</span>
                        </a>
                    </li>
                    <li>
                        <a href="#clubs" class="menu-item" data-section="clubs">
                            <i class="fas fa-running"></i>
                            <span>部活動管理</span>
                        </a>
                    </li>
                    <li>
                        <a href="#council" class="menu-item" data-section="council">
                            <i class="fas fa-users"></i>
                            <span>生徒会情報</span>
                        </a>
                    </li>
                    <li>
                        <a href="#achievements" class="menu-item" data-section="achievements">
                            <i class="fas fa-trophy"></i>
                            <span>活動実績管理</span>
                        </a>
                    </li>
                    <li>
                        <a href="#notifications" class="menu-item" data-section="notifications">
                            <i class="fas fa-bell"></i>
                            <span>通知配信</span>
                        </a>
                    </li>
                    <li>
                        <a href="#forum" class="menu-item" data-section="forum">
                            <i class="fas fa-comments"></i>
                            <span>フォーラム管理</span>
                        </a>
                    </li>
                </ul>
            </nav>
        </div>

        <!-- メインコンテンツ -->
        <main class="admin-content">
            <!-- ダッシュボード -->
            <section class="admin-section active" id="dashboard-section">
                <div class="section-header">
                    <h2><i class="fas fa-tachometer-alt"></i> ダッシュボード</h2>
                </div>
                <div class="dashboard-stats">
                    <div class="stat-card">
                        <div class="stat-icon news-stat">
                            <i class="fas fa-newspaper"></i>
                        </div>
                        <div class="stat-content">
                            <h3 id="news-count">0</h3>
                            <p>お知らせ</p>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon survey-stat">
                            <i class="fas fa-poll"></i>
                        </div>
                        <div class="stat-content">
                            <h3 id="survey-count">0</h3>
                            <p>アンケート</p>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon club-stat">
                            <i class="fas fa-running"></i>
                        </div>
                        <div class="stat-content">
                            <h3 id="club-count">0</h3>
                            <p>部活動</p>
                        </div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-icon forum-stat">
                            <i class="fas fa-comments"></i>
                        </div>
                        <div class="stat-content">
                            <h3 id="forum-count">0</h3>
                            <p>フォーラム投稿</p>
                        </div>
                    </div>
                </div>
                <div class="dashboard-recent">
                    <div class="recent-card">
                        <h3><i class="fas fa-clock"></i> 最近の活動</h3>
                        <div class="recent-list" id="recent-activities">
                            <!-- 最近の活動がここに表示されます -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- お知らせ管理 -->
            <section class="admin-section" id="news-section">
                <div class="section-header">
                    <h2><i class="fas fa-newspaper"></i> お知らせ管理</h2>
                    <button class="btn btn-primary" id="add-news-btn">
                        <i class="fas fa-plus"></i>
                        新規作成
                    </button>
                </div>
                <div class="admin-table-container">
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>タイトル</th>
                                <th>カテゴリ</th>
                                <th>作成日</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="news-table-body">
                            <!-- お知らせ一覧がここに表示されます -->
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- アンケート管理 -->
            <section class="admin-section" id="surveys-section">
                <div class="section-header">
                    <h2><i class="fas fa-poll"></i> アンケート管理</h2>
                    <button class="btn btn-primary" id="add-survey-btn">
                        <i class="fas fa-plus"></i>
                        新規作成
                    </button>
                </div>
                <div class="admin-table-container">
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>タイトル</th>
                                <th>ステータス</th>
                                <th>回答数</th>
                                <th>締切</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="surveys-table-body">
                            <!-- アンケート一覧がここに表示されます -->
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- 部活動管理 -->
            <section class="admin-section" id="clubs-section">
                <div class="section-header">
                    <h2><i class="fas fa-running"></i> 部活動管理</h2>
                    <button class="btn btn-primary" id="add-club-btn">
                        <i class="fas fa-plus"></i>
                        新規追加
                    </button>
                </div>
                <div class="admin-table-container">
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>部活動名</th>
                                <th>カテゴリ</th>
                                <th>部員数</th>
                                <th>活動日</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="clubs-table-body">
                            <!-- 部活動一覧がここに表示されます -->
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- 生徒会情報 -->
            <section class="admin-section" id="council-section">
                <div class="section-header">
                    <h2><i class="fas fa-users"></i> 生徒会情報管理</h2>
                    <button class="btn btn-primary" id="add-member-btn">
                        <i class="fas fa-user-plus"></i>
                        メンバー追加
                    </button>
                </div>
                <div class="members-grid" id="members-grid">
                    <!-- 生徒会メンバー一覧がここに表示されます -->
                </div>
            </section>

            <!-- 活動実績管理 -->
            <section class="admin-section" id="achievements-section">
                <div class="section-header">
                    <h2><i class="fas fa-trophy"></i> 活動実績管理</h2>
                    <div class="section-controls">
                        <select id="member-filter" class="form-control">
                            <option value="">メンバーを選択</option>
                        </select>
                        <button class="btn btn-primary" id="add-achievement-btn">
                            <i class="fas fa-plus"></i>
                            実績追加
                        </button>
                    </div>
                </div>
                
                <!-- メンバー別フィルター -->
                <div class="filter-section">
                    <label>表示フィルター：</label>
                    <div class="filter-controls">
                        <select id="achievement-year-filter" class="form-control">
                            <option value="">すべての年</option>
                            <option value="2024">2024年</option>
                            <option value="2025">2025年</option>
                        </select>
                        <select id="achievement-month-filter" class="form-control">
                            <option value="">すべての月</option>
                            <option value="1">1月</option>
                            <option value="2">2月</option>
                            <option value="3">3月</option>
                            <option value="4">4月</option>
                            <option value="5">5月</option>
                            <option value="6">6月</option>
                            <option value="7">7月</option>
                            <option value="8">8月</option>
                            <option value="9">9月</option>
                            <option value="10">10月</option>
                            <option value="11">11月</option>
                            <option value="12">12月</option>
                        </select>
                        <select id="achievement-category-filter" class="form-control">
                            <option value="">すべてのカテゴリ</option>
                            <option value="general">一般</option>
                            <option value="academic">学習</option>
                            <option value="cultural">文化</option>
                            <option value="sports">スポーツ</option>
                            <option value="leadership">リーダーシップ</option>
                            <option value="volunteer">ボランティア</option>
                            <option value="event">イベント</option>
                        </select>
                        <button class="btn btn-outline" id="clear-filters-btn">
                            <i class="fas fa-times"></i>
                            フィルタークリア
                        </button>
                    </div>
                </div>

                <div class="admin-table-container">
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>メンバー</th>
                                <th>年月</th>
                                <th>タイトル</th>
                                <th>カテゴリ</th>
                                <th>詳細</th>
                                <th>公開設定</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="achievements-table-body">
                            <!-- 活動実績一覧がここに表示されます -->
                        </tbody>
                    </table>
                </div>
            </section>

            <!-- 通知配信 -->
            <section class="admin-section" id="notifications-section">
                <div class="section-header">
                    <h2><i class="fas fa-bell"></i> 通知配信</h2>
                </div>
                <div class="notification-panel">
                    <div class="notification-form">
                        <h3>プッシュ通知を送信</h3>
                        <div class="form-group">
                            <label for="notification-template">テンプレート</label>
                            <select id="notification-template" class="form-control">
                                <option value="">（選択してください）</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="notification-title">通知タイトル</label>
                            <input type="text" id="notification-title" class="form-control" placeholder="通知のタイトルを入力">
                        </div>
                        <div class="form-group">
                            <label for="notification-message">メッセージ</label>
                            <textarea id="notification-message" class="form-control" rows="3" placeholder="通知メッセージを入力"></textarea>
                        </div>
                        <div class="form-group">
                            <label for="notification-target">配信対象</label>
                            <select id="notification-target" class="form-control">
                                <option value="all">全ユーザー</option>
                                <option value="students">生徒のみ</option>
                                <option value="teachers">教職員のみ</option>
                            </select>
                        </div>
                        <div class="form-actions">
                            <button class="btn btn-primary" id="send-notification-btn">
                                <i class="fas fa-paper-plane"></i>
                                通知を送信
                            </button>
                            <button type="button" class="btn btn-outline" onclick="clearNotificationForm()">
                                <i class="fas fa-eraser"></i>
                                クリア
                            </button>
                        </div>
                    </div>
                    <div class="notification-history">
                        <h3>配信履歴</h3>
                        <div class="history-list" id="notification-history">
                            <!-- 配信履歴がここに表示されます -->
                        </div>
                    </div>
                </div>
            </section>

            <!-- フォーラム管理 -->
            <section class="admin-section" id="forum-section">
                <div class="section-header">
                    <h2><i class="fas fa-comments"></i> フォーラム管理</h2>
                </div>
                <div class="admin-table-container">
                    <table class="admin-table">
                        <thead>
                            <tr>
                                <th>投稿ID</th>
                                <th>内容（抜粋）</th>
                                <th>ステータス</th>
                                <th>投稿日</th>
                                <th>操作</th>
                            </tr>
                        </thead>
                        <tbody id="forum-table-body">
                            <!-- フォーラム投稿一覧がここに表示されます -->
                        </tbody>
                    </table>
                </div>
            </section>
        </main>
    </div>

    <!-- モーダル -->
    <div class="modal-overlay" id="modal-overlay">
        <div class="modal" id="admin-modal">
            <div class="modal-header">
                <h3 id="modal-title">タイトル</h3>
                <button class="modal-close" id="modal-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body" id="modal-body">
                <!-- モーダルコンテンツがここに表示されます -->
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" id="modal-cancel">キャンセル</button>
                <button class="btn btn-primary" id="modal-save">保存</button>
            </div>
        </div>
    </div>

    <!-- フッター -->
    <footer class="admin-footer">
        <div class="footer-content">
            <div class="footer-section">
                <h4>お問い合わせ窓口</h4>
                <p><i class="fas fa-envelope"></i> council@school.ac.jp</p>
                <p><i class="fas fa-map-marker-alt"></i> 生徒会室（本館4F）</p>
            </div>
            <div class="footer-section">
                <h4>技術サポート</h4>
                <p><i class="fas fa-envelope"></i> tech-support@school.ac.jp</p>
            </div>
            <div class="footer-section">
                <h4>システム情報</h4>
                <p>バージョン: 1.0.0</p>
                <p>最終更新: 2025年10月</p>
                <p>&copy; 2025 市川学園生徒会</p>
            </div>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/firebase-config.js"></script>
    <script src="js/pwa-update.js"></script>
    <script src="js/admin.js"></script>
</body>
</html>


[browserconfig.xml]
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square70x70logo src="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-72x72.png"/>
            <square150x150logo src="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png"/>
            <square310x310logo src="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-512x512.png"/>
            <wide310x150logo src="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png"/>
            <TileColor>#4a7c59</TileColor>
        </tile>
    </msapplication>
</browserconfig>


[clubs.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>部活動紹介 - なずなポータルサイト</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <meta name="theme-color" content="#2c3e50">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html" class="active">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ページヘッダー -->
        <section class="page-header">
            <div class="container">
                <div class="page-header-content">
                    <h1><i class="fas fa-running"></i> 部活動紹介</h1>
                    <p>あなたの興味や才能を活かせる部活動を見つけよう</p>
                </div>
            </div>
        </section>

        <!-- フィルター -->
        <section class="clubs-filter">
            <div class="container">
                <div class="filter-controls">
                    <h3>カテゴリで絞り込み</h3>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-category="all">
                            <i class="fas fa-th"></i> すべて
                        </button>
                        <button class="filter-btn" data-category="sports">
                            <i class="fas fa-running"></i> 運動部
                        </button>
                        <button class="filter-btn" data-category="culture">
                            <i class="fas fa-palette"></i> 文化部
                        </button>
                        <button class="filter-btn" data-category="academic">
                            <i class="fas fa-book"></i> 学術部
                        </button>
                        <button class="filter-btn" data-category="music">
                            <i class="fas fa-music"></i> 音楽部
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- 部活動一覧 -->
        <section class="clubs-list">
            <div class="container">
                <div class="loading" id="clubs-loading">読み込み中...</div>
                <div class="clubs-grid" id="clubs-container">
                    <!-- 部活動データは動的に読み込み -->
                </div>
            </div>
        </section>

        <!-- 部活動加入について -->
        <section class="club-info">
            <div class="container">
                <h2 class="section-title">部活動加入について</h2>
                <div class="info-grid">
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <h3>加入時期</h3>
                        <p>基本的に年度初めの4月に加入受付を行いますが、部活動によっては年間を通じて新入部員を募集している場合もあります。</p>
                    </div>
                    
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-eye"></i>
                        </div>
                        <h3>見学・体験</h3>
                        <p>ほとんどの部活動で見学や体験活動を受け付けています。興味のある部活動があれば、まずは見学から始めてみましょう。</p>
                    </div>
                    
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>複数加入</h3>
                        <p>活動時間が重複しない場合に限り、複数の部活動に加入することも可能です。詳しくは各部活動の顧問の先生にご相談ください。</p>
                    </div>
                    
                    <div class="info-card">
                        <div class="info-icon">
                            <i class="fas fa-question-circle"></i>
                        </div>
                        <h3>お問い合わせ</h3>
                        <p>部活動に関する質問や相談は、生徒会室または各部活動の顧問の先生まで気軽にお声かけください。</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- 新しい部活動を作りたい方へ -->
        <section class="new-club">
            <div class="container">
                <div class="new-club-content">
                    <h2>入りたい部活がない君へ ‐ 新しい部活動を作りませんか？</h2>
                    <p>既存の部活動にやりたいことがない場合は、新しい部活動を立ち上げることも可能です。一定の条件を満たせば、正式な部活動として認定されます。</p>
                    <div class="requirements">
                        <h4>設立に必要な条件</h4>
                        <ul>
                            <li>5名以上の部員</li>
                            <li>顧問となる教員の確保</li>
                            <li>活動計画書の提出</li>
                            <li>生徒会・学校の承認</li>
                        </ul>
                    </div>
                    <div class="new-club-buttons">
                        <a href="forum.html" class="btn btn-primary">
                            <i class="fas fa-lightbulb"></i>
                            アイデアを投稿
                        </a>
                        <a href="news.html" class="btn btn-secondary">
                            <i class="fas fa-info-circle"></i>
                            詳細を確認
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <!-- Features -->
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
    <!-- Notifications -->
    <script src="js/firebase-config.js"></script>
    <script src="js/notification-manager.js"></script>
</body>
</html>


[CNAME]
tools.ichigak-engeki5.com

[council.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>生徒会紹介 - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- PWA対応メタタグ -->
    <meta name="theme-color" content="#4a7c59">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="なずなポータル">
    <meta name="msapplication-TileColor" content="#4a7c59">
    <meta name="msapplication-config" content="browserconfig.xml">
    <meta name="application-name" content="なずなポータル">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- iOS対応 -->
    <link rel="apple-touch-icon" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="152x152" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="167x167" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    
    <!-- Windows対応 -->
    <meta name="msapplication-TileImage" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-square70x70logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-72x72.png">
    <meta name="msapplication-square150x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-wide310x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <meta name="msapplication-square310x310logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-512x512.png">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html" class="active">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ページヘッダー -->
        <section class="page-header">
            <div class="container">
                <div class="page-header-content">
                    <h1><i class="fas fa-users"></i> 生徒会紹介</h1>
                    <p>私たちと一緒に、より良い学校生活を作りましょう</p>
                </div>
            </div>
        </section>

        <!-- 生徒会について -->
        <section class="council-about">
            <div class="container">
                <div class="about-content">
                    <div class="about-text">
                        <h2>生徒会について</h2>
                        <p>私たち生徒会は、全校生徒の代表として学校生活の向上に取り組んでいます。生徒一人ひとりの声を大切にし、みんなが楽しく充実した学校生活を送れるよう、様々な活動を行っています。</p>
                        <div class="mission-points">
                            <div class="mission-point">
                                <i class="fas fa-heart"></i>
                                <div>
                                    <h4>生徒の声を大切に</h4>
                                    <p>なずなフォーラムを通じて、みなさんの意見や要望をお聞きしています</p>
                                </div>
                            </div>
                            <div class="mission-point">
                                <i class="fas fa-hands-helping"></i>
                                <div>
                                    <h4>協力とサポート</h4>
                                    <p>部活動や学校行事のサポート、生徒同士の交流促進に努めています</p>
                                </div>
                            </div>
                            <div class="mission-point">
                                <i class="fas fa-lightbulb"></i>
                                <div>
                                    <h4>新しいアイデア</h4>
                                    <p>創造的な企画や改善提案で、学校生活をより楽しくしています</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="about-image">
                        <div class="council-graphic">
                            <i class="fas fa-users-cog"></i>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- メンバー紹介 -->
        <section class="council-members-section">
            <div class="container">
                <h2 class="section-title">メンバー紹介</h2>
                <div class="council-members" id="council-members">
                    <!-- メンバー情報はJavaScriptで動的に生成 -->
                </div>
            </div>
        </section>

        <!-- 活動内容 -->
        <section class="council-activities">
            <div class="container">
                <h2 class="section-title">主な活動内容</h2>
                <div class="activities-grid">
                    <div class="activity-card">
                        <div class="activity-icon">
                            <i class="fas fa-calendar-alt"></i>
                        </div>
                        <h3>学校行事の企画・運営</h3>
                        <p>体育祭、文化祭、卒業式などの学校行事の企画・運営を行っています。生徒のみなさんに楽しんでもらえるよう、工夫を凝らした企画を考えています。</p>
                    </div>
                    
                    <div class="activity-card">
                        <div class="activity-icon">
                            <i class="fas fa-bullhorn"></i>
                        </div>
                        <h3>生徒の意見集約</h3>
                        <p>なずなフォーラムやアンケートを通じて、生徒のみなさんの意見や要望を集め、学校側との橋渡し役を務めています。</p>
                    </div>
                    
                    <div class="activity-card">
                        <div class="activity-icon">
                            <i class="fas fa-handshake"></i>
                        </div>
                        <h3>部活動サポート</h3>
                        <p>各部活動の活動支援や、部活動間の交流促進、新入生への部活動紹介などを行っています。</p>
                    </div>
                    
                    <div class="activity-card">
                        <div class="activity-icon">
                            <i class="fas fa-newspaper"></i>
                        </div>
                        <h3>情報発信</h3>
                        <p>生徒会だよりの発行や、このポータルサイトを通じて、学校生活に関する情報を発信しています。</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- 生徒会に参加しよう -->
        <section class="join-council">
            <div class="container">
                <div class="join-content">
                    <h2>生徒会に参加しませんか？</h2>
                    <p>生徒会では、一緒に活動してくれる仲間を募集しています。学校生活をより良くしたい、みんなの役に立ちたいという気持ちがあれば、誰でも参加できます。</p>
                    <div class="join-buttons">
                        <a href="forum.html" class="btn btn-primary">
                            <i class="fas fa-comments"></i>
                            質問・相談する
                        </a>
                        <a href="news.html" class="btn btn-secondary">
                            <i class="fas fa-bell"></i>
                            募集情報を見る
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
</body>
</html>


[firebase-messaging-sw.js]
// Firebase Messaging Service Worker
// iOS、Android、Windows対応版
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js');
importScripts('https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js');

// Firebase設定
const firebaseConfig = {
    apiKey: "AIzaSyDQ8g88Z4rW-nX6TzCGjxFvfDptju4fOIc",
    authDomain: "nazuna-portal.firebaseapp.com",
    projectId: "nazuna-portal",
    storageBucket: "nazuna-portal.firebasestorage.app",
    messagingSenderId: "181514532945",
    appId: "1:181514532945:web:65043ee5d7d435a7af6070"
};

// Firebase初期化
firebase.initializeApp(firebaseConfig);

// Firebase Messaging初期化
const messaging = firebase.messaging();

// iOS対応: 通知許可の確認（カスタムメッセージ対応版）
self.addEventListener('push', function(event) {
    console.log('Push event received:', event);
    
    if (event.data) {
        const data = event.data.json();
        console.log('Push data:', data);
        
        // カスタムメッセージのデータを優先使用
        const options = {
            body: data.body || data.message || 'お知らせがあります',
            icon: data.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
            badge: data.badge || '/images/badge-72x72.png',
            tag: data.tag || data.category || 'general',
            data: {
                url: data.url || data.action_url || '/',
                category: data.category || 'general',
                timestamp: data.timestamp || Date.now(),
                originalData: data
            },
            actions: data.actions || [
                { action: 'view', title: '詳細を見る' },
                { action: 'dismiss', title: '閉じる' }
            ],
            requireInteraction: data.requireInteraction || false,
            silent: data.silent || false,
            vibrate: data.vibrate || [200, 100, 200],
            renotify: data.renotify || false,
            timestamp: data.timestamp || Date.now()
        };
        
        event.waitUntil(
            self.registration.showNotification(data.title || 'お知らせ', options)
        );
    }
});

// バックグラウンドメッセージ処理
messaging.onBackgroundMessage(function(payload) {
    console.log('Received background message:', payload);
    
    const { notification, data } = payload;
    
    const notificationTitle = notification?.title || 'お知らせ';
    const notificationOptions = {
        body: notification?.body || 'お知らせがあります',
        icon: notification?.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
        badge: '/images/badge-72x72.png',
        tag: data?.category || 'general',
        requireInteraction: data?.priority === '2',
        data: {
            url: data?.url || '/',
            category: data?.category || 'general',
            timestamp: Date.now()
        },
        actions: notification?.actions || [
            { action: 'view', title: '詳細を見る' },
            { action: 'dismiss', title: '閉じる' }
        ]
    };
    
    return self.registration.showNotification(notificationTitle, notificationOptions);
});

// 通知クリック処理（クロスプラットフォーム対応）
self.addEventListener('notificationclick', function(event) {
    console.log('Notification clicked:', event);
    
    event.notification.close();
    
    const urlToOpen = event.notification.data?.url || '/';
    const action = event.action;
    
    if (action === 'dismiss') {
        return;
    }
    
    // 通知クリックイベントを記録
    try {
        const analyticsData = {
            eventType: 'notification_click',
            notificationId: event.notification.tag,
            timestamp: Date.now(),
            action: action || 'view'
        };
        
        // 分析データをキャッシュに保存（オフライン対応）
        self.registration.pushManager.getSubscription().then(subscription => {
            if (subscription) {
                analyticsData.endpoint = subscription.endpoint;
            }
            
            // IndexedDBに保存
            const dbPromise = indexedDB.open('notification-analytics', 1);
            
            dbPromise.onupgradeneeded = function(event) {
                const db = event.target.result;
                if (!db.objectStoreNames.contains('events')) {
                    db.createObjectStore('events', { keyPath: 'id', autoIncrement: true });
                }
            };
            
            dbPromise.onsuccess = function(event) {
                const db = event.target.result;
                const tx = db.transaction('events', 'readwrite');
                const store = tx.objectStore('events');
                store.add(analyticsData);
            };
        }).catch(err => console.error('Failed to record notification click:', err));
    } catch (error) {
        console.error('Error recording notification click:', error);
    }
    
    event.waitUntil(
        clients.matchAll({
            type: 'window',
            includeUncontrolled: true
        }).then(function(clientList) {
            // 既に開いているタブがあるかチェック
            for (let i = 0; i < clientList.length; i++) {
                const client = clientList[i];
                if (client.url.includes(self.location.origin) && 'focus' in client) {
                    return client.focus().then(() => {
                        // 完全なURLを構築
                        let fullUrl = urlToOpen;
                        if (!urlToOpen.startsWith('http') && !urlToOpen.startsWith('/')) {
                            fullUrl = '/' + urlToOpen;
                        }
                        if (!urlToOpen.startsWith('http')) {
                            fullUrl = self.location.origin + fullUrl;
                        }
                        
                        // 現在のURLと異なる場合のみナビゲート
                        if (client.url !== fullUrl) {
                            return client.navigate(fullUrl);
                        }
                    });
                }
            }
            
            // 新しいタブを開く
            if (clients.openWindow) {
                // 完全なURLを構築
                let fullUrl = urlToOpen;
                if (!urlToOpen.startsWith('http') && !urlToOpen.startsWith('/')) {
                    fullUrl = '/' + urlToOpen;
                }
                if (!urlToOpen.startsWith('http')) {
                    fullUrl = self.location.origin + fullUrl;
                }
                
                return clients.openWindow(fullUrl);
            }
        }).catch(function(error) {
            console.error('Error handling notification click:', error);
            // フォールバック: 新しいタブを開く
            if (clients.openWindow) {
                return clients.openWindow(urlToOpen);
            }
        })
    );
});

// iOS対応: 通知の表示処理
self.addEventListener('notificationclose', function(event) {
    console.log('Notification closed:', event);
});

// バックグラウンド同期（オフライン対応）
self.addEventListener('sync', function(event) {
    console.log('Background sync:', event);
    
    if (event.tag === 'background-sync') {
        event.waitUntil(
            // オフライン時のデータ同期処理
            syncOfflineData()
        );
    }
});

// オフライン時のデータ同期
async function syncOfflineData() {
    try {
        // オフライン時に保存されたデータを同期
        const cache = await caches.open('nazuna-portal-cache');
        const requests = await cache.keys();
        
        for (const request of requests) {
            if (request.url.includes('/api/')) {
                // APIリクエストを再実行
                try {
                    await fetch(request);
                } catch (error) {
                    console.log('Sync failed for:', request.url);
                }
            }
        }
    } catch (error) {
        console.error('Background sync failed:', error);
    }
}


[forum.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>なずなフォーラム - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- PWA対応メタタグ -->
    <meta name="theme-color" content="#4a7c59">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="なずなポータル">
    <meta name="msapplication-TileColor" content="#4a7c59">
    <meta name="msapplication-config" content="browserconfig.xml">
    <meta name="application-name" content="なずなポータル">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- iOS対応 -->
    <link rel="apple-touch-icon" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="152x152" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="167x167" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    
    <!-- Windows対応 -->
    <meta name="msapplication-TileImage" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-square70x70logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-72x72.png">
    <meta name="msapplication-square150x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-wide310x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <meta name="msapplication-square310x310logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-512x512.png">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html" class="active">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
                <div class="nav-auth" style="display:flex; gap:8px; align-items:center;">
                    <button id="nav-login-button" class="btn btn-outline" aria-label="ログイン" title="ログイン"><i class="fas fa-sign-in-alt"></i></button>
                    <button id="nav-logout-button" class="btn btn-outline" style="display:none;"><i class="fas fa-sign-out-alt"></i> ログアウト</button>
                </div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ページヘッダー -->
        <section class="page-header">
            <div class="container">
                <div class="page-header-content">
                    <h1><i class="fas fa-comments"></i> なずなフォーラム</h1>
                    <p>あなたの声を聞かせてください</p>
                </div>
            </div>
        </section>

        <!-- フォーラムについて -->
        <section class="forum-about">
            <div class="container">
                <div class="about-cards">
                    <div class="about-card">
                        <div class="about-icon">
                            <i class="fas fa-user-secret"></i>
                        </div>
                        <h3>匿名投稿</h3>
                        <p>名前はここに表示されません。安心して意見や要望を投稿できます</p>
                    </div>
                    
                    <div class="about-card">
                        <div class="about-icon">
                            <i class="fas fa-reply"></i>
                        </div>
                        <h3>生徒会からの返信</h3>
                        <p>投稿された内容は生徒会で検討し、可能な限り返信いたします</p>
                    </div>
                    
                    <div class="about-card">
                        <div class="about-icon">
                            <i class="fas fa-shield-alt"></i>
                        </div>
                        <h3>安全な環境</h3>
                        <p>不適切な投稿は削除され、建設的な議論の場を維持しています</p>
                    </div>
                </div>
            </div>
        </section>

        <!-- 投稿フォーム -->
        <section class="forum-post">
            <div class="container">
                <div class="forum-container">
                    <div class="post-form">
                        <h2><i class="fas fa-edit"></i> 新しい投稿</h2>
                        <div class="form-group">
                            <label for="post-category">カテゴリ</label>
                            <select id="post-category" class="form-control">
                                <option value="suggestion">提案・要望</option>
                                <option value="complaint">苦情・問題</option>
                                <option value="question">質問</option>
                                <option value="event">イベント関連</option>
                                <option value="facility">施設・設備</option>
                                <option value="other">その他</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="forum-content">内容</label>
                            <textarea id="forum-content" class="form-control" placeholder="あなたの声を聞かせてください（匿名投稿可）&#10;&#10;例：&#10;・図書室の開館時間を延長してほしい&#10;・体育祭の種目について提案があります&#10;・校内の設備で困っていることがあります" maxlength="1000"></textarea>
                            <div class="char-counter" id="forum-char-counter" style="text-align:right; font-size:12px; color:#666; margin-top:4px;">0 / 1000</div>
                        </div>
                        <div class="form-actions">
                            <button id="submit-post" class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i>
                                投稿する
                            </button>
                            <div class="post-guidelines">
                                <small>
                                    <i class="fas fa-info-circle"></i>
                                    投稿前に<a href="#guidelines">投稿ガイドライン</a>をご確認ください
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- 投稿一覧 -->
        <section class="forum-posts">
            <div class="container">
                <div class="posts-header">
                    <h2><i class="fas fa-list"></i> 投稿一覧</h2>
                    <div class="auth-actions">
                        <button id="login-button" class="btn btn-outline"><i class="fas fa-sign-in-alt"></i> ログイン</button>
                        <button id="logout-button" class="btn btn-outline" style="display:none;"><i class="fas fa-sign-out-alt"></i> ログアウト</button>
                    </div>
                    <div class="posts-filter" style="display:flex; gap:8px; flex-wrap:wrap; align-items:center;">
                        <select id="status-filter" class="form-control">
                            <option value="all">すべて</option>
                            <option value="pending">確認中</option>
                            <option value="in_progress">対応中</option>
                            <option value="resolved">対応済み</option>
                        </select>
                        <input type="text" id="search-posts" class="form-control" placeholder="キーワード検索" style="min-width:180px;">
                        <select id="sort-posts" class="form-control">
                            <option value="created_at_desc">新しい順</option>
                            <option value="created_at_asc">古い順</option>
                        </select>
                        <div class="pagination" style="display:flex; gap:6px; align-items:center;">
                            <button id="page-prev" class="btn btn-outline" aria-label="前のページ"><i class="fas fa-chevron-left"></i></button>
                            <span id="page-info" style="min-width:80px; text-align:center;">1 / 1</span>
                            <button id="page-next" class="btn btn-outline" aria-label="次のページ"><i class="fas fa-chevron-right"></i></button>
                        </div>
                    </div>
                </div>
                <div class="posts-list" id="posts-container">
                    <div class="loading">読み込み中...</div>
                </div>
                <div class="chat-panel" id="chat-panel" style="display:none; margin-top:16px;">
                    <h3><i class="fas fa-comments"></i> 生徒会とのチャット</h3>
                    <div id="chat-messages" class="chat-messages" style="border:1px solid #ddd; border-radius:8px; padding:12px; min-height:120px; max-height:240px; overflow:auto;"></div>
                    <div class="chat-input" style="display:flex; gap:8px; margin-top:8px;">
                        <input type="text" id="chat-text" class="form-control" placeholder="メッセージを入力">
                        <button id="chat-send" class="btn btn-primary"><i class="fas fa-paper-plane"></i></button>
                    </div>
                </div>
            </div>
        </section>

        <!-- 投稿ガイドライン -->
        <section class="guidelines" id="guidelines">
            <div class="container">
                <h2 class="section-title">投稿ガイドライン</h2>
                <div class="guidelines-content">
                    <div class="guideline-section">
                        <h3><i class="fas fa-check-circle"></i> 投稿できる内容</h3>
                        <ul>
                            <li>学校生活の改善に関する提案や要望</li>
                            <li>学校行事やイベントに関する意見</li>
                            <li>施設や設備に関する問題の報告</li>
                            <li>部活動や授業に関する建設的な意見</li>
                            <li>生徒会活動に関する質問や提案</li>
                        </ul>
                    </div>
                    
                    <div class="guideline-section">
                        <h3><i class="fas fa-times-circle"></i> 投稿できない内容</h3>
                        <ul>
                            <li>特定の個人を中傷する内容</li>
                            <li>差別的な表現や不適切な言葉遣い</li>
                            <li>学校や教員への誹謗中傷</li>
                            <li>事実と異なる情報の拡散</li>
                            <li>法律に違反する内容</li>
                        </ul>
                    </div>
                    
                    <div class="guideline-section">
                        <h3><i class="fas fa-lightbulb"></i> より良い投稿のために</h3>
                        <ul>
                            <li>具体的で分かりやすい内容を心がけましょう</li>
                            <li>建設的で前向きな提案を含めましょう</li>
                            <li>他の人の意見も尊重しましょう</li>
                            <li>緊急性の高い問題は直接生徒会室へ</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <!-- Features -->
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
    <!-- Notifications -->
    <script src="js/firebase-config.js"></script>
    <script src="js/notification-manager.js"></script>
    
    <!-- 認証モーダル -->
    <div class="modal-overlay" id="auth-modal-overlay">
        <div class="modal" id="auth-modal">
            <div class="modal-header">
                <h3 id="auth-modal-title">ログイン</h3>
                <button class="modal-close" id="auth-modal-close">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div id="step-student-number" class="auth-step">
                    <p style="margin-top:0; color:#555; font-size:14px;">生徒番号を入力して、登録済みか確認します。</p>
                    <div class="form-group">
                        <label for="student-number-input">生徒番号</label>
                        <input type="text" id="student-number-input" class="form-control" placeholder="例: 2400123" autocomplete="off">
                    </div>
                    <button id="check-student-number" class="btn btn-primary">次へ</button>
                </div>
                <div id="step-register" class="auth-step" style="display:none;">
                    <p style="margin-top:0; color:#555; font-size:14px;">はじめての方は、氏名とパスワードを設定してください。</p>
                    <div class="form-group">
                        <label for="student-name-input">氏名</label>
                        <input type="text" id="student-name-input" class="form-control" placeholder="山田 太郎" autocomplete="off">
                    </div>
                    <div class="form-group">
                        <label for="password-set-input">パスワード設定</label>
                        <div style="position:relative;">
                            <input type="password" id="password-set-input" class="form-control" placeholder="6文字以上" autocomplete="new-password">
                            <button id="toggle-password-set" class="btn btn-outline" style="position:absolute; right:6px; top:50%; transform:translateY(-50%); padding:4px 8px;">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <button id="register-student" class="btn btn-primary">登録してログイン</button>
                </div>
                <div id="step-login" class="auth-step" style="display:none;">
                    <p style="margin-top:0; color:#555; font-size:14px;">登録済みの方は、パスワードを入力してください。</p>
                    <div class="form-group">
                        <label for="password-login-input">パスワード</label>
                        <div style="position:relative;">
                            <input type="password" id="password-login-input" class="form-control" placeholder="パスワードを入力" autocomplete="current-password">
                            <button id="toggle-password-login" class="btn btn-outline" style="position:absolute; right:6px; top:50%; transform:translateY(-50%); padding:4px 8px;">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </div>
                    <button id="login-student" class="btn btn-primary">ログイン</button>
                </div>
                <div id="auth-error" class="login-error" style="display:none; margin-top:8px; color:#c00;"></div>
            </div>
        </div>
    </div>
</body>
</html>


[gas-sample.gs]
// なずなポータル統合Google Apps Script

// ========================================
// 設定値（PropertiesServiceで管理）
// ========================================

// 設定値を取得する関数
function getConfig() {
  const properties = PropertiesService.getScriptProperties();
  
  return {
    // Supabase設定
    SUPABASE_URL: properties.getProperty('SUPABASE_URL') || 'YOUR_SUPABASE_URL_HERE',
    SUPABASE_SERVICE_KEY: properties.getProperty('SUPABASE_SERVICE_KEY') || 'YOUR_SUPABASE_SERVICE_KEY_HERE',
    
    // Firebase設定
    FIREBASE_PROJECT_ID: properties.getProperty('FIREBASE_PROJECT_ID') || 'your-project-id',
    FCM_ENDPOINT: 'https://fcm.googleapis.com/v1/projects/{PROJECT_ID}/messages:send',
    FIREBASE_ACCESS_TOKEN: properties.getProperty('FIREBASE_ACCESS_TOKEN') || 'your-access-token',
    
    // スプレッドシート設定（後方互換性のため）
    SPREADSHEET_ID: properties.getProperty('SPREADSHEET_ID') || 'YOUR_SPREADSHEET_ID_HERE',
    
    // 通知設定
    MAX_BATCH_SIZE: 1000,
    RETRY_ATTEMPTS: 3,
    RETRY_DELAY: 1000,
    REQUESTS_PER_MINUTE: 600,
    
    // デバッグモード
    DEBUG_MODE: properties.getProperty('DEBUG_MODE') === 'true'
  };
}

// 管理者認証情報を取得
function getAdminCredentials() {
  const properties = PropertiesService.getScriptProperties();
  const adminData = properties.getProperty('ADMIN_ACCOUNTS');
  
  if (!adminData) {
    // デフォルト管理者（初回設定用）
    return {
      'admin@school.ac.jp': {
        password: 'admin123',
        name: 'システム管理者',
        role: 'super_admin',
        permissions: ['all']
      }
    };
  }
  
  try {
    return JSON.parse(adminData);
  } catch (error) {
    console.error('Error parsing admin credentials:', error);
    return {};
  }
}

// シート名（後方互換性のため）
const SHEETS = {
  CLUBS: '部活動',
  POSTS: '投稿',
  NEWS: 'お知らせ',
  SURVEYS: 'アンケート',
  MEMBERS: 'メンバー'
};

// ========================================
// メイン関数（WebAppのエントリーポイント）
// ========================================

// GET リクエスト処理（JSONP対応）
function doGet(e) {
  const action = e.parameter.action;
  const callback = e.parameter.callback;
  
  let result = { success: false, error: 'Unknown action' };
  
  try {
    switch (action) {
      case 'getClubs':
        result = getClubs(e.parameter);
        break;
      case 'getPosts':
        result = getPosts(e.parameter);
        break;
      case 'submitPost':
        result = submitPost(e.parameter);
        break;
      case 'getNews':
        result = getNews(e.parameter);
        break;
      case 'getSurveys':
        result = getSurveys(e.parameter);
        break;
      case 'getMembers':
        result = getMembers(e.parameter);
        break;
      // POST系のアクションもGETで処理（JSONP対応）
      case 'adminLogin':
        result = adminLogin(e.parameter);
        break;
      case 'registerDevice':
        result = registerDevice(e.parameter);
        break;
      case 'unregisterDevice':
        result = unregisterDevice(e.parameter);
        break;
      case 'sendNotification':
        result = sendNotification(e.parameter);
        break;
      case 'sendBulkNotification':
        result = sendBulkNotification(e.parameter);
        break;
      case 'getNotificationHistory':
        result = getNotificationHistory(e.parameter);
        break;
      case 'getNotificationStatistics':
        result = getNotificationStatistics(e.parameter);
        break;
      case 'getNotificationTemplates':
        result = getNotificationTemplates(e.parameter);
        break;
      case 'createNews':
        result = createNews(e.parameter);
        break;
      case 'updateNews':
        result = updateNews(e.parameter);
        break;
      case 'updateSurvey':
        result = updateSurvey(e.parameter);
        break;
      case 'updateClub':
        result = updateClub(e.parameter);
        break;
      case 'replyToPost':
        result = replyToPost(e.parameter);
        break;
      case 'registerFCMToken':
        result = registerFCMToken(e.parameter);
        break;
      default:
        result = { success: false, error: 'Invalid action: ' + action };
    }
  } catch (error) {
    console.error('Error in doGet:', error);
    result = { success: false, error: error.toString() };
  }
  
  // JSONP形式で返す
  const jsonpResponse = callback + '(' + JSON.stringify(result) + ');';
  return ContentService
    .createTextOutput(jsonpResponse)
    .setMimeType(ContentService.MimeType.JAVASCRIPT);
}

// POST リクエスト処理（通知システム用）
function doPost(e) {
  try {
    const data = JSON.parse(e.postData.contents);
    const action = data.action;
    
    // CORS対応
    const response = {
      headers: {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Content-Type': 'application/json'
      }
    };
    
    let result;
    
    // 認証が必要なアクション
    const authRequiredActions = [
      'sendNotification', 'sendBulkNotification', 'getNotificationHistory', 
      'getNotificationStatistics', 'adminLogin', 'updateNews', 'updateSurvey',
      'updateClub', 'replyToPost'
    ];
    
    if (authRequiredActions.includes(action)) {
      if (!isAuthorized(data.adminEmail, data.adminPassword)) {
        return createResponse({
          success: false,
          error: 'Unauthorized access'
        }, response.headers);
      }
    }
    
    // アクション処理
    switch (action) {
      // 認証
      case 'adminLogin':
        result = adminLogin(data);
        break;
      
      // 通知システム
      case 'registerDevice':
        result = registerDevice(data);
        break;
      case 'unregisterDevice':
        result = unregisterDevice(data);
        break;
      case 'sendNotification':
        result = sendNotification(data);
        break;
      case 'sendBulkNotification':
        result = sendBulkNotification(data);
        break;
      case 'getNotificationHistory':
        result = getNotificationHistory(data);
        break;
      case 'getNotificationStatistics':
        result = getNotificationStatistics(data);
        break;
      case 'getNotificationTemplates':
        result = getNotificationTemplates(data);
        break;
      case 'createNews':
        result = createNews(data);
        break;
      
      // データ管理
      case 'updateNews':
        result = updateNews(data);
        break;
      case 'updateSurvey':
        result = updateSurvey(data);
        break;
      case 'updateClub':
        result = updateClub(data);
        break;
      case 'replyToPost':
        result = replyToPost(data);
        break;
      
      default:
        result = { success: false, error: 'Unknown action: ' + action };
    }
    
    return createResponse(result, response.headers);
    
  } catch (error) {
    console.error('Error in doPost:', error);
    return createResponse({
      success: false,
      error: error.toString()
    });
  }
}

// OPTIONS リクエスト対応（CORS preflight）
function doOptions(e) {
  return createResponse({}, {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',
    'Access-Control-Allow-Headers': 'Content-Type'
  });
}

// 部活動データを取得
function getClubs(params) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.CLUBS);
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { success: true, clubs: [] };
    }
    
    const headers = data[0];
    const clubs = data.slice(1).map(row => {
      const club = {};
      headers.forEach((header, index) => {
        club[header] = row[index];
      });
      return club;
    });
    
    return { success: true, clubs: clubs };
  } catch (error) {
    console.error('Error in getClubs:', error);
    return { success: false, error: error.toString() };
  }
}

// 投稿データを取得
function getPosts(params) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.POSTS);
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { success: true, posts: [] };
    }
    
    const headers = data[0];
    const posts = data.slice(1).map(row => {
      const post = {};
      headers.forEach((header, index) => {
        post[header] = row[index];
      });
      return post;
    }).reverse(); // 新しい投稿を上に
    
    return { success: true, posts: posts };
  } catch (error) {
    console.error('Error in getPosts:', error);
    return { success: false, error: error.toString() };
  }
}

// 新しい投稿を追加
function submitPost(params) {
  try {
    const content = params.content;
    const category = params.category || 'other';
    
    if (!content || content.trim().length === 0) {
      return { success: false, error: '投稿内容が空です' };
    }
    
    if (content.length > 1000) {
      return { success: false, error: '投稿内容が長すぎます（1000文字以内）' };
    }
    
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.POSTS);
    const postId = 'POST_' + Date.now();
    const timestamp = new Date();
    
    // ヘッダーが存在しない場合は作成
    if (sheet.getLastRow() === 0) {
      sheet.appendRow(['id', 'content', 'category', 'status', 'created_at', 'reply']);
    }
    
    sheet.appendRow([
      postId,
      content.trim(),
      category,
      'pending',
      timestamp,
      ''
    ]);
    
    return { 
      success: true, 
      postId: postId,
      message: '投稿が完了しました' 
    };
  } catch (error) {
    console.error('Error in submitPost:', error);
    return { success: false, error: error.toString() };
  }
}

// お知らせデータを取得
function getNews(params) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.NEWS);
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { success: true, news: [] };
    }
    
    const headers = data[0];
    const news = data.slice(1).map(row => {
      const item = {};
      headers.forEach((header, index) => {
        item[header] = row[index];
      });
      return item;
    }).reverse(); // 新しいお知らせを上に
    
    return { success: true, news: news };
  } catch (error) {
    console.error('Error in getNews:', error);
    return { success: false, error: error.toString() };
  }
}

// アンケートデータを取得
function getSurveys(params) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.SURVEYS);
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { success: true, surveys: [] };
    }
    
    const headers = data[0];
    const surveys = data.slice(1).map(row => {
      const survey = {};
      headers.forEach((header, index) => {
        survey[header] = row[index];
      });
      return survey;
    });
    
    return { success: true, surveys: surveys };
  } catch (error) {
    console.error('Error in getSurveys:', error);
    return { success: false, error: error.toString() };
  }
}

// メンバーデータを取得
function getMembers(params) {
  try {
    const sheet = SpreadsheetApp.openById(SPREADSHEET_ID).getSheetByName(SHEETS.MEMBERS);
    const data = sheet.getDataRange().getValues();
    
    if (data.length <= 1) {
      return { success: true, members: [] };
    }
    
    const headers = data[0];
    const members = data.slice(1).map(row => {
      const member = {};
      headers.forEach((header, index) => {
        member[header] = row[index];
      });
      return member;
    });
    
    return { success: true, members: members };
  } catch (error) {
    console.error('Error in getMembers:', error);
    return { success: false, error: error.toString() };
  }
}

// スプレッドシートの初期化（初回実行時に使用）
function initializeSpreadsheet() {
  try {
    const config = getConfig();
    const ss = SpreadsheetApp.openById(config.SPREADSHEET_ID);
    
    // 部活動シート
    let sheet = ss.getSheetByName(SHEETS.CLUBS);
    if (!sheet) {
      sheet = ss.insertSheet(SHEETS.CLUBS);
      sheet.appendRow(['name', 'description', 'members', 'schedule', 'category', 'image_url']);
      sheet.appendRow(['サッカー部', '全国大会を目指して日々練習に励んでいます', 45, '月・水・金', 'sports', '']);
      sheet.appendRow(['吹奏楽部', '美しいハーモニーを奏でることを目標に活動中', 32, '火・木・土', 'music', '']);
    }
    
    // 投稿シート
    sheet = ss.getSheetByName(SHEETS.POSTS);
    if (!sheet) {
      sheet = ss.insertSheet(SHEETS.POSTS);
      sheet.appendRow(['id', 'content', 'category', 'status', 'created_at', 'reply']);
    }
    
    // お知らせシート
    sheet = ss.getSheetByName(SHEETS.NEWS);
    if (!sheet) {
      sheet = ss.insertSheet(SHEETS.NEWS);
      sheet.appendRow(['date', 'title', 'content', 'type']);
      sheet.appendRow(['2024/01/15', '体育祭のお知らせ', '来月20日に体育祭を開催します。', 'event']);
    }
    
    // アンケートシート
    sheet = ss.getSheetByName(SHEETS.SURVEYS);
    if (!sheet) {
      sheet = ss.insertSheet(SHEETS.SURVEYS);
      sheet.appendRow(['title', 'description', 'status', 'deadline']);
    }
    
    // メンバーシート
    sheet = ss.getSheetByName(SHEETS.MEMBERS);
    if (!sheet) {
      sheet = ss.insertSheet(SHEETS.MEMBERS);
      sheet.appendRow(['name', 'role', 'message']);
      sheet.appendRow(['会長 山田太郎', '全体統括', '皆さんの声を大切にします！']);
      sheet.appendRow(['副会長 田中花子', '企画運営', 'イベント企画頑張ります！']);
    }
    
    console.log('スプレッドシートの初期化が完了しました');
  } catch (error) {
    console.error('Error in initializeSpreadsheet:', error);
  }
}

// ========================================
// 管理者認証システム
// ========================================

// 管理者ログイン
function adminLogin(data) {
  try {
    // URLパラメータまたはJSONボディからデータを取得
    const email = data.email || data.parameter?.email;
    const password = data.password || data.parameter?.password;
    
    const adminCredentials = getAdminCredentials();
    
    if (adminCredentials[email] && adminCredentials[email].password === password) {
      const admin = adminCredentials[email];
      return {
        success: true,
        admin: {
          email: email,
          name: admin.name,
          role: admin.role,
          permissions: admin.permissions
        }
      };
    }
    
    return { success: false, error: 'Invalid credentials' };
  } catch (error) {
    console.error('Error in adminLogin:', error);
    return { success: false, error: error.toString() };
  }
}

// 管理者認証チェック
function isAuthorized(email, password) {
  if (!email || !password) return false;
  
  const adminCredentials = getAdminCredentials();
  return adminCredentials[email] && adminCredentials[email].password === password;
}

// 管理者アカウント設定（初期設定用）
function setupAdminAccounts() {
  const adminAccounts = {
    'admin@school.ac.jp': {
      password: 'admin123',
      name: 'システム管理者',
      role: 'super_admin',
      permissions: ['all']
    },
    'council@school.ac.jp': {
      password: 'council456',
      name: '生徒会管理者',
      role: 'admin',
      permissions: ['notification', 'news', 'survey', 'forum']
    },
    'teacher@school.ac.jp': {
      password: 'teacher789',
      name: '教員管理者',
      role: 'moderator',
      permissions: ['forum', 'news']
    }
  };
  
  const properties = PropertiesService.getScriptProperties();
  properties.setProperty('ADMIN_ACCOUNTS', JSON.stringify(adminAccounts));
  
  console.log('管理者アカウントを設定しました');
  return { success: true, message: 'Admin accounts configured' };
}

// ========================================
// 通知システム
// ========================================

// FCMトークン登録（firebase-config.js用）
function registerFCMToken(params) {
  try {
    const { fcmToken, deviceInfo } = params;
    
    if (!fcmToken) {
      return { success: false, error: 'FCM token is required' };
    }
    
    const deviceData = {
      fcm_token: fcmToken,
      user_agent: deviceInfo?.userAgent || '',
      platform: deviceInfo?.platform || 'web',
      browser: deviceInfo?.browser || '',
      device_info: deviceInfo || {},
      is_active: true,
      last_used_at: new Date().toISOString()
    };
    
    const response = supabaseRequest('POST', 'device_registrations?on_conflict=fcm_token', deviceData);
    
    if (response.error) {
      // 既存のトークンの場合は更新
      if (response.error.code === '23505') { // unique violation
        const updateResponse = supabaseRequest('PATCH', 
          `device_registrations?fcm_token=eq.${fcmToken}`, 
          {
            is_active: true,
            last_used_at: new Date().toISOString(),
            user_agent: deviceInfo?.userAgent,
            device_info: deviceInfo
          }
        );
        return { success: !updateResponse.error, data: updateResponse.data };
      }
      return { success: false, error: response.error.message };
    }
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.error('Error registering FCM token:', error);
    return { success: false, error: error.toString() };
  }
}

// デバイス登録
function registerDevice(data) {
  try {
    // URLパラメータまたはJSONボディからデータを取得
    const fcmToken = data.fcmToken || data.parameter?.fcmToken;
    const userAgent = data.userAgent || data.parameter?.userAgent;
    const platform = data.platform || data.parameter?.platform;
    const browser = data.browser || data.parameter?.browser;
    const deviceInfo = data.deviceInfo || data.parameter?.deviceInfo;
    
    if (!fcmToken) {
      return { success: false, error: 'FCM token is required' };
    }
    
    const deviceData = {
      fcm_token: fcmToken,
      user_agent: userAgent || '',
      platform: platform || 'web',
      browser: browser || '',
      device_info: deviceInfo || {},
      is_active: true,
      last_used_at: new Date().toISOString()
    };
    
    const response = supabaseRequest('POST', 'device_registrations?on_conflict=fcm_token', deviceData);
    
    if (response.error) {
      // 既存のトークンの場合は更新
      if (response.error.code === '23505') { // unique violation
        const updateResponse = supabaseRequest('PATCH', 
          `device_registrations?fcm_token=eq.${fcmToken}`, 
          {
            is_active: true,
            last_used_at: new Date().toISOString(),
            user_agent: userAgent,
            device_info: deviceInfo
          }
        );
        return { success: !updateResponse.error, data: updateResponse.data };
      }
      return { success: false, error: response.error.message };
    }
    
    return { success: true, data: response.data };
    
  } catch (error) {
    console.error('Error registering device:', error);
    return { success: false, error: error.toString() };
  }
}

// デバイス登録解除
function unregisterDevice(data) {
  try {
    const { fcmToken } = data;
    
    if (!fcmToken) {
      return { success: false, error: 'FCM token is required' };
    }
    
    const response = supabaseRequest('PATCH', 
      `device_registrations?fcm_token=eq.${fcmToken}`, 
      { is_active: false }
    );
    
    return { success: !response.error, data: response.data };
    
  } catch (error) {
    console.error('Error unregistering device:', error);
    return { success: false, error: error.toString() };
  }
}

// 通知送信（カスタムメッセージ対応版）
function sendNotification(data) {
  try {
    // URLパラメータまたはJSONボディからデータを取得
    const templateKey = data.templateKey || data.parameter?.templateKey;
    // JSONPで渡された文字列をオブジェクトに復元
    let templateData = data.templateData || data.parameter?.templateData;
    if (typeof templateData === 'string') {
      try { templateData = JSON.parse(templateData); } catch (e) {}
    }
    const targetType = data.targetType || data.parameter?.targetType || 'all';
    let targetCriteria = data.targetCriteria || data.parameter?.targetCriteria || {};
    if (typeof targetCriteria === 'string') {
      try { targetCriteria = JSON.parse(targetCriteria); } catch (e) {}
    }
    const adminEmail = data.adminEmail || data.parameter?.adminEmail;
    
    // カスタムメッセージの直接送信を優先
    let message;
    var template = null;
    
  // カスタムメッセージの判定（preferCustomフラグまたはtemplateKeyが空の場合）
  const isCustomMessage = !!(data.preferCustom || !templateKey || (templateData && templateData.title && templateData.message));
  
  if (isCustomMessage) {
    // 入力ソースを templateData 優先、なければトップレベル（後方互換）
    const src = (templateData && (templateData.title || templateData.message)) ? templateData : {
      title: data.title,
      message: data.body || data.message,
      url: data.url,
      category: data.category,
      priority: data.priority,
      icon: data.icon,
      image: data.image,
      badge: data.badge,
      requireInteraction: data.requireInteraction,
      actions: data.actions,
      sound: data.sound,
      vibrate: data.vibrate,
      renotify: data.renotify,
      silent: data.silent,
      ttl: data.ttl,
      color: data.color,
      channelId: data.channelId
    };
    
    // カスタムメッセージを直接使用（テンプレート不要）
    message = {
      title: src.title,
      body: src.message,
      icon: src.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
      image: src.image || '',
      badge: src.badge || '/images/badge-72x72.png',
      action_url: src.url || '/news.html',
      category: src.category || 'general',
      priority: parseInt(src.priority || 1),
      actions: src.actions || [
        { action: 'view', title: '詳細を見る' },
        { action: 'dismiss', title: '閉じる' }
      ],
      sound: src.sound || 'default',
      vibrate: src.vibrate || [200, 100, 200],
      requireInteraction: !!src.requireInteraction,
      renotify: !!src.renotify,
      silent: !!src.silent,
      timestamp: Date.now(),
      ttl: src.ttl || 86400,
      color: src.color || '#4285F4',
      channelId: src.channelId || 'default',
      data: {
        url: src.url || '/news.html',
        category: src.category || 'general',
        timestamp: Date.now(),
        originalData: src
      }
    };
  } else {
      // テンプレートベースの処理（後方互換性）
      template = getNotificationTemplate(templateKey);
      if (!template) {
        // フォールバック: テンプレート未登録でも送信可能にする
        template = {
          id: null,
          title_template: '{{title}}',
          body_template: '{{message}}',
          icon_url: '',
          image_url: '',
          badge_url: '/images/badge-72x72.png',
          action_url: '/news.html',
          category: 'general',
          priority: 1,
          url_params: [],
          append_params: false,
          actions: []
        };
      }
      
      // テンプレートを使用してメッセージを生成
      message = generateMessage(template, templateData, {
        customTitle: templateData?.title,
        customBody: templateData?.message
      });
    }
    
    // 対象デバイスを取得
    const devices = getTargetDevices(targetType, targetCriteria);
    if (devices.length === 0) {
      return { success: false, error: 'No target devices found' };
    }
    
    // 通知履歴を作成
    const historyId = createNotificationHistory(template, message, targetType, targetCriteria, devices.length, adminEmail);
    
    // FCMで通知送信
    const result = sendFCMNotifications(devices, message, historyId);
    
    // 送信結果を更新
    updateNotificationHistory(historyId, result);
    
    return {
      success: true,
      data: {
        historyId: historyId,
        totalRecipients: devices.length,
        successfulSends: result.successCount,
        failedSends: result.failureCount
      }
    };
    
  } catch (error) {
    console.error('Error sending notification:', error);
    return { success: false, error: error.toString() };
  }
}

// 一括通知送信（拡張版）
function sendBulkNotification(data) {
  try {
    const { notifications, options = {} } = data;
    const results = [];
    const config = getConfig();
    const batchSize = options.batchSize || config.MAX_BATCH_SIZE;
    const delayMs = options.delayMs || 100;
    let successCount = 0;
    let failureCount = 0;
    
    // バッチ処理の最適化
    for (let i = 0; i < notifications.length; i += batchSize) {
      const batch = notifications.slice(i, i + batchSize);
      const batchResults = [];
      // Apps Script は await/async 非対応のため同期実行で処理
      for (var j = 0; j < batch.length; j++) {
        var notification = batch[j];
        var result = sendNotification(notification);
        if (result && result.success) {
          successCount++;
        } else {
          failureCount++;
        }
        batchResults.push(result);
      }
      results.push.apply(results, batchResults);
      
      // レート制限対応（バッチ間の遅延）
      if (i + batchSize < notifications.length) {
        Utilities.sleep(delayMs * batch.length);
      }
    }
    
    return { 
      success: true, 
      data: results,
      summary: {
        total: notifications.length,
        success: successCount,
        failure: failureCount,
        batches: Math.ceil(notifications.length / batchSize)
      }
    };
    
  } catch (error) {
    console.error('Error sending bulk notifications:', error);
    return { success: false, error: error.toString() };
  }
}

// 通知履歴取得
function getNotificationHistory(data) {
  const { limit = 50, offset = 0 } = data;
  
  const response = supabaseRequest('GET', 
    `notification_history?order=sent_at.desc&limit=${limit}&offset=${offset}`
  );
  
  return { success: !response.error, data: response.data };
}

// 通知統計取得
function getNotificationStatistics(data) {
  const { days = 30 } = data;
  const fromDate = new Date(Date.now() - days * 24 * 60 * 60 * 1000).toISOString();
  
  const response = supabaseRequest('GET', 
    `notification_statistics?sent_at=gte.${fromDate}&order=sent_at.desc`
  );
  
  return { success: !response.error, data: response.data };
}

// ========================================
// 通知システムヘルパー関数
// ========================================

// FCM通知送信
function sendFCMNotifications(devices, message, historyId) {
  const config = getConfig();
  let successCount = 0;
  let failureCount = 0;
  const deliveries = [];
  const retryAttempts = config.RETRY_ATTEMPTS || 3;
  const retryDelay = config.RETRY_DELAY || 1000;
  
  // バッチ処理
  for (let i = 0; i < devices.length; i += config.MAX_BATCH_SIZE) {
    const batch = devices.slice(i, i + config.MAX_BATCH_SIZE);
    
    for (const device of batch) {
      try {
        const fcmMessage = {
          to: device.fcm_token,
          notification: {
            title: message.title,
            body: message.body,
            icon: message.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
            badge: message.badge || '/images/badge-72x72.png',
            click_action: message.action_url || '/',
            tag: message.category || 'general'
          },
          data: {
            url: message.action_url || '/',
            category: message.category || 'general',
            historyId: historyId,
            timestamp: new Date().toISOString()
          },
          priority: message.priority >= 2 ? 'high' : 'normal',
          time_to_live: 86400 // 24時間
        };
        
        // リトライロジックを実装
        let response = null;
        let attempt = 0;
        let success = false;
        
        while (attempt < retryAttempts && !success) {
          response = sendFCMMessage(fcmMessage);
          success = response.success;
          
          if (!success && attempt < retryAttempts - 1) {
            console.log(`Retry attempt ${attempt + 1} for token: ${device.fcm_token}`);
            Utilities.sleep(retryDelay * (attempt + 1)); // 指数バックオフ
          }
          
          attempt++;
        }
        
        if (success) {
          successCount++;
          deliveries.push({
            history_id: historyId,
            device_id: device.id,
            fcm_message_id: response.message_id,
            status: 'sent',
            sent_at: new Date().toISOString(),
            retry_count: attempt - 1
          });
        } else {
          failureCount++;
          deliveries.push({
            history_id: historyId,
            device_id: device.id,
            status: 'failed',
            error_code: response.error_code,
            error_message: response.error_message,
            sent_at: new Date().toISOString(),
            retry_count: attempt - 1
          });
          
          // 無効なトークンの場合はデバイスを無効化
          if (response.error_code === 'INVALID_ARGUMENT' || 
              response.error_code === 'UNREGISTERED' ||
              response.error_code === 'NOT_FOUND') {
            deactivateDevice(device.fcm_token);
          }
        }
        
      } catch (error) {
        console.error('Error sending to device:', device.fcm_token, error);
        failureCount++;
        deliveries.push({
          history_id: historyId,
          device_id: device.id,
          status: 'error',
          error_message: error.toString(),
          sent_at: new Date().toISOString()
        });
      }
    }
    
    // レート制限対応
    if (i + config.MAX_BATCH_SIZE < devices.length) {
      Utilities.sleep(60000 / config.REQUESTS_PER_MINUTE * batch.length);
    }
  }
  
  // 配信状況をバッチで保存
  if (deliveries.length > 0) {
    supabaseRequest('POST', 'notification_deliveries', deliveries);
  }
  
  return { successCount, failureCount };
}

// FCMメッセージ送信（HTTP v1 API対応・拡張版）
function sendFCMMessage(message) {
  try {
    const config = getConfig();
    
    // HTTP v1 API用のエンドポイントURLを構築
    const endpoint = `https://fcm.googleapis.com/v1/projects/${config.FIREBASE_PROJECT_ID}/messages:send`;
    
    // ブラウザ標準描画を有効化（互換性確保）：notification も送信
    const notification = {
      title: message.title,
      body: message.body,
      image: message.image || message.icon,
      icon: message.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
      badge: message.badge || '/images/badge-72x72.png',
      click_action: message.action_url || '/',
      tag: message.category || 'general'
    };
    
    // カスタムデータをFCMに渡すための設定
    const customData = {
      title: message.title,
      body: message.body,
      message: message.body,
      icon: message.icon,
      badge: message.badge,
      url: message.action_url,
      category: message.category,
      tag: message.category,
      requireInteraction: message.requireInteraction,
      actions: JSON.stringify(message.actions || []),
      vibrate: JSON.stringify(message.vibrate || [200, 100, 200]),
      silent: message.silent,
      renotify: message.renotify,
      timestamp: message.timestamp,
      originalData: JSON.stringify(message.data || {})
    };
    
    // プラットフォーム別の設定を準備
    const webpushConfig = {
      headers: {
        TTL: String(message.time_to_live || 86400),
        Urgency: message.priority === 'high' ? 'high' : 'normal'
      },
      // iOS Web Push/Safari等がそのまま表示できるよう notification を明示
      notification: {
        title: message.title,
        body: message.body,
        icon: message.icon || 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
        badge: message.badge || '/images/badge-72x72.png',
        actions: message.actions || [
          { action: 'view', title: '詳細を見る' },
          { action: 'dismiss', title: '閉じる' }
        ],
        tag: (message.data && message.data.category) || message.category || 'general',
      },
      fcm_options: {
        link: (message.action_url || (message.data && message.data.url)) || '/'
      }
    };
    
    // iOSデバイス向け設定（APNs対応強化版）
    const apnsConfig = {
      headers: {
        'apns-priority': message.priority === 'high' ? '10' : '5',
        'apns-expiration': String(Math.floor(Date.now() / 1000) + (message.time_to_live || 86400)),
        'apns-push-type': 'alert',
        'apns-topic': message.apns_topic || 'jp.school.nazuna-portal'
      },
      payload: {
        aps: {
          alert: {
            title: message.title,
            body: message.body,
            subtitle: message.subtitle || '',
            'title-loc-key': message.notification.title_loc_key,
            'title-loc-args': message.notification.title_loc_args,
            'loc-key': message.notification.loc_key,
            'loc-args': message.notification.loc_args,
            'action-loc-key': message.notification.action_loc_key,
            'launch-image': message.notification.launch_image
          },
          sound: message.sound || 'default',
          badge: message.badge_count || 1,
          'mutable-content': 1,
          'content-available': 1,
          category: message.data.category || 'GENERAL',
          'thread-id': message.thread_id || message.data.category || 'general',
          'target-content-id': message.target_content_id || '',
          'interruption-level': message.priority === 'high' ? 'time-sensitive' : 'active',
          'relevance-score': message.relevance_score || 1.0
        },
        fcm_options: {
          image: message.image || message.icon
        },
        // カスタムデータをAPNsペイロードに追加
        data: message.data || {},
        url: message.data?.url || '/',
        category: message.data?.category || 'general',
        notification_id: message.data?.notification_id || '',
        timestamp: Date.now().toString()
      }
    };
    
    // Androidデバイス向け設定
    const androidConfig = {
      priority: message.priority === 'high' ? 'HIGH' : 'NORMAL',
      ttl: `${message.time_to_live || 86400}s`,
      notification: {
        icon: message.icon || 'ic_notification',
        color: message.color || '#4285F4',
        sound: message.sound || 'default',
        clickAction: message.data?.url || '/',
        tag: message.data?.category || 'general',
        channelId: message.channelId || 'default'
      }
    };
    
    // HTTP v1 API用のメッセージ形式に変換（カスタムデータ対応）
    const v1Message = {
      message: {
        token: message.to,
        // カスタムタイトル・内容を確実に送信するためnotificationフィールドを必須に
        notification: {
          title: message.title,
          body: message.body,
          image: message.image || message.icon
        },
        // カスタムデータも併用して送信
        data: customData,
        webpush: webpushConfig,
        apns: apnsConfig,
        android: androidConfig,
        fcm_options: {
          analytics_label: message.category || 'notification'
        }
      }
    };
    
    // バリデーションモードの場合
    if (message.validate_only) {
      v1Message.validate_only = true;
    }
    
    // Access Tokenを取得
    const accessToken = getFirebaseAccessToken();
    if (!accessToken) {
      return {
        success: false,
        error_code: 'AuthenticationError',
        error_message: 'Failed to get Firebase access token'
      };
    }
    
    // FCM APIにリクエスト送信
    const response = UrlFetchApp.fetch(endpoint, {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ' + accessToken,
        'Content-Type': 'application/json'
      },
      payload: JSON.stringify(v1Message),
      muteHttpExceptions: true // エラーレスポンスも取得するため
    });
    
    const responseCode = response.getResponseCode();
    let responseData;
    
    try {
      responseData = JSON.parse(response.getContentText());
    } catch (e) {
      responseData = { error: { message: 'Failed to parse response' } };
    }
    
    // レスポンス処理
    if (responseCode === 200 && responseData.name) {
      return {
        success: true,
        message_id: responseData.name.split('/').pop(), // メッセージIDを抽出
        response_code: responseCode,
        response_data: responseData
      };
    } else {
      console.error('FCM API error:', responseCode, responseData);
      return {
        success: false,
        error_code: responseData.error?.status || responseData.error?.code || `HTTP_${responseCode}`,
        error_message: responseData.error?.message || 'Unknown error',
        response_code: responseCode,
        response_data: responseData
      };
    }
    
  } catch (error) {
    console.error('FCM send error:', error);
    return {
      success: false,
      error_code: 'NetworkError',
      error_message: error.toString()
    };
  }
}

// 通知テンプレート取得（拡張版）
function getNotificationTemplate(templateKey, options = {}) {
  let query = `notification_templates?`;
  
  // テンプレートキーによる検索
  if (templateKey) {
    query += `template_key=eq.${templateKey}&`;
  }
  
  // カテゴリによる検索
  if (options.category) {
    query += `category=eq.${options.category}&`;
  }
  
  // アクティブなテンプレートのみ取得
  if (options.active_only !== false) {
    query += `is_active=eq.true&`;
  }
  
  // 並び順の指定
  if (options.order_by) {
    query += `order=${options.order_by}.${options.ascending !== false ? 'asc' : 'desc'}&`;
  } else {
    query += `order=priority.desc&`;
  }
  
  // 取得件数の制限
  query += `limit=${options.limit || 1}`;
  
  const response = supabaseRequest('GET', query);
  
  // 単一レコード取得か複数レコード取得かの判断
  if (templateKey && !options.return_all) {
    return response.data && response.data.length > 0 ? response.data[0] : null;
  } else {
    return response.data || [];
  }
}

// 通知テンプレート一覧取得（JSONP想定の軽量版）
function getNotificationTemplates(params) {
  try {
    var query = 'notification_templates?is_active=eq.true&order=priority.desc';
    if (params && params.category) {
      query += '&category=eq.' + params.category;
    }
    var response = supabaseRequest('GET', query);
    if (response.error) {
      return { success: false, error: response.error.message || 'Failed to fetch templates' };
    }
    // 必要最小限のフィールドのみ返す
    var data = (response.data || []).map(function(t){
      return {
        template_key: t.template_key,
        title_template: t.title_template,
        body_template: t.body_template,
        category: t.category,
        priority: t.priority
      };
    });
    return { success: true, data: data };
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

// ニュース新規作成
function createNews(data) {
  try {
    var payload = {
      title: data.title,
      category: data.category || data.type || 'general',
      content: data.content,
      is_published: data.is_published !== false,
      date: new Date().toISOString(),
      priority: data.priority || 0
    };
    var resp = supabaseRequest('POST', 'news', [payload]);
    if (resp.error) {
      return { success: false, error: resp.error.message || 'Failed to create news' };
    }
    return { success: true, data: resp.data && resp.data[0] };
  } catch (e) {
    return { success: false, error: e.toString() };
  }
}

// メッセージ生成（拡張版）
function generateMessage(template, data, options = {}) {
  // カスタム入力値があればそれを優先使用
  let title = options.customTitle || template.title_template;
  let body = options.customBody || template.body_template;
  
  // テンプレート変数を置換
  for (const [key, value] of Object.entries(data || {})) {
    const regex = new RegExp(`{{${key}}}`, 'g');
    title = title.replace(regex, value);
    body = body.replace(regex, value);
  }
  
  // 日時変数を置換
  const now = new Date();
  const dateVars = {
    'YYYY': now.getFullYear(),
    'MM': (now.getMonth() + 1).toString().padStart(2, '0'),
    'DD': now.getDate().toString().padStart(2, '0'),
    'HH': now.getHours().toString().padStart(2, '0'),
    'mm': now.getMinutes().toString().padStart(2, '0'),
    'ss': now.getSeconds().toString().padStart(2, '0'),
    'WEEKDAY': ['日', '月', '火', '水', '木', '金', '土'][now.getDay()]
  };
  
  for (const [key, value] of Object.entries(dateVars)) {
    const regex = new RegExp(`{{${key}}}`, 'g');
    title = title.replace(regex, value);
    body = body.replace(regex, value);
  }
  
  // アクションURLの処理（クエリパラメータ付加など）
  let actionUrl = template.action_url || '/';
  if (data.url) {
    actionUrl = data.url;
  }
  
  // URLにパラメータを追加
  if (template.append_params && data) {
    const url = new URL(actionUrl, 'https://example.com'); // 相対URLを絶対URLに変換するためのベースURL
    
    // テンプレートで指定されたパラメータを追加
    if (template.url_params) {
      for (const param of template.url_params) {
        if (data[param.key]) {
          url.searchParams.set(param.key, data[param.key]);
        }
      }
    }
    
    // 通知IDを追加
    url.searchParams.set('notification_id', data.notification_id || Utilities.getUuid());
    
    // 相対URLの場合は、ホスト部分を除去
    actionUrl = url.pathname + url.search + url.hash;
    if (!template.action_url.startsWith('http')) {
      actionUrl = actionUrl.replace(/^https?:\/\/example\.com/, '');
    }
  }
  
  // 通知アクションの設定
  let actions = template.actions || [];
  if (data.actions) {
    try {
      if (typeof data.actions === 'string') {
        actions = JSON.parse(data.actions);
      } else {
        actions = data.actions;
      }
    } catch (e) {
      console.error('Failed to parse actions:', e);
    }
  }
  
  // 通知オプションの設定
  const messageOptions = {
    title: title,
    body: body,
    icon: data.icon || template.icon_url,
    image: data.image || template.image_url,
    badge: data.badge || template.badge_url || '/images/badge-72x72.png',
    action_url: actionUrl,
    category: data.category || template.category || 'general',
    priority: parseInt(data.priority || template.priority || 1),
    actions: actions,
    sound: data.sound || template.sound || 'default',
    vibrate: data.vibrate || template.vibrate || [200, 100, 200],
    requireInteraction: data.requireInteraction || template.require_interaction || false,
    renotify: data.renotify || template.renotify || false,
    silent: data.silent || template.silent || false,
    timestamp: Date.now(),
    ttl: data.ttl || template.ttl || 86400, // 24時間
    color: data.color || template.color || '#4285F4',
    channelId: data.channelId || template.channel_id || 'default'
  };
  
  return messageOptions;
}

// 対象デバイス取得
function getTargetDevices(targetType, criteria) {
  let query = 'device_registrations?is_active=eq.true';
  
  if (criteria.platform) {
    query += `&platform=eq.${criteria.platform}`;
  }
  
  // 最終使用日フィルタ（30日以内のアクティブデバイス）
  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString();
  query += `&last_used_at=gte.${thirtyDaysAgo}`;
  
  const response = supabaseRequest('GET', query);
  const list = response.data || [];
  // fcm_token で重複排除（同一端末の多重登録対策）
  const seen = {};
  const deduped = [];
  for (var i = 0; i < list.length; i++) {
    var dev = list[i];
    var token = dev && dev.fcm_token;
    if (!token) continue;
    if (!seen[token]) {
      seen[token] = true;
      deduped.push(dev);
    }
  }
  return deduped;
}

// 通知履歴作成
function createNotificationHistory(template, message, targetType, criteria, totalRecipients, adminEmail) {
  const historyData = {
    template_id: (template && typeof template === 'object') ? (template.id || null) : null,
    title: message.title,
    body: message.body,
    icon_url: message.icon,
    action_url: message.action_url,
    category: message.category,
    priority: message.priority,
    target_type: targetType,
    target_criteria: criteria,
    total_recipients: totalRecipients,
    gas_execution_id: Utilities.getUuid(),
    admin_email: adminEmail,
    status: 'sending'
  };
  
  const response = supabaseRequest('POST', 'notification_history', historyData);
  // 安全にIDを取得（失敗時はUUIDを返す）
  try {
    if (response && response.data && response.data[0] && response.data[0].id) {
      return response.data[0].id;
    }
  } catch (e) {}
  return Utilities.getUuid();
}

// 通知履歴更新
function updateNotificationHistory(historyId, result) {
  const updateData = {
    successful_sends: result.successCount,
    failed_sends: result.failureCount,
    status: 'completed',
    completed_at: new Date().toISOString()
  };
  
  supabaseRequest('PATCH', `notification_history?id=eq.${historyId}`, updateData);
}

// デバイス無効化
function deactivateDevice(fcmToken) {
  supabaseRequest('PATCH', 
    `device_registrations?fcm_token=eq.${fcmToken}`, 
    { is_active: false }
  );
}

// ========================================
// データ管理関数
// ========================================

// ニュース更新
function updateNews(data) {
  try {
    const { id, title, content, summary, type, priority, is_published } = data;
    
    const updateData = {
      title: title,
      content: content,
      summary: summary,
      type: type,
      priority: priority || 0,
      is_published: is_published !== undefined ? is_published : true
    };
    
    const response = supabaseRequest('PATCH', `news?id=eq.${id}`, updateData);
    return { success: !response.error, data: response.data };
    
  } catch (error) {
    console.error('Error updating news:', error);
    return { success: false, error: error.toString() };
  }
}

// アンケート更新
function updateSurvey(data) {
  try {
    const { id, title, description, questions, is_active, is_published, expires_at } = data;
    
    const updateData = {
      title: title,
      description: description,
      questions: questions,
      is_active: is_active,
      is_published: is_published,
      expires_at: expires_at
    };
    
    const response = supabaseRequest('PATCH', `surveys?id=eq.${id}`, updateData);
    return { success: !response.error, data: response.data };
    
  } catch (error) {
    console.error('Error updating survey:', error);
    return { success: false, error: error.toString() };
  }
}

// 部活動更新
function updateClub(data) {
  try {
    const { id, name, description, members, schedule, category, is_active } = data;
    
    const updateData = {
      name: name,
      description: description,
      members: members,
      schedule: schedule,
      category: category,
      is_active: is_active !== undefined ? is_active : true
    };
    
    const response = supabaseRequest('PATCH', `clubs?id=eq.${id}`, updateData);
    return { success: !response.error, data: response.data };
    
  } catch (error) {
    console.error('Error updating club:', error);
    return { success: false, error: error.toString() };
  }
}

// 投稿への返信
function replyToPost(data) {
  try {
    const { postId, reply } = data;
    
    const updateData = {
      reply: reply,
      status: 'replied',
      replied_at: new Date().toISOString()
    };
    
    const response = supabaseRequest('PATCH', `posts?id=eq.${postId}`, updateData);
    return { success: !response.error, data: response.data };
    
  } catch (error) {
    console.error('Error replying to post:', error);
    return { success: false, error: error.toString() };
  }
}

// ========================================
// Firebase認証関数
// ========================================

// Firebase Access Tokenを取得（サービスアカウントキーを使用）
function getFirebaseAccessToken() {
  try {
    const config = getConfig();
    
    // キャッシュからトークンを取得（有効期限内であれば再利用）
    const cache = CacheService.getScriptCache();
    const cachedToken = cache.get('FIREBASE_ACCESS_TOKEN');
    
    if (cachedToken) {
      return cachedToken;
    }
    
    // サービスアカウントキー情報を取得
    const serviceAccountKey = JSON.parse(
      PropertiesService.getScriptProperties().getProperty('FIREBASE_SERVICE_ACCOUNT_KEY')
    );
    
    if (!serviceAccountKey) {
      throw new Error('Firebase service account key not configured. Please set FIREBASE_SERVICE_ACCOUNT_KEY in PropertiesService.');
    }
    
    // JWT（JSON Web Token）を作成
    const now = Math.floor(Date.now() / 1000);
    const expTime = now + 3600; // 1時間の有効期限
    
    const header = {
      alg: 'RS256',
      typ: 'JWT',
      kid: serviceAccountKey.private_key_id
    };
    
    const payload = {
      iss: serviceAccountKey.client_email,
      sub: serviceAccountKey.client_email,
      aud: 'https://oauth2.googleapis.com/token',
      iat: now,
      exp: expTime,
      scope: 'https://www.googleapis.com/auth/firebase.messaging'
    };
    
    // JWTの署名部分を作成
    const headerBase64 = Utilities.base64EncodeWebSafe(JSON.stringify(header)).replace(/=+$/, '');
    const payloadBase64 = Utilities.base64EncodeWebSafe(JSON.stringify(payload)).replace(/=+$/, '');
    const toSign = headerBase64 + '.' + payloadBase64;
    
    // 秘密鍵で署名
    const signature = Utilities.computeRsaSha256Signature(
      toSign,
      serviceAccountKey.private_key
    );
    const signatureBase64 = Utilities.base64EncodeWebSafe(signature).replace(/=+$/, '');
    
    // 完全なJWTを作成
    const jwt = headerBase64 + '.' + payloadBase64 + '.' + signatureBase64;
    
    // Google OAuth2 APIを使用してアクセストークンを取得
    const response = UrlFetchApp.fetch('https://oauth2.googleapis.com/token', {
      method: 'POST',
      contentType: 'application/x-www-form-urlencoded',
      payload: {
        grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',
        assertion: jwt
      }
    });
    
    const responseData = JSON.parse(response.getContentText());
    const accessToken = responseData.access_token;
    
    if (!accessToken) {
      throw new Error('Failed to obtain access token: ' + JSON.stringify(responseData));
    }
    
    // トークンをキャッシュに保存（50分間有効）
    cache.put('FIREBASE_ACCESS_TOKEN', accessToken, 3000); // 50分 = 3000秒
    
    return accessToken;
    
  } catch (error) {
    console.error('Error getting Firebase access token:', error);
    return null;
  }
}

// ========================================
// ユーティリティ関数
// ========================================

// Supabaseリクエスト
function supabaseRequest(method, endpoint, data = null) {
  try {
    const config = getConfig();
    
    // ヘッダーは未定義値を含めないように組み立てる
    const headers = {
      'Authorization': 'Bearer ' + config.SUPABASE_SERVICE_KEY,
      'apikey': config.SUPABASE_SERVICE_KEY
    };
    // GETでは Content-Type ヘッダーを付けない（一部環境で Header:null 扱いになるのを回避）
    if (method !== 'GET') {
      headers['Content-Type'] = 'application/json';
    }
    if (method === 'POST' || method === 'PATCH') {
      headers['Prefer'] = 'return=representation';
    }
    const options = { method: method, headers: headers, muteHttpExceptions: true };
    
    if (data && (method === 'POST' || method === 'PATCH')) {
      options.payload = JSON.stringify(data);
    }
    
    const response = UrlFetchApp.fetch(
      `${config.SUPABASE_URL}/rest/v1/${endpoint}`,
      options
    );
    
    const responseData = response.getContentText();
    const parsed = responseData ? JSON.parse(responseData) : {};
    
    if (response.getResponseCode() >= 400) {
      return { error: parsed };
    }
    
    return { data: Array.isArray(parsed) ? parsed : [parsed] };
    
  } catch (error) {
    console.error('Supabase request error:', error);
    return { error: { message: error.toString() } };
  }
}

// レスポンス作成
function createResponse(data, headers = {}) {
  return ContentService
    .createTextOutput(JSON.stringify(data))
    .setMimeType(ContentService.MimeType.JSON)
    .setHeaders(headers);
}

// ========================================
// 定期実行・メンテナンス関数
// ========================================

// 古いデバイス登録のクリーンアップ
function cleanupOldDevices() {
  const sixMonthsAgo = new Date(Date.now() - 180 * 24 * 60 * 60 * 1000).toISOString();
  
  supabaseRequest('PATCH', 
    `device_registrations?last_used_at=lt.${sixMonthsAgo}`, 
    { is_active: false }
  );
  
  console.log('Old devices cleanup completed');
}

// 通知統計レポート生成
function generateNotificationReport() {
  const response = supabaseRequest('GET', 'notification_statistics?limit=100');
  
  if (response.data) {
    console.log('Notification report generated:', response.data.length, 'records');
  }
}

// 設定初期化（初回実行用）
function initializeGASProperties() {
  const properties = PropertiesService.getScriptProperties();
  
  // 基本設定
  const defaultProperties = {
    'DEBUG_MODE': 'false',
    'SUPABASE_URL': 'YOUR_SUPABASE_URL_HERE',
    'SUPABASE_SERVICE_KEY': 'YOUR_SUPABASE_SERVICE_KEY_HERE',
    'FIREBASE_PROJECT_ID': 'your-project-id',
    'FIREBASE_ACCESS_TOKEN': 'your-firebase-access-token',
    'SPREADSHEET_ID': 'YOUR_SPREADSHEET_ID_HERE'
  };
  
  properties.setProperties(defaultProperties);
  
  // 管理者アカウント設定
  setupAdminAccounts();
  
  console.log('GAS properties initialized');
  return { success: true, message: 'Properties initialized' };
}


[index.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>なずなポータルサイト - ホーム</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- PWA対応メタタグ -->
    <meta name="theme-color" content="#4a7c59">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="なずなポータル">
    <meta name="msapplication-TileColor" content="#4a7c59">
    <meta name="msapplication-config" content="browserconfig.xml">
    <meta name="application-name" content="なずなポータル">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- iOS 16.4+ PWA プッシュ通知対応 -->
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
    <meta name="apple-touch-fullscreen" content="yes">
    <meta name="apple-mobile-web-app-orientations" content="portrait">
    <meta name="web-app-origin-association" content="https://nazuna-portal.web.app">
    
    <!-- iOS対応 -->
    <link rel="apple-touch-icon" href="./images/icon.png">
    <link rel="apple-touch-icon" sizes="152x152" href="./images/icon.png">
    <link rel="apple-touch-icon" sizes="180x180" href="./images/icon.png">
    <link rel="apple-touch-icon" sizes="167x167" href="./images/icon.png">
    
    <!-- Windows対応 -->
    <meta name="msapplication-TileImage" content="./images/icon.png">  
    <meta name="msapplication-square70x70logo" content="./images/icon.png">
    <meta name="msapplication-square150x150logo" content="./images/icon.png">
    <meta name="msapplication-wide310x150logo" content="./images/icon.png">
    <meta name="msapplication-square310x310logo" content="./images/icon.png">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-messaging-compat.js"></script>
    <!-- Firebase初期化は js/firebase-config.js にて一元管理 -->
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html" class="active">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ヒーローセクション -->
        <section class="hero">
            <div class="hero-content">
                <div class="hero-text">
                    <h1>みんなでつくる学校生活</h1>
                    <p class="hero-subtitle">なずなポータルへようこそ</p>
                    <p class="hero-description">
                        私たちは生徒一人ひとりの声を大切にし、<br>
                        より良い学校生活の実現を目指しています。
                    </p>
                    <div class="hero-buttons">
                        <a href="forum.html" class="btn btn-primary">
                            <i class="fas fa-comments"></i>
                            意見を投稿する
                        </a>
                        <a href="council.html" class="btn btn-secondary">
                            <i class="fas fa-users"></i>
                            生徒会について
                        </a>
                    </div>
                </div>
                <div class="hero-image">
                    <div class="hero-graphic">
                        <i class="fas fa-graduation-cap"></i>
                    </div>
                </div>
            </div>
        </section>

        <!-- 機能紹介セクション -->
        <section class="features">
            <div class="container">
                <h2 class="section-title">主な機能</h2>
                <div class="features-grid">
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>生徒会紹介</h3>
                        <p>生徒会メンバーの紹介と活動内容をご覧いただけます。</p>
                        <a href="council.html" class="feature-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-running"></i>
                        </div>
                        <h3>部活動紹介</h3>
                        <p>各部活動の詳細情報や活動スケジュールを確認できます。</p>
                        <a href="clubs.html" class="feature-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-comments"></i>
                        </div>
                        <h3>なずなフォーラム</h3>
                        <p>匿名で意見や要望を投稿し、生徒会と対話できます。</p>
                        <a href="forum.html" class="feature-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-bell"></i>
                        </div>
                        <h3>お知らせ</h3>
                        <p>学校行事や生徒会からの重要なお知らせをチェックできます。</p>
                        <a href="news.html" class="feature-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-poll"></i>
                        </div>
                        <h3>アンケート・投票</h3>
                        <p>学校生活に関するアンケートや投票に参加できます。</p>
                        <a href="survey.html" class="feature-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                    
                    <div class="feature-card">
                        <div class="feature-icon">
                            <i class="fas fa-mobile-alt"></i>
                        </div>
                        <h3>PWA対応</h3>
                        <p>スマートフォンにアプリとしてインストールして利用できます。</p>
                        <a href="#" class="feature-link" id="install-pwa">インストール <i class="fas fa-download"></i></a>
                    </div>
                </div>
            </div>
        </section>

        <!-- 最新情報セクション -->
        <section class="latest-updates">
            <div class="container">
                <h2 class="section-title">最新情報</h2>
                <div class="updates-grid">
                    <div class="update-card news-update">
                        <div class="update-header">
                            <i class="fas fa-bell"></i>
                            <span>最新のお知らせ</span>
                        </div>
                        <div class="update-content" id="latest-news">
                            <div class="loading">読み込み中...</div>
                        </div>
                        <a href="news.html" class="update-link">すべて見る</a>
                    </div>
                    
                    <div class="update-card forum-update">
                        <div class="update-header">
                            <i class="fas fa-comments"></i>
                            <span>最新の投稿</span>
                        </div>
                        <div class="update-content" id="latest-posts">
                            <div class="loading">読み込み中...</div>
                        </div>
                        <a href="forum.html" class="update-link">フォーラムを見る</a>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
                <p>平日 12:30-13:00</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <!-- Features -->
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
    <!-- Notifications -->
    <script src="js/firebase-config.js"></script>
    <script src="js/notification-manager.js"></script>
</body>
</html>

[manifest.json]
{
  "name": "なずなポータル",
  "short_name": "なずなポータル",
  "description": "学校生活をより良くするためのポータルサイト",
  "start_url": "./",
  "display": "standalone",
  "background_color": "#ffffff",
  "theme_color": "#4a7c59",
  "orientation": "portrait-primary",
  "scope": "./",
  "id": "nazuna-portal-pwa",
  "launch_handler": {
    "client_mode": ["focus-existing", "auto"]
  },
  "handle_links": "preferred",
  "icons": [
    {
      "src": "./images/icon.png",
      "sizes": "72x72",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "96x96",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "128x128",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "144x144",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "152x152",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon-384x384.png",
      "sizes": "384x384",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "any"
    },
    {
      "src": "./images/icon.png",
      "sizes": "192x192",
      "type": "image/png",
      "purpose": "maskable"
    },
    {
      "src": "./images/icon.png",
      "sizes": "512x512",
      "type": "image/png",
      "purpose": "maskable"
    }
  ],
  "categories": ["education", "social", "productivity"],
  "lang": "ja",
  "dir": "ltr",
  "prefer_related_applications": false,
  "related_applications": [],
  "screenshots": [
    {
      "src": "./images/screenshot-mobile.png",
      "sizes": "390x844",
      "type": "image/png",
      "form_factor": "narrow"
    },
    {
      "src": "./images/screenshot-desktop.png",
      "sizes": "1280x720",
      "type": "image/png",
      "form_factor": "wide"
    }
  ],
  "shortcuts": [
    {
      "name": "ホーム",
      "short_name": "ホーム",
      "description": "メインページに移動",
      "url": "./",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "お知らせ",
      "short_name": "お知らせ",
      "description": "最新のお知らせを確認",
      "url": "./news.html",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon.png",
          "sizes": "96x96"
        }
      ]
    },
    {
      "name": "フォーラム",
      "short_name": "フォーラム",
      "description": "なずなフォーラムに参加",
      "url": "./forum.html",
      "icons": [
        {
          "src": "https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon.png",
          "sizes": "96x96"
        }
      ]
    }
  ],
  "share_target": {
    "action": "./forum.html",
    "method": "POST",
    "enctype": "multipart/form-data",
    "params": {
      "title": "title",
      "text": "text",
      "url": "url"
    }
  }
}

[member-detail.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>メンバー詳細 - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <meta name="theme-color" content="#2c3e50">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html" class="active">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- 戻るボタン -->
        <section class="breadcrumb-section">
            <div class="container">
                <div class="breadcrumb">
                    <a href="council.html" class="breadcrumb-link">
                        <i class="fas fa-arrow-left"></i>
                        生徒会紹介に戻る
                    </a>
                </div>
            </div>
        </section>

        <!-- メンバー詳細ヘッダー -->
        <section class="member-detail-header">
            <div class="container">
                <div class="member-hero" id="member-hero">
                    <!-- メンバー情報がJavaScriptで動的に生成されます -->
                </div>
            </div>
        </section>

        <!-- メンバー詳細情報 -->
        <section class="member-detail-content">
            <div class="container">
                <div class="detail-grid">
                    <div class="detail-main">
                        <div class="detail-section">
                            <h3><i class="fas fa-user"></i> プロフィール</h3>
                            <div class="profile-content" id="profile-content">
                                <!-- プロフィール情報がここに表示されます -->
                            </div>
                        </div>

                        <div class="detail-section">
                            <h3><i class="fas fa-heart"></i> メッセージ</h3>
                            <div class="message-content" id="message-content">
                                <!-- メッセージがここに表示されます -->
                            </div>
                        </div>

                        <div class="detail-section">
                            <h3><i class="fas fa-tasks"></i> 担当業務</h3>
                            <div class="responsibilities-content" id="responsibilities-content">
                                <!-- 担当業務がここに表示されます -->
                            </div>
                        </div>

                        <div class="detail-section">
                            <h3><i class="fas fa-trophy"></i> 活動実績</h3>
                            <div class="achievements-content" id="achievements-content">
                                <!-- 活動実績がここに表示されます -->
                            </div>
                        </div>
                    </div>

                    <div class="detail-sidebar">
                        <div class="sidebar-card">
                            <h4><i class="fas fa-envelope"></i> お問い合わせ</h4>
                            <p>このメンバーへの質問や相談がありましたら、なずなフォーラムをご利用ください。</p>
                            <a href="forum.html" class="btn btn-primary">
                                <i class="fas fa-comments"></i>
                                フォーラムで質問
                            </a>
                        </div>

                        <div class="sidebar-card">
                            <h4><i class="fas fa-users"></i> 他のメンバー</h4>
                            <div class="other-members" id="other-members">
                                <!-- 他のメンバーがここに表示されます -->
                            </div>
                        </div>

                        <div class="sidebar-card">
                            <h4><i class="fas fa-calendar"></i> 活動予定</h4>
                            <div class="upcoming-activities">
                                <div class="activity-item">
                                    <div class="activity-date">2/15</div>
                                    <div class="activity-info">
                                        <h5>生徒会会議</h5>
                                        <p>定例会議</p>
                                    </div>
                                </div>
                                <div class="activity-item">
                                    <div class="activity-date">2/20</div>
                                    <div class="activity-info">
                                        <h5>体育祭準備会</h5>
                                        <p>企画検討</p>
                                    </div>
                                </div>
                                <div class="activity-item">
                                    <div class="activity-date">2/25</div>
                                    <div class="activity-info">
                                        <h5>文化祭実行委員会</h5>
                                        <p>実行委員との打ち合わせ</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- 関連情報 -->
        <section class="related-info">
            <div class="container">
                <h2 class="section-title">関連情報</h2>
                <div class="related-grid">
                    <div class="related-card">
                        <div class="related-icon">
                            <i class="fas fa-newspaper"></i>
                        </div>
                        <h3>生徒会だより</h3>
                        <p>最新の活動報告や今後の予定をお知らせします。</p>
                        <a href="news.html" class="related-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>

                    <div class="related-card">
                        <div class="related-icon">
                            <i class="fas fa-calendar-alt"></i>
                        </div>
                        <h3>活動スケジュール</h3>
                        <p>生徒会の年間活動予定をご確認いただけます。</p>
                        <a href="council.html#activities" class="related-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>

                    <div class="related-card">
                        <div class="related-icon">
                            <i class="fas fa-handshake"></i>
                        </div>
                        <h3>生徒会に参加</h3>
                        <p>一緒に活動してくれる仲間を募集しています。</p>
                        <a href="council.html#join" class="related-link">詳しく見る <i class="fas fa-arrow-right"></i></a>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <!-- Features -->
    <script src="js/member-detail.js"></script>
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
    <!-- Notifications -->
    <script src="js/firebase-config.js"></script>
    <script src="js/notification-manager.js"></script>
</body>
</html>


[nazuna.sql]
-- ========================================
-- なずなポータルサイト 統一データベーススキーマ (nazuna.sql)
-- Supabase PostgreSQL用
-- ========================================

-- ========================================
-- 1. 基本システムテーブル
-- ========================================

-- 1.1 部活動テーブル
CREATE TABLE IF NOT EXISTS clubs (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    image_url VARCHAR(500),
    members INTEGER DEFAULT 0,
    schedule VARCHAR(200),
    category VARCHAR(50) DEFAULT 'general',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 1.2 お知らせテーブル
CREATE TABLE IF NOT EXISTS news (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT,
    summary TEXT,
    date DATE DEFAULT CURRENT_DATE,
    type VARCHAR(50) DEFAULT 'general',
    priority INTEGER DEFAULT 0,
    is_published BOOLEAN DEFAULT true,
    author VARCHAR(100),
    tags TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 1.3 生徒会メンバーテーブル
CREATE TABLE IF NOT EXISTS council_members (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    role VARCHAR(100) NOT NULL,
    grade VARCHAR(20),
    message TEXT,
    bio TEXT,
    image_url VARCHAR(500),
    email VARCHAR(200),
    responsibilities TEXT[],
    achievements TEXT[],
    is_active BOOLEAN DEFAULT true,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 1.4 メンバー活動実績テーブル
CREATE TABLE IF NOT EXISTS member_achievements (
    id SERIAL PRIMARY KEY,
    member_id INTEGER REFERENCES council_members(id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    achievement_year INTEGER NOT NULL,
    achievement_month INTEGER NOT NULL,
    category VARCHAR(50) DEFAULT 'general',
    priority INTEGER DEFAULT 0,
    is_public BOOLEAN DEFAULT true,
    image_url VARCHAR(500),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 1.5 学生アカウントテーブル（生徒番号ログイン用）
CREATE TABLE IF NOT EXISTS students (
    id SERIAL PRIMARY KEY,
    student_number VARCHAR(50) UNIQUE NOT NULL,
    name VARCHAR(100) NOT NULL,
    password_hash VARCHAR(256) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 2. フォーラム・投稿システム
-- ========================================

-- 2.1 投稿テーブル
CREATE TABLE IF NOT EXISTS posts (
    id VARCHAR(50) PRIMARY KEY DEFAULT gen_random_uuid()::text,
    content TEXT NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    reply TEXT,
    category VARCHAR(50) DEFAULT 'general',
    priority INTEGER DEFAULT 0,
    student_number VARCHAR(50),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    replied_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 2.2 チャットテーブル
CREATE TABLE IF NOT EXISTS chats (
    id SERIAL PRIMARY KEY,
    post_id VARCHAR(50) REFERENCES posts(id) ON DELETE CASCADE,
    sender VARCHAR(50),
    message TEXT,
    is_admin BOOLEAN DEFAULT false,
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 3. アンケートシステム
-- ========================================

-- 3.1 アンケートテーブル
CREATE TABLE IF NOT EXISTS surveys (
    id SERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    questions JSONB,
    settings JSONB,
    is_active BOOLEAN DEFAULT true,
    is_published BOOLEAN DEFAULT false,
    max_responses INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    expires_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 3.2 アンケート回答テーブル
CREATE TABLE IF NOT EXISTS survey_responses (
    id SERIAL PRIMARY KEY,
    survey_id INTEGER REFERENCES surveys(id) ON DELETE CASCADE,
    answers JSONB,
    respondent_info JSONB,
    submitted_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- 4. 通知システム
-- ========================================

-- 4.1 デバイス登録テーブル
CREATE TABLE IF NOT EXISTS device_registrations (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    fcm_token TEXT UNIQUE NOT NULL,
    user_agent TEXT,
    platform VARCHAR(50) DEFAULT 'web',
    browser VARCHAR(100),
    device_info JSONB,
    user_info JSONB,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    last_used_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4.2 通知テンプレートテーブル
CREATE TABLE IF NOT EXISTS notification_templates (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    template_key VARCHAR(100) UNIQUE NOT NULL,
    title_template TEXT NOT NULL,
    body_template TEXT NOT NULL,
    icon_url TEXT,
    action_url TEXT,
    category VARCHAR(50) DEFAULT 'general',
    priority INTEGER DEFAULT 0,
    require_interaction BOOLEAN DEFAULT false,
    actions JSONB,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- 4.3 通知送信履歴テーブル
CREATE TABLE IF NOT EXISTS notification_history (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    template_id UUID REFERENCES notification_templates(id),
    title TEXT NOT NULL,
    body TEXT NOT NULL,
    icon_url TEXT,
    action_url TEXT,
    category VARCHAR(50),
    priority INTEGER DEFAULT 0,
    target_type VARCHAR(20) DEFAULT 'all',
    target_criteria JSONB,
    total_recipients INTEGER DEFAULT 0,
    successful_sends INTEGER DEFAULT 0,
    failed_sends INTEGER DEFAULT 0,
    gas_execution_id TEXT,
    admin_email VARCHAR(200),
    status VARCHAR(20) DEFAULT 'pending',
    error_message TEXT,
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    completed_at TIMESTAMP WITH TIME ZONE
);

-- 4.4 個別通知配信状況テーブル
CREATE TABLE IF NOT EXISTS notification_deliveries (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    history_id UUID REFERENCES notification_history(id) ON DELETE CASCADE,
    device_id UUID REFERENCES device_registrations(id) ON DELETE CASCADE,
    fcm_message_id TEXT,
    status VARCHAR(20) DEFAULT 'pending',
    error_code VARCHAR(50),
    error_message TEXT,
    sent_at TIMESTAMP WITH TIME ZONE,
    delivered_at TIMESTAMP WITH TIME ZONE,
    clicked_at TIMESTAMP WITH TIME ZONE
);

-- 4.5 ユーザー通知設定テーブル
CREATE TABLE IF NOT EXISTS user_notification_preferences (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    device_id UUID REFERENCES device_registrations(id) ON DELETE CASCADE,
    category VARCHAR(50),
    is_enabled BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(device_id, category)
);

-- ========================================
-- 5. ビューとインデックス
-- ========================================

CREATE OR REPLACE VIEW notification_statistics AS
SELECT 
    nh.id,
    nh.title,
    nh.category,
    nh.admin_email,
    nh.sent_at,
    nh.total_recipients,
    nh.successful_sends,
    nh.failed_sends,
    ROUND((nh.successful_sends::decimal / NULLIF(nh.total_recipients, 0)) * 100, 2) as success_rate,
    COUNT(nd.clicked_at) as click_count,
    ROUND((COUNT(nd.clicked_at)::decimal / NULLIF(nh.successful_sends, 0)) * 100, 2) as click_rate
FROM notification_history nh
LEFT JOIN notification_deliveries nd ON nh.id = nd.history_id
GROUP BY nh.id, nh.title, nh.category, nh.admin_email, nh.sent_at, nh.total_recipients, nh.successful_sends, nh.failed_sends;

CREATE OR REPLACE VIEW active_survey_stats AS
SELECT 
    s.id,
    s.title,
    s.created_at,
    s.expires_at,
    COUNT(sr.id) as response_count,
    s.max_responses,
    CASE 
        WHEN s.max_responses IS NULL THEN NULL
        ELSE ROUND((COUNT(sr.id)::decimal / s.max_responses) * 100, 2)
    END as completion_percentage
FROM surveys s
LEFT JOIN survey_responses sr ON s.id = sr.survey_id
WHERE s.is_active = true AND s.is_published = true
GROUP BY s.id, s.title, s.created_at, s.expires_at, s.max_responses;

-- インデックス
CREATE INDEX IF NOT EXISTS idx_clubs_active ON clubs(is_active) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_clubs_category ON clubs(category);
CREATE INDEX IF NOT EXISTS idx_posts_status ON posts(status);
CREATE INDEX IF NOT EXISTS idx_posts_created_at ON posts(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_news_published ON news(is_published) WHERE is_published = true;
CREATE INDEX IF NOT EXISTS idx_news_date ON news(date DESC);
CREATE INDEX IF NOT EXISTS idx_news_type ON news(type);
CREATE INDEX IF NOT EXISTS idx_surveys_active ON surveys(is_active, is_published) WHERE is_active = true AND is_published = true;
CREATE INDEX IF NOT EXISTS idx_council_members_active ON council_members(is_active, display_order) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_member_achievements_member_id ON member_achievements(member_id);
CREATE INDEX IF NOT EXISTS idx_member_achievements_public ON member_achievements(is_public) WHERE is_public = true;
CREATE INDEX IF NOT EXISTS idx_member_achievements_year_month ON member_achievements(achievement_year DESC, achievement_month DESC);
CREATE INDEX IF NOT EXISTS idx_device_registrations_fcm_token ON device_registrations(fcm_token);
CREATE INDEX IF NOT EXISTS idx_device_registrations_active ON device_registrations(is_active) WHERE is_active = true;
CREATE INDEX IF NOT EXISTS idx_device_registrations_platform ON device_registrations(platform);
CREATE INDEX IF NOT EXISTS idx_notification_history_category ON notification_history(category);
CREATE INDEX IF NOT EXISTS idx_notification_history_sent_at ON notification_history(sent_at DESC);
CREATE INDEX IF NOT EXISTS idx_notification_deliveries_status ON notification_deliveries(status);
CREATE INDEX IF NOT EXISTS idx_notification_deliveries_history_id ON notification_deliveries(history_id);

-- ========================================
-- 6. トリガーと関数
-- ========================================

CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_clubs_updated_at 
    BEFORE UPDATE ON clubs 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_students_updated_at 
    BEFORE UPDATE ON students 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_posts_updated_at 
    BEFORE UPDATE ON posts 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_news_updated_at 
    BEFORE UPDATE ON news 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_surveys_updated_at 
    BEFORE UPDATE ON surveys 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_council_members_updated_at 
    BEFORE UPDATE ON council_members 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_member_achievements_updated_at 
    BEFORE UPDATE ON member_achievements 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_device_registrations_updated_at 
    BEFORE UPDATE ON device_registrations 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notification_templates_updated_at 
    BEFORE UPDATE ON notification_templates 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_notification_preferences_updated_at 
    BEFORE UPDATE ON user_notification_preferences 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- ========================================
-- 7. Row Level Security (RLS) の設定
-- ========================================

ALTER TABLE clubs ENABLE ROW LEVEL SECURITY;
ALTER TABLE news ENABLE ROW LEVEL SECURITY;
ALTER TABLE council_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE member_achievements ENABLE ROW LEVEL SECURITY;
ALTER TABLE posts ENABLE ROW LEVEL SECURITY;
ALTER TABLE chats ENABLE ROW LEVEL SECURITY;
ALTER TABLE students ENABLE ROW LEVEL SECURITY;
ALTER TABLE surveys ENABLE ROW LEVEL SECURITY;
ALTER TABLE survey_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE device_registrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_templates ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_deliveries ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_notification_preferences ENABLE ROW LEVEL SECURITY;

-- 公開データ用ポリシー
DROP POLICY IF EXISTS "Public read access on clubs" ON clubs;
CREATE POLICY "Public read access on clubs" ON clubs FOR SELECT USING (is_active = true);
DROP POLICY IF EXISTS "Public read access on news" ON news;
CREATE POLICY "Public read access on news" ON news FOR SELECT USING (is_published = true);
DROP POLICY IF EXISTS "Public read access on council_members" ON council_members;
CREATE POLICY "Public read access on council_members" ON council_members FOR SELECT USING (is_active = true);
DROP POLICY IF EXISTS "Public read access on member_achievements" ON member_achievements;
CREATE POLICY "Public read access on member_achievements" ON member_achievements FOR SELECT USING (is_public = true);
-- chats は公開しない

-- 一般ユーザー用ポリシー
DROP POLICY IF EXISTS "Users can submit posts" ON posts;
CREATE POLICY "Users can submit posts" ON posts FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Users can view approved posts" ON posts;
CREATE POLICY "Users can view approved posts" ON posts FOR SELECT USING (status = 'approved' OR status = 'replied');
DROP POLICY IF EXISTS "Users can view published surveys" ON surveys;
CREATE POLICY "Users can view published surveys" ON surveys FOR SELECT USING (is_active = true AND is_published = true);
DROP POLICY IF EXISTS "Users can submit survey responses" ON survey_responses;
CREATE POLICY "Users can submit survey responses" ON survey_responses FOR INSERT WITH CHECK (true);
-- チャットは最小実装として読み書きを許可（将来JWT/サーバー側で制限）
DROP POLICY IF EXISTS "Users can read chats" ON chats;
CREATE POLICY "Users can read chats" ON chats FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can send chats" ON chats;
CREATE POLICY "Users can send chats" ON chats FOR INSERT WITH CHECK (true);
DROP POLICY IF EXISTS "Users can manage own devices" ON device_registrations;
CREATE POLICY "Users can manage own devices" ON device_registrations FOR ALL USING (true);
DROP POLICY IF EXISTS "Users can view active templates" ON notification_templates;
CREATE POLICY "Users can view active templates" ON notification_templates FOR SELECT USING (is_active = true);
DROP POLICY IF EXISTS "Users can view notification history" ON notification_history;
CREATE POLICY "Users can view notification history" ON notification_history FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can manage own notification preferences" ON user_notification_preferences;
CREATE POLICY "Users can manage own notification preferences" ON user_notification_preferences FOR ALL USING (true);

-- 学生アカウント（初回登録・ログイン用）
DROP POLICY IF EXISTS "Users can read students for login" ON students;
CREATE POLICY "Users can read students for login" ON students FOR SELECT USING (true);
DROP POLICY IF EXISTS "Users can register student" ON students;
CREATE POLICY "Users can register student" ON students FOR INSERT WITH CHECK (true);

-- 管理者用ポリシー
DROP POLICY IF EXISTS "Admin full access on clubs" ON clubs;
CREATE POLICY "Admin full access on clubs" ON clubs FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on news" ON news;
CREATE POLICY "Admin full access on news" ON news FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on council_members" ON council_members;
CREATE POLICY "Admin full access on council_members" ON council_members FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on member_achievements" ON member_achievements;
CREATE POLICY "Admin full access on member_achievements" ON member_achievements FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on posts" ON posts;
CREATE POLICY "Admin full access on posts" ON posts FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on chats" ON chats;
CREATE POLICY "Admin full access on chats" ON chats FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on surveys" ON surveys;
CREATE POLICY "Admin full access on surveys" ON surveys FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on survey_responses" ON survey_responses;
CREATE POLICY "Admin full access on survey_responses" ON survey_responses FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on device_registrations" ON device_registrations;
CREATE POLICY "Admin full access on device_registrations" ON device_registrations FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on notification_templates" ON notification_templates;
CREATE POLICY "Admin full access on notification_templates" ON notification_templates FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on notification_history" ON notification_history;
CREATE POLICY "Admin full access on notification_history" ON notification_history FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on notification_deliveries" ON notification_deliveries;
CREATE POLICY "Admin full access on notification_deliveries" ON notification_deliveries FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on user_notification_preferences" ON user_notification_preferences;
CREATE POLICY "Admin full access on user_notification_preferences" ON user_notification_preferences FOR ALL USING (auth.role() = 'admin');
DROP POLICY IF EXISTS "Admin full access on students" ON students;
CREATE POLICY "Admin full access on students" ON students FOR ALL USING (auth.role() = 'admin');

-- ========================================
-- 8. 初期データ（任意）
-- ========================================

INSERT INTO notification_templates (template_key, title_template, body_template, category, priority, action_url, actions) VALUES
('news_published', '📢 {{title}}', '{{summary}}', 'news', 1, './news.html', '[{"action": "view", "title": "詳細を見る"}, {"action": "dismiss", "title": "閉じる"}]'::jsonb),
('survey_created', '📊 新しいアンケート', '{{title}} - {{deadline}}まで', 'survey', 0, './survey.html', '[{"action": "view", "title": "回答する"}, {"action": "later", "title": "後で"}]'::jsonb),
('forum_reply', '💬 フォーラムに返信', '{{post_id}}への返信があります', 'forum', 0, './forum.html', '[{"action": "view", "title": "確認する"}]'::jsonb),
('emergency_alert', '🚨 緊急連絡', '{{message}}', 'emergency', 2, './news.html', '[{"action": "view", "title": "確認する"}]'::jsonb),
('event_reminder', '📅 イベント開催', '{{title}} - {{date}}', 'event', 1, './news.html', '[{"action": "view", "title": "詳細"}]'::jsonb)
ON CONFLICT (template_key) DO NOTHING;

INSERT INTO council_members (name, role, grade, message, bio, responsibilities, achievements, display_order) VALUES
('会長 山田太郎', '生徒会長', '3年', '皆さんの声を大切にします！', '生徒会活動を通じて学校をより良い場所にしたいと思っています。', ARRAY['全体統括', '対外交渉', '重要決定'], ARRAY['生徒会改革', '学園祭成功'], 1),
('副会長 田中花子', '副会長', '3年', 'イベント企画頑張ります！', '楽しいイベントを企画することが得意です。', ARRAY['イベント企画', '会長補佐', '委員会調整'], ARRAY['文化祭企画賞', '体育祭運営'], 2),
('書記 鈴木一郎', '書記', '2年', '透明性のある活動を目指します', '正確な記録と情報共有を心がけています。', ARRAY['議事録作成', '情報管理', '広報活動'], ARRAY['議事録デジタル化', '情報公開制度'], 3),
('会計 佐藤美咲', '会計', '2年', '予算を有効活用します', '数字に強く、効率的な予算運用を行います。', ARRAY['予算管理', '会計監査', '支出承認'], ARRAY['予算効率化', '透明な会計報告'], 4)
ON CONFLICT DO NOTHING;

-- メンバー活動実績のサンプルデータ
INSERT INTO member_achievements (member_id, title, description, achievement_year, achievement_month, category, priority, is_public) VALUES
(1, '生徒会改革プロジェクト', '生徒会の透明性向上と効率化を実現', 2024, 4, 'leadership', 1, true),
(1, '学園祭成功', '過去最高の来場者数を記録した学園祭を成功に導く', 2024, 10, 'event', 1, true),
(2, '文化祭企画賞受賞', '創意工夫に富んだ文化祭企画で表彰される', 2024, 9, 'award', 2, true),
(2, '体育祭運営', 'スムーズな体育祭運営を実現', 2024, 6, 'event', 1, true),
(3, '議事録デジタル化', '従来の紙ベースからデジタル化に移行', 2024, 3, 'innovation', 2, true),
(3, '情報公開制度', '生徒会活動の透明性向上のための制度を構築', 2024, 5, 'governance', 1, true),
(4, '予算効率化', '無駄な支出を削減し予算の有効活用を実現', 2024, 7, 'management', 1, true),
(4, '透明な会計報告', '月次会計報告の公開により透明性を向上', 2024, 8, 'governance', 1, true)
ON CONFLICT DO NOTHING;

INSERT INTO clubs (name, description, members, schedule, category) VALUES
('サッカー部', '全国大会を目指して日々練習に励んでいます。チームワークを大切に、技術向上に取り組んでいます。', 45, '月・水・金 16:00-18:00', 'sports'),
('吹奏楽部', '美しいハーモニーを奏でることを目標に活動中。コンクールでの金賞を目指しています。', 32, '火・木・土 16:00-19:00', 'music'),
('美術部', '創作活動を通じて感性を磨いています。展覧会での作品発表も行います。', 18, '月・火・金 16:00-17:30', 'art'),
('科学部', '実験や研究を通じて科学の面白さを探求しています。', 24, '水・金 16:00-18:00', 'science')
ON CONFLICT DO NOTHING;

INSERT INTO news (title, content, summary, type, priority) VALUES
('体育祭開催のお知らせ', '来月20日に体育祭を開催いたします。詳細は後日配布される案内をご確認ください。', '来月20日に体育祭を開催', 'event', 1),
('図書館利用時間変更', '期末試験期間中の図書館利用時間を延長いたします。', '図書館利用時間を延長', 'announcement', 0),
('新型コロナウイルス対策について', '感染症対策の徹底をお願いいたします。', '感染症対策の徹底について', 'important', 2)
ON CONFLICT DO NOTHING;

-- ========================================
-- 9. セキュリティ設定の確認とトラブルシューティング
-- ========================================

-- 9.1 RLS有効化の確認
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE schemaname = 'public' 
AND rowsecurity = true;

-- 9.2 ポリシーの確認
SELECT schemaname, tablename, policyname, permissive, roles, cmd, qual 
FROM pg_policies 
WHERE schemaname = 'public'
ORDER BY tablename, policyname;

-- ========================================
-- 10. 運用時の注意事項
-- ========================================

-- 10.1 管理者認証
-- - Supabaseのダッシュボードで管理者ユーザーを作成
-- - auth.usersテーブルでroleカラムを'admin'に設定
-- - または、カスタム認証ロジックを実装

-- 10.2 匿名ユーザーの制限
-- - 匿名ユーザーは読み取り専用アクセスのみ
-- - 投稿や回答は認証なしで可能（必要に応じて制限を追加）

-- 10.3 セキュリティ監査
-- - 定期的にポリシーの見直しを行う
-- - ログの監視と異常なアクセスの検出
-- - データのバックアップと復旧計画の策定

-- ========================================
-- 11. トラブルシューティング
-- ========================================

-- 11.1 よくある問題
-- - ポリシーが適用されない場合: RLSが有効化されているか確認
-- - アクセス拒否エラー: ポリシーの条件を確認
-- - 管理者権限が効かない場合: ロール設定を確認

-- 11.2 デバッグ用クエリ
-- 現在のユーザー情報を確認
-- SELECT auth.uid(), auth.role();

-- テーブルのRLS状態を確認
-- SELECT tablename, rowsecurity FROM pg_tables WHERE schemaname = 'public';

-- ポリシーの詳細を確認
-- SELECT * FROM pg_policies WHERE schemaname = 'public';

-- ========================================
-- 12. ロールと権限の設定
-- ========================================

-- 12.1 管理者ロールの設定
-- 注意: 実際の運用時は、Supabaseのダッシュボードで管理者ロールを設定してください
-- CREATE ROLE admin;
-- GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO admin;

-- 12.2 サービスロールの設定（GAS用）
-- 注意: 実際の運用時は、GAS用のサービスロールを設定してください
-- CREATE ROLE gas_service;
-- GRANT SELECT, INSERT, UPDATE ON ALL TABLES IN SCHEMA public TO gas_service;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO gas_service;
-- GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO gas_service;



[news.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>お知らせ - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- PWA対応メタタグ -->
    <meta name="theme-color" content="#4a7c59">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="default">
    <meta name="apple-mobile-web-app-title" content="なずなポータル">
    <meta name="msapplication-TileColor" content="#4a7c59">
    <meta name="msapplication-config" content="browserconfig.xml">
    <meta name="application-name" content="なずなポータル">
    <meta name="mobile-web-app-capable" content="yes">
    
    <!-- iOS対応 -->
    <link rel="apple-touch-icon" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="152x152" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <link rel="apple-touch-icon" sizes="167x167" href="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    
    <!-- Windows対応 -->
    <meta name="msapplication-TileImage" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-square70x70logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-72x72.png">
    <meta name="msapplication-square150x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-144x144.png">
    <meta name="msapplication-wide310x150logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png">
    <meta name="msapplication-square310x310logo" content="https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-512x512.png">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
    
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.0.0/firebase-messaging-compat.js"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html" class="active">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ページヘッダー -->
        <section class="page-header">
            <div class="container">
                <div class="page-header-content">
                    <h1><i class="fas fa-bell"></i> お知らせ</h1>
                    <p>学校行事や生徒会からの重要な情報をお届けします</p>
                </div>
            </div>
        </section>

        <!-- フィルター -->
        <section class="news-filter">
            <div class="container">
                <div class="filter-controls">
                    <h3>カテゴリで絞り込み</h3>
                    <div class="filter-buttons">
                        <button class="filter-btn active" data-category="all">
                            <i class="fas fa-th"></i> すべて
                        </button>
                        <button class="filter-btn" data-category="event">
                            <i class="fas fa-calendar-alt"></i> イベント
                        </button>
                        <button class="filter-btn" data-category="newsletter">
                            <i class="fas fa-newspaper"></i> 生徒会だより
                        </button>
                        <button class="filter-btn" data-category="recruitment">
                            <i class="fas fa-users"></i> 募集
                        </button>
                        <button class="filter-btn" data-category="important">
                            <i class="fas fa-exclamation-triangle"></i> 重要
                        </button>
                    </div>
                </div>
            </div>
        </section>

        <!-- お知らせ一覧 -->
        <section class="news-list">
            <div class="container">
                <div class="news-container" id="news-container">
                    <div class="loading">読み込み中...</div>
                </div>
            </div>
        </section>

        <!-- 生徒会だより -->
        <section class="newsletter-section">
            <div class="container">
                <h2 class="section-title">生徒会だより</h2>
                <div class="newsletter-grid">
                    <div class="newsletter-item">
                        <div class="newsletter-cover">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="newsletter-info">
                            <h3>生徒会だより 1月号</h3>
                            <p class="newsletter-date">2024年1月15日発行</p>
                            <p class="newsletter-description">新年のご挨拶、1月の活動報告、2月の予定など</p>
                            <a href="#" class="btn btn-outline">
                                <i class="fas fa-download"></i>
                                ダウンロード
                            </a>
                        </div>
                    </div>
                    
                    <div class="newsletter-item">
                        <div class="newsletter-cover">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="newsletter-info">
                            <h3>生徒会だより 12月号</h3>
                            <p class="newsletter-date">2023年12月15日発行</p>
                            <p class="newsletter-description">文化祭の振り返り、冬休みの過ごし方、新年の抱負など</p>
                            <a href="#" class="btn btn-outline">
                                <i class="fas fa-download"></i>
                                ダウンロード
                            </a>
                        </div>
                    </div>
                    
                    <div class="newsletter-item">
                        <div class="newsletter-cover">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="newsletter-info">
                            <h3>生徒会だより 11月号</h3>
                            <p class="newsletter-date">2023年11月15日発行</p>
                            <p class="newsletter-description">体育祭の報告、部活動紹介、生徒会選挙について</p>
                            <a href="#" class="btn btn-outline">
                                <i class="fas fa-download"></i>
                                ダウンロード
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </section>



        <!-- 通知設定 -->
        <section class="notification-settings-section">
            <div class="container">
                <div class="notification-settings-card">
                    <h3><i class="fas fa-bell"></i> プッシュ通知設定</h3>
                    <div class="notification-controls">
                        <div class="notification-control-group">
                            <div id="notification-status">
                                <!-- 通知ステータスがここに表示されます -->
                            </div>
                            <div class="notification-buttons">
                                <button class="btn btn-primary" id="enable-notifications">
                                    <i class="fas fa-bell"></i>
                                    通知を有効にする
                                </button>
                                <button class="btn btn-secondary" id="disable-notifications" style="display: none;">
                                    <i class="fas fa-bell-slash"></i>
                                    通知を無効にする
                                </button>
                                <button class="btn btn-outline" id="test-notification" style="display: none;">
                                    <i class="fas fa-paper-plane"></i>
                                    テスト通知
                                </button>
                            </div>
                        </div>
                        
                        <div class="notification-info">
                            <h4><i class="fas fa-info-circle"></i> プッシュ通知について</h4>
                            <p>プッシュ通知を有効にすると、以下のお知らせをリアルタイムで受け取ることができます：</p>
                            <ul>
                                <li>緊急のお知らせ</li>
                                <li>新しい生徒会だより</li>
                                <li>イベントの開催情報</li>
                                <li>アンケートの開始通知</li>
                                <li>フォーラムへの返信</li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
                <p>平日 12:30-13:00</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <!-- Features -->
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
    <!-- Notifications -->
    <script src="js/firebase-config.js"></script>
    <script src="js/notification-manager.js"></script>
</body>
</html>


[NOTIFICATION_SYSTEM_REDESIGN.md]
# 通知システム再設計 - カスタムメッセージ対応版

## 問題の概要
従来の通知システムでは、テンプレートに依存した設計のため、カスタムメッセージが正しく表示されない問題がありました。

## 実装した解決策

### 1. GAS側の修正 (`gas-sample.gs`)

#### `sendNotification` 関数の改修
- **カスタムメッセージ優先処理**: `templateData`に`title`と`message`がある場合、テンプレートを使わずに直接カスタムメッセージを送信
- **フォールバック処理**: テンプレートベースの処理も後方互換性のため残存
- **カスタムデータ構造**: 通知の詳細設定（アイコン、バッジ、アクション等）をカスタムメッセージで直接指定可能

#### `sendFCMMessage` 関数の改修
- **カスタムデータのFCM送信**: カスタムメッセージのデータをFCMの`data`フィールドに直接渡す
- **プラットフォーム対応**: Web、iOS、Androidそれぞれでカスタムデータを適切に処理

### 2. フロントエンド側の修正 (`js/admin.js`)

#### `sendPushNotification` 関数の改修
- **テンプレートキー無効化**: `templateKey: ''`でテンプレートを使用しないことを明示
- **カスタムデータ直接送信**: `templateData`にカスタムメッセージの全情報を含める
- **自動カテゴリ判定**: タイトルから自動的にカテゴリと優先度を判定

#### 新規ヘルパー関数の追加
- `getCategoryFromTitle()`: タイトルからカテゴリを自動判定
- `getPriorityFromTitle()`: タイトルから優先度を自動判定

### 3. サービスワーカーの修正

#### `sw.js` の改修
- **カスタムデータ優先処理**: プッシュデータの解析でカスタムメッセージの情報を優先使用
- **詳細ログ出力**: デバッグ用にプッシュデータの内容をコンソールに出力
- **アクション設定**: カスタムアクションまたはデフォルトアクションを設定

#### `firebase-messaging-sw.js` の改修
- **Firebase Messaging対応**: Firebase Messaging用のサービスワーカーでもカスタムデータを適切に処理
- **iOS対応強化**: iOS PWAでの通知表示を改善

## 主な改善点

### 1. カスタムメッセージの直接送信
```javascript
// 従来（テンプレート依存）
const message = generateMessage(template, templateData);

// 新方式（カスタムメッセージ直接）
if (templateData && templateData.title && templateData.message) {
  message = {
    title: templateData.title,
    body: templateData.message,
    // その他のカスタム設定...
  };
}
```

### 2. 自動カテゴリ・優先度判定
```javascript
// タイトルから自動判定
function getCategoryFromTitle(title) {
  if (title.includes('緊急')) return 'urgent';
  if (title.includes('アンケート')) return 'survey';
  // ...
}
```

### 3. FCMデータの最適化
```javascript
// カスタムデータをFCMに直接送信
const customData = {
  title: message.title,
  body: message.body,
  // その他のカスタム設定...
};
```

## 使用方法

### 管理者画面での通知送信
1. タイトルとメッセージを入力
2. 対象を選択（全員、特定のグループ等）
3. 送信ボタンをクリック
4. カスタムメッセージがそのまま通知として表示される

### カスタム設定の例
```javascript
const notificationData = {
  templateKey: '', // テンプレート不使用
  templateData: {
    title: '緊急のお知らせ',
    message: '明日の授業は休講です。',
    category: 'urgent', // 自動判定される
    priority: 3, // 自動判定される
    requireInteraction: true, // 緊急通知のため
    actions: [
      { action: 'view', title: '詳細を見る' },
      { action: 'dismiss', title: '閉じる' }
    ]
  }
};
```

## 後方互換性
- 既存のテンプレートベースの通知も引き続き動作
- 段階的な移行が可能
- 既存のAPIエンドポイントは変更なし

## テスト方法
1. 管理者画面で通知を送信
2. ブラウザの開発者ツールでコンソールを確認
3. 通知が正しく表示されることを確認
4. 通知クリック時の動作を確認

## 今後の改善案
- 通知テンプレートの管理画面の追加
- 通知の配信統計の詳細化
- 通知のスケジュール送信機能
- 通知の既読管理機能


[README.md]

# なずなポータルサイト

### みんなでつくる学校生活をサポートするなずなポータルサイトです。

## 🚀 機能

- **生徒会紹介**: メンバー紹介と活動内容
- **部活動紹介**: 各部活動の詳細情報とフィルタリング機能
- **なずなフォーラム**: 匿名での意見投稿と生徒会からの返信
- **お知らせ**: 学校行事や重要な情報の配信
- **アンケート・投票**: 生徒の意見収集
- **PWA対応**: スマートフォンにアプリとしてインストール可能
- **サイドバーナビゲーション**: オーバーレイ式の美しいサイドバー
- **オープニング画面**: アニメーション付きのローディング画面
- **Supabase統合**: リアルタイムデータベース対応

## 📁 ファイル構成

```
homepage/
├── index.html          # ホームページ
├── council.html        # 生徒会紹介
├── clubs.html          # 部活動紹介
├── forum.html          # なずなフォーラム
├── news.html           # お知らせ
├── survey.html         # アンケート・投票
├── css/
│   └── style.css       # スタイルシート
├── js/
│   ├── config.js       # 設定ファイル
│   └── app.js          # メインJavaScript
├── manifest.json       # PWAマニフェスト
├── sw.js              # Service Worker
├── gas-sample.js      # GAS連携サンプルコード
└── README.md          # このファイル
```

## ⚙️ セットアップ

### 1. Supabaseの設定（推奨）

1. [Supabase](https://supabase.com/) にアクセスしてアカウントを作成
2. 新しいプロジェクトを作成
3. データベース初期化: ルートの `nazuna.sql` をSupabase SQL Editorで実行してください（スキーマ・RLS・初期データを一括作成）

4. Settings > API からプロジェクトURLとAnonキーを取得

### 2. 設定ファイルの更新

`js/config.js` を編集：

```javascript
const CONFIG = {
    // Supabase設定
    SUPABASE: {
        URL: 'YOUR_SUPABASE_URL_HERE',
        ANON_KEY: 'YOUR_SUPABASE_ANON_KEY_HERE'
    },
    
    // その他の設定は必要に応じて調整
    // ...
};
```

### 3. Google Apps Script (GAS) の設定（オプション）

1. [Google Apps Script](https://script.google.com/) にアクセス
2. 新しいプロジェクトを作成
3. `gas-sample.js` の内容をコピー&ペースト
4. スプレッドシートを作成し、IDを取得
5. `SPREADSHEET_ID` を実際のIDに変更
6. `initializeSpreadsheet()` 関数を実行してシートを初期化
7. WebAppとしてデプロイ
8. デプロイURLを取得

### 4. PWA用アイコンの準備

`images/` フォルダに以下のサイズのアイコンを配置：
- icon-72x72.png
- icon-96x96.png
- icon-128x128.png
- icon-144x144.png
- icon-152x152.png
- icon-192x192.png
- icon-384x384.png
- icon-512x512.png

## ✨ 新機能

### サイドバーナビゲーション
- オーバーレイ式の美しいサイドバー
- スムーズなアニメーション
- レスポンシブ対応（モバイル・デスクトップ）
- ESCキーで閉じる機能

### オープニング画面
- アニメーション付きのローディング画面
- ブランドロゴとメッセージ表示
- 2秒後に自動的にメインコンテンツを表示

### Supabase統合
- リアルタイムデータベース対応
- 自動的なデータ同期
- データがない場合の「まだ情報はありません」表示
- フォールバック機能（Supabaseが利用できない場合はデモデータを表示）

## 🔧 カスタマイズ

### 色とテーマの変更

`css/style.css` の CSS変数を編集：

```css
:root {
    --primary-color: #2c3e50;      /* メインカラー */
    --secondary-color: #3498db;    /* アクセントカラー */
    --accent-color: #e74c3c;       /* 強調カラー */
    /* ... */
}
```

### カテゴリの追加・変更

`js/config.js` の `CATEGORIES` オブジェクトを編集：

```javascript
CATEGORIES: {
    CLUBS: {
        'sports': '運動部',
        'culture': '文化部',
        'academic': '学術部',
        'music': '音楽部',
        'volunteer': 'ボランティア'
    },
    // ...
}
```

### メッセージの変更

`js/config.js` の `MESSAGES` オブジェクトを編集：

```javascript
MESSAGES: {
    SUCCESS: {
        POST_SUBMITTED: '投稿が完了しました！',
        // ...
    },
    // ...
}
```

## 📱 PWA機能

このサイトはPWA（Progressive Web App）として動作します：

- **オフライン対応**: Service Workerによるキャッシュ
- **インストール可能**: ホーム画面に追加可能
- **プッシュ通知**: 重要なお知らせの通知

## 🔒 セキュリティ

- 投稿は匿名で処理されます
- 不適切な投稿は管理者が削除できます
- XSS対策のためHTMLエスケープを実装

## 🚀 デプロイ

### GitHub Pages
1. GitHubリポジトリにプッシュ
2. Settings > Pages でデプロイ設定
3. GAS URLを本番環境用に更新

### その他のホスティング
- Netlify
- Vercel
- Firebase Hosting

## 🛠️ 開発

### ローカル開発
```bash
# 簡易サーバーの起動（Python）
python -m http.server 8000

# または Node.js
npx http-server
```

### デバッグモード
`js/config.js` でデバッグモードを有効化：

```javascript
APP: {
    DEBUG: true,  // デバッグ情報をコンソールに出力
    // ...
}
```

### 使用方法

1. **サイドバー**: ハンバーガーメニュー（☰）をクリックしてサイドバーを開く
2. **オープニング**: 初回アクセス時にオープニング画面が表示される
3. **データ管理**: Supabaseダッシュボードからデータの追加・編集が可能
4. **フォールバック**: Supabaseが設定されていない場合はデモデータを表示

## 📞 サポート

問題や質問がある場合は、生徒会室までお越しください。

平日 12:30-13:00

---

© 2024 生徒会. All rights reserved.
```


[SETUP_GUIDE.md]
# なずなポータル セットアップガイド

システムを動作させるために必要な設定項目をすべてまとめました。

## 📋 設定が必要な項目一覧

### 1. Firebase プロジェクト設定

#### 1.1 Firebase Console での作業
1. [Firebase Console](https://console.firebase.google.com/) にアクセス
2. 「プロジェクトを追加」をクリック
3. プロジェクト名を入力（例：`nazuna-portal`）
4. Google Analytics は任意で設定

#### 1.2 Firebase Messaging 設定
1. プロジェクト設定 → Cloud Messaging タブ
2. 「Web プッシュ証明書」で「証明書を生成」
3. **VAPIDキー**をコピーして保存 📝

#### 1.3 Firebase Cloud Messaging HTTP v1 API 設定
1. プロジェクト設定 → Cloud Messaging タブ
2. **「サーバーキー」**をコピーして保存 📝（レガシーAPI用）
3. **Firebase Access Token**を取得（HTTP v1 API用）：
   - Google Cloud Console → IAMと管理 → サービスアカウント
   - Firebase Admin SDK サービスアカウントを選択
   - 「キー」タブ → 「キーを追加」→ 「新しいキーを作成」
   - JSON形式でダウンロード
   - 以下のコマンドでAccess Tokenを取得：
   ```bash
   gcloud auth application-default print-access-token
   ```
   - または、Firebase Admin SDKを使用してトークンを生成

#### 1.4 Firebase 設定情報取得
1. プロジェクト設定 → 全般タブ
2. 「ウェブアプリを Firebase に追加」
3. アプリ名を入力（例：`nazuna-portal-web`）
4. **Firebase SDK設定オブジェクト**をコピーして保存 📝

---

### 2. Supabase データベース設定

#### 2.1 Supabase プロジェクト作成
1. [Supabase](https://supabase.com/) でアカウント作成
2. 「New project」をクリック
3. プロジェクト名を入力（例：`nazuna-portal`）
4. データベースパスワードを設定して保存 📝

#### 2.2 データベーススキーマ作成
1. Supabase Dashboard → SQL Editor
2. `system.sql` の内容をすべてコピー
3. SQL Editorに貼り付けて実行
4. エラーがないことを確認

#### 2.3 API キー取得
1. Settings → API
2. **`anon public`** キー（クライアント用）をコピー 📝
3. **`service_role`** キー（GAS用）をコピー 📝
4. **Project URL** をコピー 📝

---

### 3. Google Apps Script 設定

#### 3.1 GAS プロジェクト作成
1. [Google Apps Script](https://script.google.com/) にアクセス
2. 「新しいプロジェクト」を作成
3. プロジェクト名を設定（例：`nazuna-portal-system`）

#### 3.2 GAS コード設定
1. `gas-sample.gs` の内容をすべてコピー
2. GAS エディタの `Code.gs` に貼り付け（既存コードを削除）
3. ファイルを保存

#### 3.3 スクリプトプロパティ設定
1. GAS エディタで「プロジェクトの設定」→「スクリプト プロパティ」
2. 以下のプロパティを追加：

| プロパティ名 | 値 | 説明 |
|-------------|-----|------|
| `SUPABASE_URL` | `https://your-project.supabase.co` | SupabaseのProject URL |
| `SUPABASE_SERVICE_KEY` | `eyJ0eXAiOiJKV1QiLCJhbGci...` | Supabaseのservice_roleキー |
| `FIREBASE_PROJECT_ID` | `nazuna-portal` | FirebaseのProject ID |
| `FIREBASE_ACCESS_TOKEN` | `ya29.c.b0Aa...` | FirebaseのAccess Token（HTTP v1 API用） |
| `DEBUG_MODE` | `false` | 本番環境では`false` |
| `SPREADSHEET_ID` | `1ABC...` | （オプション）スプレッドシート連携用 |

#### 3.4 管理者アカウント設定
1. GAS エディタで関数 `initializeGASProperties` を実行
2. 実行ログで設定完了を確認
3. 必要に応じて `setupAdminAccounts` を実行してアカウント追加

#### 3.5 GAS Webアプリとしてデプロイ
1. GAS エディタで「デプロイ」→「新しいデプロイ」
2. 種類：「ウェブアプリ」を選択
3. 実行者：「自分」
4. アクセス権限：「全員」
5. デプロイ後、**WebアプリのURL**をコピー 📝

---

### 4. PWA 設定ファイル更新

#### 4.1 基本設定（`js/config.js`）
```javascript
const CONFIG = {
    SUPABASE: {
        URL: 'https://your-project.supabase.co', // ← ここを更新
        ANON_KEY: 'eyJ0eXAiOiJKV1QiLCJhbGci...' // ← ここを更新
    },
    GAS_URL: 'https://script.google.com/macros/s/your-script-id/exec', // ← ここを更新
    FIREBASE: {
        PROJECT_ID: 'nazuna-portal', // ← ここを更新
        VAPID_KEY: 'BEl62iUYgUivxIkv69yViEuiBIa40HI0...', // ← ここを更新
        MESSAGING_SENDER_ID: '181514532945' // ← ここを更新
    }
};
```

#### 4.2 Firebase設定（`js/firebase-config.js`）
```javascript
const firebaseConfig = {
    apiKey: "AIzaSyC...", // ← ここを更新
    authDomain: "nazuna-portal.firebaseapp.com", // ← ここを更新
    projectId: "nazuna-portal", // ← ここを更新
    storageBucket: "nazuna-portal.firebasestorage.app", // ← Firebase Storage用の新しいドメイン
    messagingSenderId: "123456789", // ← ここを更新
    appId: "1:123456789:web:abc123", // ← ここを更新
    measurementId: "G-XXXXXXXXXX" // ← ここを更新（オプション）
};

const vapidKey = "BEl62iUYgUivxIkv69yViEuiBIa40HI0..."; // ← ここを更新
```

#### 4.3 Firebase SDK設定（`index.html`）
以下のスクリプトを`index.html`の`</head>`タグの直前に追加します：

```html
<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-messaging-compat.js"></script>

<!-- Firebase初期化 -->
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // Firebase SDKが読み込まれているか確認
    if (typeof firebase !== 'undefined') {
      try {
        // Firebaseを初期化
        firebase.initializeApp(firebaseConfig);
        
        // Firebase Messagingがサポートされているか確認
        if (firebase.messaging.isSupported()) {
          const messaging = firebase.messaging();
          messaging.usePublicVapidKey(vapidKey);
          
          // 通知許可を要求
          const permission = await Notification.requestPermission();
          if (permission === 'granted') {
            // FCMトークンを取得
            const token = await messaging.getToken();
            if (token) {
              // トークンを登録
              if (window.notificationManager) {
                await window.notificationManager.registerDevice(token);
                console.log('FCMトークンを登録しました');
              }
            }
            
            // フォアグラウンドメッセージの処理
            messaging.onMessage((payload) => {
              console.log('フォアグラウンドメッセージを受信:', payload);
              if (window.notificationManager) {
                window.notificationManager.handleForegroundMessage(payload);
              }
            });
          }
        }
      } catch (error) {
        console.error('Firebase初期化エラー:', error);
      }
    }
  });
</script>
```

#### 4.4 iOS PWA対応設定
iOS PWA向けのプッシュ通知機能を有効にするために、以下の設定を行います：

1. **`manifest.json`の確認**
   以下の設定が含まれていることを確認します：
   ```json
   {
     "name": "なずなポータル",
     "short_name": "なずな",
     "display": "standalone",
     "start_url": "./index.html",
     "theme_color": "#4CAF50",
     "background_color": "#ffffff",
     "icons": [
       {
         "src": "images/icons/icon-192x192.png",
         "sizes": "192x192",
         "type": "image/png",
         "purpose": "any maskable"
       },
       {
         "src": "images/icons/icon-512x512.png",
         "sizes": "512x512",
         "type": "image/png",
         "purpose": "any maskable"
       }
     ]
   }
   ```

2. **iOS向けメタタグの確認**
   `index.html`の`<head>`セクションに以下のメタタグが含まれていることを確認します：
   ```html
   <!-- iOS PWA対応 -->
   <meta name="apple-mobile-web-app-capable" content="yes">
   <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
   <meta name="apple-mobile-web-app-title" content="なずなポータル">
   <link rel="apple-touch-icon" href="images/icons/apple-touch-icon.png">
   ```

---

### 5. 管理者アカウント設定

#### 5.1 デフォルト管理者アカウント
| メールアドレス | パスワード | 権限 | 説明 |
|---------------|-----------|------|------|
| `admin@school.ac.jp` | `admin123` | 全権限 | システム管理者 |
| `council@school.ac.jp` | `council456` | 通知・ニュース・アンケート・フォーラム | 生徒会管理者 |
| `teacher@school.ac.jp` | `teacher789` | フォーラム・ニュース | 教員管理者 |

#### 5.2 カスタム管理者アカウント追加
1. GAS エディタで `setupAdminAccounts` 関数を編集
2. 新しいアカウント情報を追加
3. 関数を実行して設定を更新

---

### 6. ドメイン・ホスティング設定

#### 6.1 独自ドメイン（オプション）
- ドメインを取得している場合は、DNS設定でホスティング先を指定

#### 6.2 HTTPS設定
- 本番環境では必ずHTTPS接続を使用
- プッシュ通知はHTTPS必須

---

## 🔧 設定手順

### ステップ1: Firebase設定
1. Firebase Console でプロジェクト作成
2. VAPIDキー、Server Key、設定オブジェクトを取得
3. `js/config.js` と `js/firebase-config.js` を更新

### ステップ2: Supabase設定
1. Supabase でプロジェクト作成
2. `system.sql` を実行してデータベース構築
3. API キーとProject URLを取得

### ステップ3: GAS設定
1. GAS プロジェクト作成
2. `gas-sample.gs` をコピー
3. スクリプトプロパティを設定
4. Webアプリとしてデプロイ
5. `js/config.js` のGAS_URLを更新

### ステップ4: PWA設定
1. `index.html` にFirebase SDKスクリプトを追加
2. iOS向けメタタグが正しく設定されていることを確認
3. `manifest.json` の設定を確認
4. Service Workerが正しく登録されていることを確認

### ステップ5: iOS PWA対応確認
1. iOSデバイスでサイトを開く
2. ホーム画面に追加するよう促すメッセージを表示
3. ホーム画面からPWAを起動
4. `notificationManager.checkIOSPWASupport()` を実行して診断情報を確認
5. `notificationManager.sendTestNotification()` でテスト通知を送信

### ステップ6: 動作確認
1. PWA を開いて基本機能をテスト
2. 管理画面にログインして認証をテスト
3. 通知機能をテスト（iOS PWAを含む）

---

## 📝 設定値チェックリスト

### Firebase関連
- [ ] Project ID
- [ ] API Key
- [ ] Auth Domain
- [ ] Storage Bucket
- [ ] Messaging Sender ID
- [ ] App ID
- [ ] VAPID Key
- [ ] Server Key

### Supabase関連
- [ ] Project URL
- [ ] Anon Key
- [ ] Service Role Key
- [ ] データベーススキーマ実行完了

### GAS関連
- [ ] WebアプリURL
- [ ] スクリプトプロパティ設定完了
- [ ] 管理者アカウント設定完了

### PWA関連
- [ ] `js/config.js` 更新完了
- [ ] `js/firebase-config.js` 更新完了
- [ ] `index.html` にFirebase SDKスクリプト追加完了
- [ ] iOS PWA対応設定完了

---

## ⚠️ セキュリティ注意事項

### 1. 本番環境での設定
- `DEBUG_MODE` を `false` に設定
- 管理者パスワードを強力なものに変更
- Service Role キーは絶対に公開しない

### 2. API キーの管理
- Anon Key は公開されても問題ないが、Service Role Key は秘匿情報
- Firebase Server Key も秘匿情報として管理

### 3. 定期メンテナンス
- 古いデバイス登録の定期クリーンアップ
- 通知配信ログの定期削除
- セキュリティアップデートの適用

---

## 📱 iOS PWA向け通知機能のテスト

### テスト方法
1. iOSデバイスでサイトを開く
2. ホーム画面に追加（「ホーム画面に追加」→「追加」）
3. ホーム画面からPWAを起動（Safariではなく、ホーム画面のアイコンから）
4. ブラウザコンソールで以下のコマンドを実行：
   ```javascript
   // iOS PWAサポート状況の診断
   notificationManager.checkIOSPWASupport();
   
   // テスト通知の送信
   notificationManager.sendTestNotification({
     title: "テスト通知",
     body: "これはiOS PWA向けのテスト通知です",
     icon: "images/icons/icon-192x192.png",
     url: "./index.html",
     sound: true
   });
   ```

### iOS PWAの制限事項
1. **iOS 16.4未満の制限**：
   - iOS 16.4より前のバージョンではPWA内のService Workerが動作しません
   - カスタム通知UIを使用したフォールバック機能を実装済み

2. **通知音の制限**：
   - iOSではカスタム通知音の再生に制限があります
   - 標準の通知音またはシンプルな効果音のみ使用可能

3. **バックグラウンド通知**：
   - PWAがバックグラウンドの場合、通知はシステム通知として表示
   - フォアグラウンドの場合はカスタムUI通知として表示

---

## 🆘 トラブルシューティング

### 通知が届かない場合
1. FCMトークンの有効性確認
2. Firebase プロジェクト設定の確認
3. GAS実行ログの確認
4. ブラウザの通知許可状況確認
5. iOS PWAの場合の確認事項：
   - ホーム画面に追加されたPWAから起動しているか確認
   - `NotificationManager.checkIOSPWASupport()` を実行して診断情報を確認
   - iOS 16.4以降を使用しているか確認（それ以前のバージョンではPWA内のService Workerがサポートされていない）
   - カスタム通知UIが正しく表示されるか確認

### 管理画面にログインできない場合
1. GAS WebアプリのURL確認
2. スクリプトプロパティの設定確認
3. 管理者アカウントの設定確認

### データベース接続エラーの場合
1. Supabase Project URLの確認
2. API キーの確認
3. RLS（Row Level Security）ポリシーの確認

---

## 📞 サポート

設定で困った場合は、以下の情報を含めてお問い合わせください：
- エラーメッセージ
- ブラウザの開発者ツールのConsoleログ
- GASの実行ログ
- 設定した値（秘匿情報は除く）

設定完了後は、強力で柔軟な学生ポータルシステムをお楽しみください！


[survey.html]
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>アンケート・投票 - なずなポータル</title>
    <link rel="stylesheet" href="css/style.css">
    <link rel="manifest" href="manifest.json">
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <meta name="theme-color" content="#2c3e50">
    <!-- Supabase CDN -->
    <script src="https://unpkg.com/@supabase/supabase-js@2"></script>
</head>
<body>
    <!-- サイドバー -->
    <div class="sidebar" id="sidebar">
        <div class="sidebar-header">
            <h2>なずなポータル</h2>
            <p>みんなでつくる学校生活</p>
            <button class="sidebar-close-btn" id="sidebar-close-btn" aria-label="メニューを閉じる">
                <i class="fas fa-times"></i>
            </button>
        </div>
        <nav class="sidebar-nav">
            <ul>
                <li>
                    <a href="index.html">
                        <i class="fas fa-home"></i>
                        <span>ホーム</span>
                    </a>
                </li>
                <li>
                    <a href="council.html">
                        <i class="fas fa-users"></i>
                        <span>生徒会紹介</span>
                    </a>
                </li>
                <li>
                    <a href="clubs.html">
                        <i class="fas fa-running"></i>
                        <span>部活動</span>
                    </a>
                </li>
                <li>
                    <a href="forum.html">
                        <i class="fas fa-comments"></i>
                        <span>なずなフォーラム</span>
                    </a>
                </li>
                <li>
                    <a href="news.html">
                        <i class="fas fa-bell"></i>
                        <span>お知らせ</span>
                    </a>
                </li>
                <li>
                    <a href="survey.html" class="active">
                        <i class="fas fa-poll"></i>
                        <span>アンケート</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
    
    <!-- サイドバーオーバーレイ -->
    <div class="sidebar-overlay" id="sidebar-overlay"></div>
    <header>
        <nav class="navbar">
            <div class="nav-container">
                <button class="hamburger" id="hamburger" aria-label="メニューを開く" aria-expanded="false">
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                    <span aria-hidden="true"></span>
                </button>
                <h1 class="logo">なずなポータル</h1>
                <div class="nav-spacer"></div>
            </div>
        </nav>
    </header>

    <main>
        <!-- ページヘッダー -->
        <section class="page-header">
            <div class="container">
                <div class="page-header-content">
                    <h1><i class="fas fa-poll"></i> アンケート・投票</h1>
                    <p>あなたの意見で学校生活をより良くしましょう</p>
                </div>
            </div>
        </section>

        <!-- 現在実施中のアンケート -->
        <section class="active-surveys">
            <div class="container">
                <h2 class="section-title">実施中のアンケート・投票</h2>
                <div class="surveys-grid" id="active-surveys">
                    <div class="loading">読み込み中...</div>
                </div>
            </div>
        </section>

        <!-- サンプルアンケート -->
        <section class="sample-survey">
            <div class="container">
                <div class="survey-card active-survey">
                    <div class="survey-header">
                        <div class="survey-status">
                            <span class="status-badge active">実施中</span>
                            <span class="survey-deadline">締切: 2024年2月15日</span>
                        </div>
                        <h3>文化祭の企画について</h3>
                        <p>来年度の文化祭をより楽しいものにするため、皆さんのご意見をお聞かせください。</p>
                    </div>
                    
                    <div class="survey-content">
                        <div class="question">
                            <h4>Q1. 文化祭で最も楽しみにしているのは何ですか？</h4>
                            <div class="options">
                                <label class="option">
                                    <input type="radio" name="q1" value="stage">
                                    <span class="checkmark"></span>
                                    ステージ発表
                                </label>
                                <label class="option">
                                    <input type="radio" name="q1" value="exhibition">
                                    <span class="checkmark"></span>
                                    展示・体験コーナー
                                </label>
                                <label class="option">
                                    <input type="radio" name="q1" value="food">
                                    <span class="checkmark"></span>
                                    模擬店・食べ物
                                </label>
                                <label class="option">
                                    <input type="radio" name="q1" value="game">
                                    <span class="checkmark"></span>
                                    ゲーム・アトラクション
                                </label>
                            </div>
                        </div>
                        
                        <div class="question">
                            <h4>Q2. 新しく追加してほしい企画はありますか？（複数選択可）</h4>
                            <div class="options">
                                <label class="option">
                                    <input type="checkbox" name="q2" value="concert">
                                    <span class="checkmark"></span>
                                    コンサート・ライブ
                                </label>
                                <label class="option">
                                    <input type="checkbox" name="q2" value="contest">
                                    <span class="checkmark"></span>
                                    コンテスト・大会
                                </label>
                                <label class="option">
                                    <input type="checkbox" name="q2" value="workshop">
                                    <span class="checkmark"></span>
                                    ワークショップ
                                </label>
                                <label class="option">
                                    <input type="checkbox" name="q2" value="market">
                                    <span class="checkmark"></span>
                                    フリーマーケット
                                </label>
                            </div>
                        </div>
                        
                        <div class="question">
                            <h4>Q3. その他のご意見・ご要望があればお聞かせください</h4>
                            <textarea class="form-control" placeholder="自由にご記入ください"></textarea>
                        </div>
                        
                        <div class="survey-actions">
                            <button class="btn btn-primary">
                                <i class="fas fa-paper-plane"></i>
                                回答を送信
                            </button>
                            <div class="survey-info">
                                <small>
                                    <i class="fas fa-info-circle"></i>
                                    回答は匿名で処理されます
                                </small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>

        <!-- 過去のアンケート結果 -->
        <section class="past-surveys">
            <div class="container">
                <h2 class="section-title">過去のアンケート結果</h2>
                <div class="results-grid">
                    <div class="result-card">
                        <div class="result-header">
                            <h3>体育祭の種目について</h3>
                            <span class="result-date">2024年1月実施</span>
                        </div>
                        <div class="result-summary">
                            <p>回答者数: 245名</p>
                            <div class="result-chart">
                                <div class="chart-item">
                                    <span class="chart-label">リレー</span>
                                    <div class="chart-bar">
                                        <div class="chart-fill" style="width: 85%"></div>
                                    </div>
                                    <span class="chart-value">85%</span>
                                </div>
                                <div class="chart-item">
                                    <span class="chart-label">綱引き</span>
                                    <div class="chart-bar">
                                        <div class="chart-fill" style="width: 72%"></div>
                                    </div>
                                    <span class="chart-value">72%</span>
                                </div>
                                <div class="chart-item">
                                    <span class="chart-label">玉入れ</span>
                                    <div class="chart-bar">
                                        <div class="chart-fill" style="width: 68%"></div>
                                    </div>
                                    <span class="chart-value">68%</span>
                                </div>
                            </div>
                        </div>
                        <a href="#" class="btn btn-outline">詳細を見る</a>
                    </div>
                    
                    <div class="result-card">
                        <div class="result-header">
                            <h3>給食メニューの満足度</h3>
                            <span class="result-date">2023年12月実施</span>
                        </div>
                        <div class="result-summary">
                            <p>回答者数: 312名</p>
                            <div class="satisfaction-chart">
                                <div class="satisfaction-item">
                                    <span>とても満足</span>
                                    <div class="satisfaction-bar" style="width: 35%">35%</div>
                                </div>
                                <div class="satisfaction-item">
                                    <span>満足</span>
                                    <div class="satisfaction-bar" style="width: 45%">45%</div>
                                </div>
                                <div class="satisfaction-item">
                                    <span>普通</span>
                                    <div class="satisfaction-bar" style="width: 15%">15%</div>
                                </div>
                                <div class="satisfaction-item">
                                    <span>不満</span>
                                    <div class="satisfaction-bar" style="width: 5%">5%</div>
                                </div>
                            </div>
                        </div>
                        <a href="#" class="btn btn-outline">詳細を見る</a>
                    </div>
                    
                    <div class="result-card">
                        <div class="result-header">
                            <h3>部活動の活動時間について</h3>
                            <span class="result-date">2023年11月実施</span>
                        </div>
                        <div class="result-summary">
                            <p>回答者数: 189名</p>
                            <div class="pie-chart-text">
                                <p>現在の活動時間が「適切」と回答した生徒が78%、「長すぎる」が15%、「短すぎる」が7%でした。</p>
                            </div>
                        </div>
                        <a href="#" class="btn btn-outline">詳細を見る</a>
                    </div>
                </div>
            </div>
        </section>

        <!-- アンケート作成依頼 -->
        <section class="survey-request">
            <div class="container">
                <div class="request-content">
                    <h2>アンケートの実施を依頼する</h2>
                    <p>学校生活に関するアンケートの実施を希望される場合は、生徒会までご相談ください。適切な内容であれば、アンケートの作成・実施をサポートいたします。</p>
                    <div class="request-steps">
                        <div class="step">
                            <div class="step-number">1</div>
                            <div class="step-content">
                                <h4>相談・提案</h4>
                                <p>なずなフォーラムまたは生徒会室で相談</p>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">2</div>
                            <div class="step-content">
                                <h4>内容検討</h4>
                                <p>アンケートの目的と内容を検討</p>
                            </div>
                        </div>
                        <div class="step">
                            <div class="step-number">3</div>
                            <div class="step-content">
                                <h4>実施・公開</h4>
                                <p>アンケート実施と結果の公開</p>
                            </div>
                        </div>
                    </div>
                    <div class="request-buttons">
                        <a href="forum.html" class="btn btn-primary">
                            <i class="fas fa-comments"></i>
                            フォーラムで相談
                        </a>
                        <a href="council.html" class="btn btn-secondary">
                            <i class="fas fa-users"></i>
                            生徒会について
                        </a>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer>
        <div class="footer-content">
            <div class="footer-section">
                <h3>なずなポータル</h3>
                <p>みんなでつくる学校生活</p>
            </div>
            <div class="footer-section">
                <h4>リンク</h4>
                <ul>
                    <li><a href="council.html">生徒会紹介</a></li>
                    <li><a href="clubs.html">部活動</a></li>
                    <li><a href="forum.html">なずなフォーラム</a></li>
                </ul>
            </div>
            <div class="footer-section">
                <h4>お問い合わせ</h4>
                <p>生徒会室まで</p>
            </div>
        </div>
        <div class="footer-bottom">
            <p>&copy; 2025 市川学園生徒会. All rights reserved.</p>
            <p class="admin-link"><a href="admin.html">管理者ログイン</a></p>
        </div>
    </footer>

    <script src="js/config.js"></script>
    <script src="js/supabase-queries.js"></script>
    <script src="js/app.js"></script>
    <script src="js/pwa-install.js"></script>
    <script src="js/pwa-update.js"></script>
</body>
</html>


[sw.js]
const CACHE_NAME = 'nazuna-portal-v17';
// BroadcastChannel name for SW <-> Page messaging
const UPDATE_CHANNEL_NAME = 'pwa-updates';
const bc = (typeof BroadcastChannel !== 'undefined') ? new BroadcastChannel(UPDATE_CHANNEL_NAME) : null;
const urlsToCache = [
  './',
  './index.html',
  './news.html',
  './clubs.html',
  './forum.html',
  './member-detail.html',
  './admin.html',
  './manifest.json',
  './css/style.css',
  './css/admin.css',
  './js/config.js',
  './js/supabase-queries.js',
  './js/app.js',
  './js/admin.js',
  './js/member-detail.js',
  './js/pwa-install.js',
  './js/pwa-update.js',
  './js/firebase-config.js',
  './js/notification-manager.js',
  './images/icon-192x192.png',
  './images/icon-512x512.png',
  './images/badge-72x72.png',
  'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png'
];

// インストール時のキャッシュ + 即時有効化を促す
self.addEventListener('install', event => {
  event.waitUntil(
    (async () => {
      const cache = await caches.open(CACHE_NAME);
      console.log('Opened cache');
      await cache.addAll(urlsToCache);
      // すぐに待機状態へ移行（待機中→メッセージでskipWaitingを促す運用）
      await self.skipWaiting();
      try { bc && bc.postMessage({ type: 'INSTALLED', version: CACHE_NAME, timestamp: Date.now() }); } catch {}
    })()
  );
});

// リクエスト時のキャッシュ戦略
self.addEventListener('fetch', event => {
  const { request } = event;

  // 非GETメソッドはキャッシュせず、そのままネットワークへ
  if (request.method && request.method !== 'GET') {
    event.respondWith(fetch(request));
    return;
  }

  // HTMLナビゲーションはオフライン時にルートをフォールバック
  if (request.mode === 'navigate') {
    event.respondWith((async () => {
      try {
        const preload = event.preloadResponse ? await event.preloadResponse : null;
        if (preload) return preload;
        const network = await fetch(request);
        return network;
      } catch (e) {
        const cached = await caches.match(request);
        if (cached) return cached;
        return caches.match('./index.html');
      }
    })());
    return;
  }

  const url = new URL(request.url);

  // API/GAS は network-first + stale-while-revalidate（GET のみキャッシュ）
  const isApi = url.pathname.includes('/macros/s/') || url.pathname.startsWith('/api/') || url.hostname.endsWith('supabase.co');
  if (isApi) {
    event.respondWith((async () => {
      const cache = await caches.open(CACHE_NAME);
      try {
        const network = await fetch(request);
        if (network && network.status === 200 && request.method === 'GET') {
          event.waitUntil(cache.put(request, network.clone()));
        }
        return network;
      } catch (e) {
        const cached = await cache.match(request, { ignoreMethod: true });
        if (cached) return cached;
        throw e;
      }
    })());
    return;
  }

  // 静的アセットは cache-first + update in background
  event.respondWith((async () => {
    const cache = await caches.open(CACHE_NAME);
    const cached = await cache.match(request, { ignoreMethod: true });
    const fetchAndUpdate = fetch(request).then(resp => {
      if (resp && resp.status === 200 && request.method === 'GET') cache.put(request, resp.clone());
      return resp;
    }).catch(() => null);

    if (cached) {
      event.waitUntil(fetchAndUpdate);
      return cached;
    }
    const network = await fetchAndUpdate;
    if (network) return network;
    // 最後の手段
    return caches.match('./');
  })());
});

// 古いキャッシュの削除
self.addEventListener('activate', event => {
  const cacheWhitelist = [CACHE_NAME];
  
  event.waitUntil(
    (async () => {
      const cacheNames = await caches.keys();
      await Promise.all(
        cacheNames.map(cacheName => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            return caches.delete(cacheName);
          }
        })
      );
      // 直ちにクライアントを制御して古いSWによるループを防止
      await self.clients.claim();
      // 新バージョン有効化通知（必要に応じてページ側でリロード制御）
      try {
        const clientList = await clients.matchAll({ type: 'window', includeUncontrolled: true });
        clientList.forEach(client => client.postMessage({
          type: 'UPDATE_AVAILABLE',
          version: CACHE_NAME,
          timestamp: Date.now()
        }));
      } catch (e) {}
      try { bc && bc.postMessage({ type: 'ACTIVATED', version: CACHE_NAME, timestamp: Date.now() }); } catch {}
    })()
  );
});

// プッシュ通知の受信（カスタムメッセージ対応版）
self.addEventListener('push', event => {
  console.log('Push message received:', event);
  
  let notificationData = {
    title: '',
    body: '',
    icon: 'https://raw.githubusercontent.com/J105588/nazuna-portal/main/images/icon-192x192.png',
    badge: './images/badge-72x72.png',
    url: './',
    tag: 'general'
  };
  
  // プッシュデータがある場合は解析
  if (event.data) {
    try {
      const parseData = () => {
        try { return event.data.json(); } catch (e) {}
        try { return JSON.parse(event.data.text()); } catch (e) {}
        return { body: event.data.text() };
      };
      const rawData = parseData();
      console.log('Parsed push data:', rawData);
      const d = rawData || {};
      const fromData = d.data || d; // HTTP v1 data優先
      const fromNotification = d.notification || {};
      const title = fromData.title || fromNotification.title || d.title || notificationData.title;
      const body = fromData.body || fromData.message || fromNotification.body || d.body || notificationData.body;
      const icon = fromData.icon || fromNotification.icon || notificationData.icon;
      const badge = fromData.badge || fromNotification.badge || notificationData.badge;
      const url = fromData.url || fromData.action_url || d.action_url || notificationData.url;
      const tag = fromData.tag || fromData.category || fromNotification.tag || notificationData.tag;
      const actions = (() => {
        const a = fromData.actions || fromNotification.actions;
        if (!a) return [ { action: 'view', title: '詳細を見る' }, { action: 'dismiss', title: '閉じる' } ];
        if (typeof a === 'string') { try { return JSON.parse(a); } catch { return notificationData.actions; } }
        return a;
      })();
      const vibrate = fromData.vibrate ? (typeof fromData.vibrate === 'string' ? JSON.parse(fromData.vibrate) : fromData.vibrate) : [200, 100, 200];
      const requireInteraction = !!fromData.requireInteraction;
      const renotify = !!fromData.renotify;
      const silent = !!fromData.silent;
      const timestamp = fromData.timestamp || Date.now();
      notificationData = {
        title,
        body,
        icon,
        badge,
        url,
        tag,
        requireInteraction,
        actions,
        vibrate,
        silent,
        renotify,
        timestamp,
        data: {
          url,
          category: fromData.category || 'general',
          timestamp,
          originalData: d
        }
      };
    } catch (error) {
      console.error('Error parsing push data:', error);
      try { notificationData.body = event.data.text(); } catch (e) {}
    }
  }
  
  const options = {
    body: notificationData.body || ' ',
    icon: notificationData.icon,
    badge: notificationData.badge,
    vibrate: notificationData.vibrate || [200, 100, 200],
    requireInteraction: !!notificationData.requireInteraction,
    tag: notificationData.tag,
    renotify: true,
    actions: notificationData.actions || [
      { action: 'view', title: '詳細を見る' },
      { action: 'dismiss', title: '閉じる' }
    ],
    data: {
      url: notificationData.url,
      dateOfArrival: Date.now(),
      originalData: notificationData.data?.originalData || null
    }
  };
  
  event.waitUntil(
    self.registration.showNotification(notificationData.title, options)
  );
});

// 通知のクリック処理
self.addEventListener('notificationclick', event => {
  console.log('Notification clicked:', event);
  
  event.notification.close();
  
  // アクションに応じてURLを決定（通常クリックは通知データのURLを優先）
  let urlToOpen = event.notification.data?.url || './';
  if (event.action) {
    switch (event.action) {
      case 'view_news':
        urlToOpen = './news.html';
        break;
      case 'view_forum':
        urlToOpen = './forum.html';
        break;
      case 'view_survey':
        urlToOpen = './survey.html';
        break;
      case 'dismiss':
        return; // 何もしない
    }
  }
  
  event.waitUntil(
    clients.matchAll({
      type: 'window',
      includeUncontrolled: true
    }).then(clientList => {
      // 既に開いているタブがあるかチェック
      for (let i = 0; i < clientList.length; i++) {
        const client = clientList[i];
        if (client.url.includes(self.location.origin) && 'focus' in client) {
          // 既存のタブにフォーカスして、必要に応じてナビゲート
          return client.focus().then(() => {
            if (urlToOpen && urlToOpen !== './') {
              return client.navigate(urlToOpen);
            }
          });
        }
      }
      
      // 新しいタブを開く
      if (clients.openWindow) {
        return clients.openWindow(urlToOpen || './');
      }
    })
  );
});

// バックグラウンド同期
self.addEventListener('sync', event => {
  console.log('Background sync:', event.tag);
  
  if (event.tag === 'background-sync') {
    event.waitUntil(doBackgroundSync());
  }
});

// バックグラウンド同期処理
async function doBackgroundSync() {
  try {
    console.log('Performing background sync...');
    
    // オフライン時に蓄積されたデータを送信
    const offlineData = await getOfflineData();
    if (offlineData.length > 0) {
      for (const data of offlineData) {
        await sendToServer(data);
      }
      await clearOfflineData();
    }
    
    console.log('Background sync completed');
  } catch (error) {
    console.error('Background sync failed:', error);
  }
}

// オフラインデータの取得
async function getOfflineData() {
  try {
    const cache = await caches.open('offline-data');
    const requests = await cache.keys();
    const data = [];
    
    for (const request of requests) {
      const response = await cache.match(request);
      if (response) {
        const json = await response.json();
        data.push(json);
      }
    }
    
    return data;
  } catch (error) {
    console.error('Error getting offline data:', error);
    return [];
  }
}

// サーバーへのデータ送信
async function sendToServer(data) {
  try {
    const response = await fetch('/api/sync', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(data)
    });
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('Error sending data to server:', error);
    throw error;
  }
}

// オフラインデータのクリア
async function clearOfflineData() {
  try {
    await caches.delete('offline-data');
    console.log('Offline data cleared');
  } catch (error) {
    console.error('Error clearing offline data:', error);
  }
}

// Service Workerからのメッセージ受信
self.addEventListener('message', event => {
  console.log('Service Worker received message:', event.data);
  
  if (event.data && event.data.type === 'SKIP_WAITING') {
    console.log('Skipping waiting and activating new service worker');
    self.skipWaiting();
    return;
  }

  if (event.data && event.data.type === 'CHECK_UPDATE') {
    (async () => {
      try {
        // 明示的に更新を確認
        if (self.registration && self.registration.update) {
          await self.registration.update();
        }
        // 待機中のSWがいれば、更新通知を送信
        const hasWaiting = self.registration && self.registration.waiting;
        const clientList = await clients.matchAll({ type: 'window', includeUncontrolled: true });
        clientList.forEach(client => client.postMessage({
          type: hasWaiting ? 'UPDATE_AVAILABLE' : 'NO_UPDATE',
          version: CACHE_NAME,
          timestamp: Date.now()
        }));
        try { bc && bc.postMessage({ type: hasWaiting ? 'UPDATE_AVAILABLE' : 'NO_UPDATE', version: CACHE_NAME, timestamp: Date.now() }); } catch {}
      } catch (e) {
        try {
          const clientList = await clients.matchAll({ type: 'window', includeUncontrolled: true });
          clientList.forEach(client => client.postMessage({ type: 'NO_UPDATE', version: CACHE_NAME, timestamp: Date.now() }));
        } catch {}
        try { bc && bc.postMessage({ type: 'NO_UPDATE', version: CACHE_NAME, timestamp: Date.now() }); } catch {}
      }
    })();
  }
  if (event.data && event.data.type === 'APPLY_UPDATE') {
    try { self.skipWaiting(); } catch {}
  }
});

// BroadcastChannel からのメッセージを受け取り処理
if (bc) {
  bc.addEventListener('message', (ev) => {
    const data = ev.data || {};
    if (!data || !data.type) return;
    switch (data.type) {
      case 'CHECK_UPDATE':
        self.dispatchEvent(new MessageEvent('message', { data }));
        break;
      case 'APPLY_UPDATE':
        try { self.skipWaiting(); } catch {}
        break;
      default:
        break;
    }
  });
}

